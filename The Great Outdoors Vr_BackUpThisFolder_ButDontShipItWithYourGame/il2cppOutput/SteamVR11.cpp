#include "il2cpp-config.h"

#ifndef _MSC_VER
# include <alloca.h>
#else
# include <malloc.h>
#endif


#include <cstring>
#include <string.h>
#include <stdio.h>
#include <cmath>
#include <limits>
#include <assert.h>
#include <stdint.h>

#include "codegen/il2cpp-codegen.h"
#include "il2cpp-object-internals.h"

template <typename T1>
struct VirtActionInvoker1
{
	typedef void (*Action)(void*, T1, const RuntimeMethod*);

	static inline void Invoke (Il2CppMethodSlot slot, RuntimeObject* obj, T1 p1)
	{
		const VirtualInvokeData& invokeData = il2cpp_codegen_get_virtual_invoke_data(slot, obj);
		((Action)invokeData.methodPtr)(obj, p1, invokeData.method);
	}
};
template <typename R>
struct VirtFuncInvoker0
{
	typedef R (*Func)(void*, const RuntimeMethod*);

	static inline R Invoke (Il2CppMethodSlot slot, RuntimeObject* obj)
	{
		const VirtualInvokeData& invokeData = il2cpp_codegen_get_virtual_invoke_data(slot, obj);
		return ((Func)invokeData.methodPtr)(obj, invokeData.method);
	}
};
template <typename T1, typename T2>
struct VirtActionInvoker2
{
	typedef void (*Action)(void*, T1, T2, const RuntimeMethod*);

	static inline void Invoke (Il2CppMethodSlot slot, RuntimeObject* obj, T1 p1, T2 p2)
	{
		const VirtualInvokeData& invokeData = il2cpp_codegen_get_virtual_invoke_data(slot, obj);
		((Action)invokeData.methodPtr)(obj, p1, p2, invokeData.method);
	}
};
struct VirtActionInvoker0
{
	typedef void (*Action)(void*, const RuntimeMethod*);

	static inline void Invoke (Il2CppMethodSlot slot, RuntimeObject* obj)
	{
		const VirtualInvokeData& invokeData = il2cpp_codegen_get_virtual_invoke_data(slot, obj);
		((Action)invokeData.methodPtr)(obj, invokeData.method);
	}
};
template <typename T1, typename T2, typename T3>
struct VirtActionInvoker3
{
	typedef void (*Action)(void*, T1, T2, T3, const RuntimeMethod*);

	static inline void Invoke (Il2CppMethodSlot slot, RuntimeObject* obj, T1 p1, T2 p2, T3 p3)
	{
		const VirtualInvokeData& invokeData = il2cpp_codegen_get_virtual_invoke_data(slot, obj);
		((Action)invokeData.methodPtr)(obj, p1, p2, p3, invokeData.method);
	}
};
template <typename T1, typename T2, typename T3, typename T4>
struct VirtActionInvoker4
{
	typedef void (*Action)(void*, T1, T2, T3, T4, const RuntimeMethod*);

	static inline void Invoke (Il2CppMethodSlot slot, RuntimeObject* obj, T1 p1, T2 p2, T3 p3, T4 p4)
	{
		const VirtualInvokeData& invokeData = il2cpp_codegen_get_virtual_invoke_data(slot, obj);
		((Action)invokeData.methodPtr)(obj, p1, p2, p3, p4, invokeData.method);
	}
};
template <typename T1>
struct GenericVirtActionInvoker1
{
	typedef void (*Action)(void*, T1, const RuntimeMethod*);

	static inline void Invoke (const RuntimeMethod* method, RuntimeObject* obj, T1 p1)
	{
		VirtualInvokeData invokeData;
		il2cpp_codegen_get_generic_virtual_invoke_data(method, obj, &invokeData);
		((Action)invokeData.methodPtr)(obj, p1, invokeData.method);
	}
};
template <typename T1, typename T2>
struct GenericVirtActionInvoker2
{
	typedef void (*Action)(void*, T1, T2, const RuntimeMethod*);

	static inline void Invoke (const RuntimeMethod* method, RuntimeObject* obj, T1 p1, T2 p2)
	{
		VirtualInvokeData invokeData;
		il2cpp_codegen_get_generic_virtual_invoke_data(method, obj, &invokeData);
		((Action)invokeData.methodPtr)(obj, p1, p2, invokeData.method);
	}
};
struct GenericVirtActionInvoker0
{
	typedef void (*Action)(void*, const RuntimeMethod*);

	static inline void Invoke (const RuntimeMethod* method, RuntimeObject* obj)
	{
		VirtualInvokeData invokeData;
		il2cpp_codegen_get_generic_virtual_invoke_data(method, obj, &invokeData);
		((Action)invokeData.methodPtr)(obj, invokeData.method);
	}
};
template <typename T1, typename T2, typename T3>
struct GenericVirtActionInvoker3
{
	typedef void (*Action)(void*, T1, T2, T3, const RuntimeMethod*);

	static inline void Invoke (const RuntimeMethod* method, RuntimeObject* obj, T1 p1, T2 p2, T3 p3)
	{
		VirtualInvokeData invokeData;
		il2cpp_codegen_get_generic_virtual_invoke_data(method, obj, &invokeData);
		((Action)invokeData.methodPtr)(obj, p1, p2, p3, invokeData.method);
	}
};
template <typename T1, typename T2, typename T3, typename T4>
struct GenericVirtActionInvoker4
{
	typedef void (*Action)(void*, T1, T2, T3, T4, const RuntimeMethod*);

	static inline void Invoke (const RuntimeMethod* method, RuntimeObject* obj, T1 p1, T2 p2, T3 p3, T4 p4)
	{
		VirtualInvokeData invokeData;
		il2cpp_codegen_get_generic_virtual_invoke_data(method, obj, &invokeData);
		((Action)invokeData.methodPtr)(obj, p1, p2, p3, p4, invokeData.method);
	}
};
template <typename T1>
struct InterfaceActionInvoker1
{
	typedef void (*Action)(void*, T1, const RuntimeMethod*);

	static inline void Invoke (Il2CppMethodSlot slot, RuntimeClass* declaringInterface, RuntimeObject* obj, T1 p1)
	{
		const VirtualInvokeData& invokeData = il2cpp_codegen_get_interface_invoke_data(slot, obj, declaringInterface);
		((Action)invokeData.methodPtr)(obj, p1, invokeData.method);
	}
};
template <typename T1, typename T2>
struct InterfaceActionInvoker2
{
	typedef void (*Action)(void*, T1, T2, const RuntimeMethod*);

	static inline void Invoke (Il2CppMethodSlot slot, RuntimeClass* declaringInterface, RuntimeObject* obj, T1 p1, T2 p2)
	{
		const VirtualInvokeData& invokeData = il2cpp_codegen_get_interface_invoke_data(slot, obj, declaringInterface);
		((Action)invokeData.methodPtr)(obj, p1, p2, invokeData.method);
	}
};
struct InterfaceActionInvoker0
{
	typedef void (*Action)(void*, const RuntimeMethod*);

	static inline void Invoke (Il2CppMethodSlot slot, RuntimeClass* declaringInterface, RuntimeObject* obj)
	{
		const VirtualInvokeData& invokeData = il2cpp_codegen_get_interface_invoke_data(slot, obj, declaringInterface);
		((Action)invokeData.methodPtr)(obj, invokeData.method);
	}
};
template <typename T1, typename T2, typename T3>
struct InterfaceActionInvoker3
{
	typedef void (*Action)(void*, T1, T2, T3, const RuntimeMethod*);

	static inline void Invoke (Il2CppMethodSlot slot, RuntimeClass* declaringInterface, RuntimeObject* obj, T1 p1, T2 p2, T3 p3)
	{
		const VirtualInvokeData& invokeData = il2cpp_codegen_get_interface_invoke_data(slot, obj, declaringInterface);
		((Action)invokeData.methodPtr)(obj, p1, p2, p3, invokeData.method);
	}
};
template <typename T1, typename T2, typename T3, typename T4>
struct InterfaceActionInvoker4
{
	typedef void (*Action)(void*, T1, T2, T3, T4, const RuntimeMethod*);

	static inline void Invoke (Il2CppMethodSlot slot, RuntimeClass* declaringInterface, RuntimeObject* obj, T1 p1, T2 p2, T3 p3, T4 p4)
	{
		const VirtualInvokeData& invokeData = il2cpp_codegen_get_interface_invoke_data(slot, obj, declaringInterface);
		((Action)invokeData.methodPtr)(obj, p1, p2, p3, p4, invokeData.method);
	}
};
template <typename T1>
struct GenericInterfaceActionInvoker1
{
	typedef void (*Action)(void*, T1, const RuntimeMethod*);

	static inline void Invoke (const RuntimeMethod* method, RuntimeObject* obj, T1 p1)
	{
		VirtualInvokeData invokeData;
		il2cpp_codegen_get_generic_interface_invoke_data(method, obj, &invokeData);
		((Action)invokeData.methodPtr)(obj, p1, invokeData.method);
	}
};
template <typename T1, typename T2>
struct GenericInterfaceActionInvoker2
{
	typedef void (*Action)(void*, T1, T2, const RuntimeMethod*);

	static inline void Invoke (const RuntimeMethod* method, RuntimeObject* obj, T1 p1, T2 p2)
	{
		VirtualInvokeData invokeData;
		il2cpp_codegen_get_generic_interface_invoke_data(method, obj, &invokeData);
		((Action)invokeData.methodPtr)(obj, p1, p2, invokeData.method);
	}
};
struct GenericInterfaceActionInvoker0
{
	typedef void (*Action)(void*, const RuntimeMethod*);

	static inline void Invoke (const RuntimeMethod* method, RuntimeObject* obj)
	{
		VirtualInvokeData invokeData;
		il2cpp_codegen_get_generic_interface_invoke_data(method, obj, &invokeData);
		((Action)invokeData.methodPtr)(obj, invokeData.method);
	}
};
template <typename T1, typename T2, typename T3>
struct GenericInterfaceActionInvoker3
{
	typedef void (*Action)(void*, T1, T2, T3, const RuntimeMethod*);

	static inline void Invoke (const RuntimeMethod* method, RuntimeObject* obj, T1 p1, T2 p2, T3 p3)
	{
		VirtualInvokeData invokeData;
		il2cpp_codegen_get_generic_interface_invoke_data(method, obj, &invokeData);
		((Action)invokeData.methodPtr)(obj, p1, p2, p3, invokeData.method);
	}
};
template <typename T1, typename T2, typename T3, typename T4>
struct GenericInterfaceActionInvoker4
{
	typedef void (*Action)(void*, T1, T2, T3, T4, const RuntimeMethod*);

	static inline void Invoke (const RuntimeMethod* method, RuntimeObject* obj, T1 p1, T2 p2, T3 p3, T4 p4)
	{
		VirtualInvokeData invokeData;
		il2cpp_codegen_get_generic_interface_invoke_data(method, obj, &invokeData);
		((Action)invokeData.methodPtr)(obj, p1, p2, p3, p4, invokeData.method);
	}
};

// SteamVR_Utils/RigidTransform[]
struct RigidTransformU5BU5D_tC98EB3576009E5D825D0D43671A65D32A2449ECC;
// System.AsyncCallback
struct AsyncCallback_t3F3DA3BEDAEE81DD1D24125DF8EB30E85EE14DA4;
// System.Byte[]
struct ByteU5BU5D_tD06FDBE8142446525DF1C40351D523A228373821;
// System.Char[]
struct CharU5BU5D_t4CC6ABF0AD71BEC97E3C2F1E9C5677E46D3A75C2;
// System.Collections.Generic.Dictionary`2<System.Int32,System.Globalization.CultureInfo>
struct Dictionary_2_tC88A56872F7C79DBB9582D4F3FC22ED5D8E0B98B;
// System.Collections.Generic.Dictionary`2<System.String,System.Globalization.CultureInfo>
struct Dictionary_2_tBA5388DBB42BF620266F9A48E8B859BBBB224E25;
// System.Collections.Generic.List`1<System.Int32>
struct List_1_tE1526161A558A17A39A8B69D8EEF3801393B6226;
// System.Delegate
struct Delegate_t;
// System.DelegateData
struct DelegateData_t1BF9F691B56DAE5F8C28C5E084FDE94F15F27BBE;
// System.Delegate[]
struct DelegateU5BU5D_tDFCDEE2A6322F96C0FE49AF47E9ADB8C4B294E86;
// System.Globalization.Calendar
struct Calendar_tF55A785ACD277504CF0D2F2C6AD56F76C6E91BD5;
// System.Globalization.CompareInfo
struct CompareInfo_tB9A071DBC11AC00AF2EA2066D0C2AE1DCB1865D1;
// System.Globalization.CultureData
struct CultureData_tF43B080FFA6EB278F4F289BCDA3FB74B6C208ECD;
// System.Globalization.CultureInfo
struct CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F;
// System.Globalization.DateTimeFormatInfo
struct DateTimeFormatInfo_tF4BB3AA482C2F772D2A9022F78BF8727830FAF5F;
// System.Globalization.NumberFormatInfo
struct NumberFormatInfo_tFDF57037EBC5BC833D0A53EF0327B805994860A8;
// System.Globalization.TextInfo
struct TextInfo_t5F1E697CB6A7E5EC80F0DC3A968B9B4A70C291D8;
// System.IAsyncResult
struct IAsyncResult_t8E194308510B375B42432981AE5E7488C458D598;
// System.Int32[]
struct Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83;
// System.Reflection.Binder
struct Binder_t4D5CB06963501D32847C057B57157D6DC49CA759;
// System.Reflection.MemberFilter
struct MemberFilter_t25C1BD92C42BE94426E300787C13C452CB89B381;
// System.Reflection.MethodInfo
struct MethodInfo_t;
// System.Single[]
struct SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5;
// System.String
struct String_t;
// System.String[]
struct StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E;
// System.Text.StringBuilder
struct StringBuilder_t;
// System.Type
struct Type_t;
// System.Type[]
struct TypeU5BU5D_t7FE623A666B49176DE123306221193E888A12F5F;
// System.Void
struct Void_t22962CB4C05B1D89B55A6E1139F0E87A90987017;
// UnityEngine.Quaternion[]
struct QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3;
// UnityEngine.Transform
struct Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA;
// UnityEngine.Vector3[]
struct Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28;
// Valve.VR.CVRInput
struct CVRInput_t2BE4417A3C1EA0C6CF647B0706BF37F886CE599B;
// Valve.VR.EVRInputStringBits[]
struct EVRInputStringBitsU5BU5D_t9F9E9B47CD745CAAB4F8EDC305D84DDF9E5BE511;
// Valve.VR.IVRInput/_DecompressSkeletalBoneData
struct _DecompressSkeletalBoneData_t8A92BDC21C8090D2E2952E48A5925D4B8DD48277;
// Valve.VR.IVRInput/_GetActionBindingInfo
struct _GetActionBindingInfo_t888BA9460789EBC395139AB0DBBBA3089B2E0FC5;
// Valve.VR.IVRInput/_GetActionHandle
struct _GetActionHandle_tAA6FC70C31E52EB9899414C5DF8666A660D73988;
// Valve.VR.IVRInput/_GetActionOrigins
struct _GetActionOrigins_tE0D9FE805034861066738B53CD6ED5D774553C69;
// Valve.VR.IVRInput/_GetActionSetHandle
struct _GetActionSetHandle_tDCCC10117A32D6F523EED20F9C35C8F104A6DE56;
// Valve.VR.IVRInput/_GetAnalogActionData
struct _GetAnalogActionData_t6B38FFFF0181415420E9380BDCFC944C9D73D6CB;
// Valve.VR.IVRInput/_GetBindingVariant
struct _GetBindingVariant_t54394654ADF0C4DFE91EC183B932B47AD3AD9F96;
// Valve.VR.IVRInput/_GetBoneCount
struct _GetBoneCount_t6C3C3EFD4AAFFC3A51B471217CA56C6CDB85A8A1;
// Valve.VR.IVRInput/_GetBoneHierarchy
struct _GetBoneHierarchy_t167DE2FE59F4348442E70AD40E9908D3396FE876;
// Valve.VR.IVRInput/_GetBoneName
struct _GetBoneName_t802A405B0C688F34E650358ED94EB5E83003B4FF;
// Valve.VR.IVRInput/_GetComponentStateForBinding
struct _GetComponentStateForBinding_t528D11F913578272C9159336F2B9473530BE99AA;
// Valve.VR.IVRInput/_GetDigitalActionData
struct _GetDigitalActionData_tF308BA2153B8638CAD78903A8E4A6FF63A0AE5E8;
// Valve.VR.IVRInput/_GetDominantHand
struct _GetDominantHand_tBA54323C6ADA02D432F6FB26A3AE1007002F5029;
// Valve.VR.IVRInput/_GetInputSourceHandle
struct _GetInputSourceHandle_tAB5E42F59BE5F64E4D025C405AD1DF589BE798EF;
// Valve.VR.IVRInput/_GetOriginLocalizedName
struct _GetOriginLocalizedName_t3FDAF7E14C966B8922289564E4EDFD9FD2708E4F;
// Valve.VR.IVRInput/_GetOriginTrackedDeviceInfo
struct _GetOriginTrackedDeviceInfo_tCCCCE9FC46CC32CD3CEE514462A4D2AAB295BA4B;
// Valve.VR.IVRInput/_GetPoseActionDataForNextFrame
struct _GetPoseActionDataForNextFrame_tAA10FE3259883E133F8F097728EED8DE994C157E;
// Valve.VR.IVRInput/_GetPoseActionDataRelativeToNow
struct _GetPoseActionDataRelativeToNow_t8ED7A8761F721F5713D809DB6B79BFDB91E01BB8;
// Valve.VR.IVRInput/_GetSkeletalActionData
struct _GetSkeletalActionData_t5F353A7DB921C384ACD71B83F4E7F83B8F957A1A;
// Valve.VR.IVRInput/_GetSkeletalBoneData
struct _GetSkeletalBoneData_tB6C26FFFE2DC1A4EBF7538C8B822BCF44FDE950A;
// Valve.VR.IVRInput/_GetSkeletalBoneDataCompressed
struct _GetSkeletalBoneDataCompressed_tE546DCB602D70AFE33D3988CA648F582BF4D795B;
// Valve.VR.IVRInput/_GetSkeletalReferenceTransforms
struct _GetSkeletalReferenceTransforms_tB13CA87584C074E43514FD286E673444A770C7F5;
// Valve.VR.IVRInput/_GetSkeletalSummaryData
struct _GetSkeletalSummaryData_tDBD7B97D7AEB5C6023AB7500B7EFB7B46FC00822;
// Valve.VR.IVRInput/_GetSkeletalTrackingLevel
struct _GetSkeletalTrackingLevel_t20487D8EE1F4E97466D3362B812896DAC707DE93;
// Valve.VR.IVRInput/_IsUsingLegacyInput
struct _IsUsingLegacyInput_t47530FACE216CEDA2B1629F03D1FE805B67664A7;
// Valve.VR.IVRInput/_OpenBindingUI
struct _OpenBindingUI_t04252A1EDE97A953F55220A73E647A8DD9EA831F;
// Valve.VR.IVRInput/_SetActionManifestPath
struct _SetActionManifestPath_tCC8157D33535562FA6C3DDCA5CBC0F82B51306FE;
// Valve.VR.IVRInput/_SetDominantHand
struct _SetDominantHand_t781C37553971079E806C986AF0571A5394BB608D;
// Valve.VR.IVRInput/_ShowActionOrigins
struct _ShowActionOrigins_t2D44C15D7A1A68B48BD8A5718303C019CB82DE71;
// Valve.VR.IVRInput/_ShowBindingsForActionSet
struct _ShowBindingsForActionSet_tE794CCA21EF1D46F19895A28146A79FA5B41BB2A;
// Valve.VR.IVRInput/_TriggerHapticVibrationAction
struct _TriggerHapticVibrationAction_tD6966DC222C78E33A391603FA738554C337292C8;
// Valve.VR.IVRInput/_UpdateActionState
struct _UpdateActionState_t34A07E451D658BB88598E974A3A804775EE414C5;
// Valve.VR.SteamVR_Action
struct SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734;
// Valve.VR.SteamVR_ActionSet
struct SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6;
// Valve.VR.SteamVR_ActionSet_Data
struct SteamVR_ActionSet_Data_tDA03CB718A3B3F5805D6D9C399D57E56AF9DA529;
// Valve.VR.SteamVR_Action_In_Source
struct SteamVR_Action_In_Source_t6C3FA81DC7F53D302E49E09F5791E612AC7832AB;
// Valve.VR.SteamVR_Action_In_Source_Map`1<System.Object>
struct SteamVR_Action_In_Source_Map_1_t7F4F1E354FE5A814AEA83C884D31215ED36A1A8D;
// Valve.VR.SteamVR_Action_In_Source_Map`1<Valve.VR.SteamVR_Action_Single_Source>
struct SteamVR_Action_In_Source_Map_1_t2C53C7DDA5E7BECE6E12D3EE7BFAB2ADF8781741;
// Valve.VR.SteamVR_Action_In_Source_Map`1<Valve.VR.SteamVR_Action_Vector2_Source>
struct SteamVR_Action_In_Source_Map_1_tE08712080E22D9A4BAF4C436860AA6226B5FC72D;
// Valve.VR.SteamVR_Action_In`2<System.Object,System.Object>
struct SteamVR_Action_In_2_t69D3F3E304EB8FE2A070ACD581E61CDFF8732243;
// Valve.VR.SteamVR_Action_In`2<Valve.VR.SteamVR_Action_Vector2_Source_Map,Valve.VR.SteamVR_Action_Vector2_Source>
struct SteamVR_Action_In_2_t4260173E99094920C69878272DE55CE93D5D5A9C;
// Valve.VR.SteamVR_Action_In`2<Valve.VR.SteamVR_Action_Vector3_Source_Map,Valve.VR.SteamVR_Action_Vector3_Source>
struct SteamVR_Action_In_2_tFC1FB3FBCB26CEB814D8547C997DDFD01A8A0FB2;
// Valve.VR.SteamVR_Action_Pose
struct SteamVR_Action_Pose_tC80CDCF5892F57737ABFCFF1E7BD7DC52951846C;
// Valve.VR.SteamVR_Action_Pose/ActiveChangeHandler
struct ActiveChangeHandler_t2BD02546A8103AFCEA506FDB4C84A21F0218D36E;
// Valve.VR.SteamVR_Action_Pose/ChangeHandler
struct ChangeHandler_tBB749BC376815901B6E13DF03202383F3302BFBE;
// Valve.VR.SteamVR_Action_Pose/DeviceConnectedChangeHandler
struct DeviceConnectedChangeHandler_t4AC124A9A94D668A0FB45EA8FC718729CEA3D0D9;
// Valve.VR.SteamVR_Action_Pose/TrackingChangeHandler
struct TrackingChangeHandler_t1CC1FD6A7111B86684B749C4E751B1F5237D2914;
// Valve.VR.SteamVR_Action_Pose/UpdateHandler
struct UpdateHandler_t4F6AB1825F5E5CE6A7BBCD6C84541B3DF13C2AA1;
// Valve.VR.SteamVR_Action_Pose/ValidPoseChangeHandler
struct ValidPoseChangeHandler_t1D487A0B0E2FB0D02C72EF5365E81BCD3E33B41A;
// Valve.VR.SteamVR_Action_Pose_Base`2<System.Object,System.Object>
struct SteamVR_Action_Pose_Base_2_tE4721EEBBC945BAAF6FF57A49BF6EB4ACDB13900;
// Valve.VR.SteamVR_Action_Pose_Base`2<Valve.VR.SteamVR_Action_Skeleton_Source_Map,Valve.VR.SteamVR_Action_Skeleton_Source>
struct SteamVR_Action_Pose_Base_2_tCF260D4E08F45DC042B3B5B7B7A2F6B84880C2C2;
// Valve.VR.SteamVR_Action_Pose_Source
struct SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27;
// Valve.VR.SteamVR_Action_Pose_Source_Map`1<System.Object>
struct SteamVR_Action_Pose_Source_Map_1_t8D737DFC58E320B9252D6AC46CC512D3AA443163;
// Valve.VR.SteamVR_Action_Pose_Source_Map`1<Valve.VR.SteamVR_Action_Skeleton_Source>
struct SteamVR_Action_Pose_Source_Map_1_t62FCD50EDE24217AD6FAFADAC23DA65555B7A125;
// Valve.VR.SteamVR_Action_Single_Source[]
struct SteamVR_Action_Single_SourceU5BU5D_t5C412D6C07F76DC7C2B627B5C442ED002CDEB277;
// Valve.VR.SteamVR_Action_Single_Source_Map
struct SteamVR_Action_Single_Source_Map_tBD46D15F4FCB5A4B6BDA2B1FE96035D4DDBDBA37;
// Valve.VR.SteamVR_Action_Skeleton
struct SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504;
// Valve.VR.SteamVR_Action_Skeleton/ActiveChangeHandler
struct ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4;
// Valve.VR.SteamVR_Action_Skeleton/ChangeHandler
struct ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7;
// Valve.VR.SteamVR_Action_Skeleton/DeviceConnectedChangeHandler
struct DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592;
// Valve.VR.SteamVR_Action_Skeleton/TrackingChangeHandler
struct TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4;
// Valve.VR.SteamVR_Action_Skeleton/UpdateHandler
struct UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046;
// Valve.VR.SteamVR_Action_Skeleton/ValidPoseChangeHandler
struct ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7;
// Valve.VR.SteamVR_Action_Skeleton_Source
struct SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72;
// Valve.VR.SteamVR_Action_Skeleton_Source[]
struct SteamVR_Action_Skeleton_SourceU5BU5D_tD7F80DE17D413EA1E866B222C9A63AEBFF0CE5D4;
// Valve.VR.SteamVR_Action_Skeleton_Source_Map
struct SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB;
// Valve.VR.SteamVR_Action_Source
struct SteamVR_Action_Source_t9D7428CDE39924074518EE6233D9A4FAB0C33CB0;
// Valve.VR.SteamVR_Action_Source_Map
struct SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17;
// Valve.VR.SteamVR_Action_Source_Map`1<System.Object>
struct SteamVR_Action_Source_Map_1_tCAA2C8FE17BA000619F1ADE00A17D8037F5B4B14;
// Valve.VR.SteamVR_Action_Source_Map`1<Valve.VR.SteamVR_Action_Skeleton_Source>
struct SteamVR_Action_Source_Map_1_t27BBF2BA23BB14D6B7B203EF8ABFEF3D68E13AB1;
// Valve.VR.SteamVR_Action_Source_Map`1<Valve.VR.SteamVR_Action_Vector2_Source>
struct SteamVR_Action_Source_Map_1_tE12722D4173E7C4230CAF8EE7E30368AA130B899;
// Valve.VR.SteamVR_Action_Source_Map`1<Valve.VR.SteamVR_Action_Vector3_Source>
struct SteamVR_Action_Source_Map_1_tAA298402BDA6A553A0C30790E7129D18A7682C1F;
// Valve.VR.SteamVR_Action_Vector2
struct SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37;
// Valve.VR.SteamVR_Action_Vector2/ActiveChangeHandler
struct ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2;
// Valve.VR.SteamVR_Action_Vector2/AxisHandler
struct AxisHandler_t97FB692AF5465040A2929AB663941933E3567689;
// Valve.VR.SteamVR_Action_Vector2/ChangeHandler
struct ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6;
// Valve.VR.SteamVR_Action_Vector2/UpdateHandler
struct UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177;
// Valve.VR.SteamVR_Action_Vector2_Source
struct SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1;
// Valve.VR.SteamVR_Action_Vector2_Source[]
struct SteamVR_Action_Vector2_SourceU5BU5D_t7FCBB6318B7E6C02575D1D2F50CA74FE49CCB359;
// Valve.VR.SteamVR_Action_Vector2_Source_Map
struct SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3;
// Valve.VR.SteamVR_Action_Vector3
struct SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9;
// Valve.VR.SteamVR_Action_Vector3/ActiveChangeHandler
struct ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652;
// Valve.VR.SteamVR_Action_Vector3/AxisHandler
struct AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779;
// Valve.VR.SteamVR_Action_Vector3/ChangeHandler
struct ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B;
// Valve.VR.SteamVR_Action_Vector3/UpdateHandler
struct UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75;
// Valve.VR.SteamVR_Action_Vector3_Source
struct SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90;
// Valve.VR.SteamVR_Action_Vector3_Source[]
struct SteamVR_Action_Vector3_SourceU5BU5D_t3786953EC7D2DDE18FE5D1A5C158FE06D1C3E8BF;
// Valve.VR.SteamVR_Action_Vector3_Source_Map
struct SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95;
// Valve.VR.SteamVR_Action`2<System.Object,System.Object>
struct SteamVR_Action_2_t17CE6363B177E4D037F3097259B68D6F8842CC5B;
// Valve.VR.SteamVR_Action`2<Valve.VR.SteamVR_Action_Skeleton_Source_Map,Valve.VR.SteamVR_Action_Skeleton_Source>
struct SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D;
// Valve.VR.SteamVR_Action`2<Valve.VR.SteamVR_Action_Vector2_Source_Map,Valve.VR.SteamVR_Action_Vector2_Source>
struct SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258;
// Valve.VR.SteamVR_Action`2<Valve.VR.SteamVR_Action_Vector3_Source_Map,Valve.VR.SteamVR_Action_Vector3_Source>
struct SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902;
// Valve.VR.SteamVR_Input_Sources[]
struct SteamVR_Input_SourcesU5BU5D_t735048547A8599BA461FE16B1BC029194E1F184A;
// Valve.VR.SteamVR_Skeleton_FingerIndexEnum[]
struct SteamVR_Skeleton_FingerIndexEnumU5BU5D_t972F21E674536524E0BFB5F382CFD0ACA1714DB7;
// Valve.VR.SteamVR_Skeleton_FingerSplayIndexEnum[]
struct SteamVR_Skeleton_FingerSplayIndexEnumU5BU5D_t92DED5924CD2E6B494B9ABD5961F9BC65373A81B;
// Valve.VR.VRBoneTransform_t[]
struct VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B;

IL2CPP_EXTERN_C Il2CppSequencePoint g_sequencePointsSteamVR[];
IL2CPP_EXTERN_C RuntimeClass* ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* AxisHandler_t97FB692AF5465040A2929AB663941933E3567689_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* Boolean_tB53F6830F670160873277339AA58F15CAED4399C_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* Debug_t7B5FCB117E2FD63B6838BC52821B252E2BFB61C4_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* ETrackingResult_t989C2212A7DBCBBF86EA2C1E776BC60223B3126E_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* EVRInputError_tC8741BE3044407E8FA26F282526B259D93DBF22F_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* Marshal_tC795CE9CC2FFBA41EDB1AC1C0FEC04607DFA8A40_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* OpenVR_tE75A98955EC4AA4B219CE822AA43E79E4CB99DB3_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* RigidTransformU5BU5D_tC98EB3576009E5D825D0D43671A65D32A2449ECC_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* SteamVR_Action_In_Source_t6C3FA81DC7F53D302E49E09F5791E612AC7832AB_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* SteamVR_Input_Source_tAFDB40851F8E134E08DD2DD0BC1C1770705E81D0_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* SteamVR_Input_Sources_tCE41AA589FB3B9516BDE0DFABDCB4AAEA29528F7_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* SteamVR_Input_tCE4A1EC6C51592CB9DCD7B860984CB2C4DD937BF_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* SteamVR_Skeleton_FingerIndexes_t23102EBBB267071AC40CD07242EE4C746DC7F020_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* SteamVR_Skeleton_FingerSplayIndexes_t0141FA1AFC8CF87E917B728EEBBA9186F26D3246_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* StringBuilder_t_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* Type_t_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C RuntimeClass* Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var;
IL2CPP_EXTERN_C String_t* _stringLiteral1085AA8DD5D0232F772D5CA5EA871BBE2F761FB0;
IL2CPP_EXTERN_C String_t* _stringLiteral1315AF0D095A22997AA7C177E47A3203C2139E1F;
IL2CPP_EXTERN_C String_t* _stringLiteral18B39452A606090B97AA8D84240CC83BE3E5D62B;
IL2CPP_EXTERN_C String_t* _stringLiteral258E23932207BA363BB8C0D5C6F463CBDBE1EFC5;
IL2CPP_EXTERN_C String_t* _stringLiteral29F677B20F6C547FF7CEF8CAE9CF922165E48458;
IL2CPP_EXTERN_C String_t* _stringLiteral465EC1A5848524F5DC24880091A15CDE065E1E7E;
IL2CPP_EXTERN_C String_t* _stringLiteral5D84EB9E92DC661A577D3ADFBA33F1D74C56B13F;
IL2CPP_EXTERN_C String_t* _stringLiteral6FCA55CA3C828A46BFE96A10E69F572B61CE540C;
IL2CPP_EXTERN_C String_t* _stringLiteral7025DBCB2822E392650101D811F717F7B853C54B;
IL2CPP_EXTERN_C String_t* _stringLiteral74FBFA22F0AC7FDD2F060A9187A8A74078A10F16;
IL2CPP_EXTERN_C String_t* _stringLiteral82053ECBCAD6503F26FE33F5976A1604F67CDD45;
IL2CPP_EXTERN_C String_t* _stringLiteral973389CC7163D5EF9A40BE4685E4E55B5CBBC66F;
IL2CPP_EXTERN_C String_t* _stringLiteralA98667A476D022EB9B2CF25800415760BE586401;
IL2CPP_EXTERN_C String_t* _stringLiteralAC897ED588F0446677581414C46F231807AB2556;
IL2CPP_EXTERN_C String_t* _stringLiteralAD66C391DC6C51CA381EB74E3DAFDAF54D01F3C2;
IL2CPP_EXTERN_C String_t* _stringLiteralE6D56E05F32996CA7E5AE21BC90D49044C0BF356;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_2_InitAfterDeserialize_m18C23160315F8414CA38CA01EB2E95529802281C_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_2_InitAfterDeserialize_mEE7832ED7C1B03D8FEB093F34B2B63974C3B5A04_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_2_InitAfterDeserialize_mF4DC388BA98BF545E220E94BC0C4DBF458090EB7_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_In_2__ctor_mD999F898F7EC32F7FF2A4DE8A4FC77CB7012CC2F_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_In_2__ctor_mF9E126AD1A57CA13943CDE8404A98C0DA8FF8225_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_In_Source_Map_1__ctor_m1C7CDFB82FBD6E95D7AF23AB9320BCCD68C5CA92_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_In_Source_Map_1__ctor_m3CF6B3F7CC98C67885A2F7915311C360B9842389_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_In_Source_set_changedTime_mD1EE7D0BD28058E1901FF671FB77587F2FCA35DA_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_In_Source_set_updateTime_mDA27AEC2F90C6036B8E6979F74E68528316D1322_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Pose_Base_2_UpdateTransform_mDF91BEAC2D9487D14C5D1EB34996E2C2E4F275D0_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Pose_Base_2__ctor_mA24A37A7DD68461F1328F541DD825CDACBAC30C5_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Pose_Source_Map_1__ctor_m46CC8AADAF802355D940EB7B8E1F27836A7B4476_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Pose_Source_get_angularVelocity_mACAA45CB05DB94C9292ED147F3156109DAFA0209_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Pose_Source_get_lastAngularVelocity_m3EE729ECF16DA55CFE069E25EB9099A80667C55F_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Pose_Source_get_lastLocalPosition_mB748F9D4600498E9BACCEBE5C8F00DED8125C307_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Pose_Source_get_lastLocalRotation_m15622BCE4A3D32548EBFE7DC98F8751352617660_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Pose_Source_get_lastVelocity_mB9FD7955140F713C63842433E1E50D498EAD0A21_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Pose_Source_get_localPosition_mE065A826D8D1A8CF44D9E7F0D038F24D70985833_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Pose_Source_get_localRotation_m307D9DD92DFFFCC30446A71D9BD15674A797ED2A_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Pose_Source_get_velocity_m2B71BB7981006080D113442CB374529602A310BF_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Single_Source_Map__ctor_mBEEDF89DB49EE998BFEFAC3FB1DF7665B3FE4AE9_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_AddOnActiveChangeListener_m2D32E586E074A6211226E0B25A4BD7819BDD2331_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_AddOnChangeListener_m6D171EBBE99E96449ED31256191F0B9B37660CA4_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_AddOnDeviceConnectedChanged_mCDC3AE4ECD7F52EBBF02BB5DC2E81A5F2F493915_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_AddOnTrackingChanged_mFEFEF4A49A2F219DD9C6A2B315829772A140FAE0_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_AddOnUpdateListener_m4747980341F8DD2D9AB7068B6517CCB415635808_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_AddOnValidPoseChanged_m7C3267EC9F47669379DC41F6653B34BD70071A20_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetActive_m6E06AD31889D5E0E0431CA1766F874759FE3216F_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetAngularVelocity_mFC20208B5BBBA5BA921F1541BFBD1126A2850946_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetBoneCount_mB8D948288CCD3A7E432C9A28508CFF40C96F85A1_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetBoneHierarchy_mE6046CC9827A1DDF795FB53696BA8A0119FCBD54_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetBoneName_m3664883EBE49B71E83B8C4A2D3D6CA5648D896A1_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetBonePositions_mB8ED80319622D467201E3562AEDCE36C6601D531_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetBoneRotations_m7239E024A6D2E783C25D633A0476CA9428D465C4_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetDeviceIsConnected_m5A76303DB4261016DAEBD30B735BED3259855734_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetFingerCurl_m74152BBAF9EE89F9A8F186E462FFD0DDE1C9D420_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetFingerCurl_mC1F50D0ECE4C5553E8E25A7C06668558D2742620_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetFingerCurls_mB05B99839838D84A19A639120BC6DD7FB2395A29_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetFingerSplays_m7CB3DAB877B3FE9EF6AD8A79FCFE6A80C0D1CD0E_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetLastAngularVelocity_m0F6189A5D1B1F5400F4725891F1B7FB6B6A724BD_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetLastBonePositions_mD5C9D7939B6693865BFC89D4CFF3A29E8273E5EA_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetLastBoneRotations_m6828376AA97DD3A7A78FE2F9E0EE038CA96D39ED_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetLastDeviceIsConnected_mD15EE41DB5743A4DD42DB692B56470A75297D7B4_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetLastFingerCurl_m39488C73FCFCA0C9586171A54C06F3336F9EA563_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetLastFingerCurl_m8F00957C95BDA66CE16C133DF5408FC7472410A9_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetLastFingerCurls_m6971403DF34683B96CB48F156A71C57C137AA5CA_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetLastFingerSplays_m8144088BE8AF0D0FDDF3F1D89711732D63C16EBB_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetLastLocalPosition_m47A225F07BE521AE0BCE352D6D9DC51EB1D3C367_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetLastLocalRotation_m99CAC6CCFA012EAA3DEF73BA8DC2B781E6F95542_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetLastPoseIsValid_mB18ED4BF91977E89C1BE821A473AAAD5C2AD9AAB_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetLastSplay_m1C845AC46C2657DA0BE3D71578C195D5F7FFDA5D_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetLastSplay_m3EE8FC2ECE44A16A6F103E19A42AF8A10780C9B2_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetLastTrackingResult_m37C8D9BEA0568AA117E7F4A9A6C25E36D08D628F_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetLastVelocity_m578B56041101A994C9D60A31B9F360B7E0C63AAF_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetLocalPosition_mB9C362EEA9A30E590A62D20B986A94C98AA1FAD5_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetLocalRotation_m917F58C641A69D3E71DC1F48AF8B2EE2A8C143D2_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetLocalizedName_m6E5B2E0BB7BBB24B0C10D4178DEBD2452F21511B_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetPoseAtTimeOffset_mBCC36205E479616B506EFA081120EDA9E3269202_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetPoseIsValid_m940EF6B8834E5EE883FB69081F7A8CF115F7090D_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetReferenceTransforms_m003738CB3D282D68A3B67970CDF7F508117FD296_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetSetActive_mF56700F6043B0FBDC749DFCEC673AB1CC7CC010E_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetSkeletalTrackingLevel_m6C574D1BBEA110C4DF8A5CEEF03E4987709F73E2_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetSplay_m6A6A69B1D61A8EB56C024FBE87D50C11A155ACE0_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetSplay_mE67EEB0903CB5D257900AA9947BB259E83B2E953_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetTrackingResult_mC2E4F3F2683D8B4AAB82B16F36D49F3FD81B5BE7_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetVelocitiesAtTimeOffset_m188E942824BC8328FF62524D8AC7121B41214E8C_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_GetVelocity_m9E1BECFF847AF4E2FB1AEF786886D9A1A5F42E38_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_RemoveOnActiveChangeListener_mDAA7E51AE61F9EFB56712D2BFC5C2481BE781D7C_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_RemoveOnChangeListener_mAFAD8747C82109904BB2B6B5BF3387EA6DA970F3_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_RemoveOnDeviceConnectedChanged_mA65B569EE113DD0F88233B2A720F57ACDBFFDA23_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_RemoveOnTrackingChanged_m50F6BBB2398BED51DAC0B5F444FFFB487C938D58_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_RemoveOnUpdateListener_m123C6B0C9425E2C84DFDFA880047D7A6C6FDD3CF_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_RemoveOnValidPoseChanged_mC3A2516F26566F6E2C9F01EA501C095E1978269C_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_SetRangeOfMotion_mF9A18F8B97BE27E61EF44516E381801FA301FC11_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_SetSkeletalTransformSpace_m18728D948D1B46D284FBEBFEDA47FB97BBB1B68D_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_CheckAndSendEvents_mA17AE6BAD4218E6BA1D54DF842DD117B20F8F115_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_GetBoneCount_m4EC7F17792380A78FF5B7699E35FB98ED5081E8C_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_GetBoneHierarchy_m87C2A7C088DCA2527B23F2054C62EB27234DFF78_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_GetBoneName_m67234F0D980501AD00E029B0B30415B8F18856F9_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_GetReferenceTransforms_mD97ED9032334370252095D9ABCED25D4D5533B92_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_GetSkeletalSummaryData_m0DAFEAB1629AF85F54F616FF08013251AC1281CF_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_GetSkeletalTrackingLevel_mE38D26E81AA2C43A3BECB3EBEE02C2C632104C3B_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_Initialize_mAC7E24B466C1A3D77533F0A1C76F5E1F3C0D704A_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_Map_GetSourceElementForIndexer_mFB38E3EBD97606F62D6A3960F54D1C320CCEBD4E_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_Map__ctor_m69133E0B86EA755338F18B76A09F13A18570204A_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_Preinitialize_mC689B2C9BDC3CB56B8539484F3B370FA955C0A45_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_UpdateSkeletalSummaryData_m66FD26ED63C98F872AB1DB6810616785C96BE3A2_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_UpdateValue_m973732FC7285143B7F0ABF27A4DD83041EA2FB82_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_UpdateValue_mE924A6C6CFD9CD77209E2FE67B60B8D7D2FFA3A9_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source__cctor_m2A8E4EEA53B06E906C8F0A76AE53800CDBBD9B5D_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source__ctor_mFC568147EA2C28081C0956D1830836B71530D0B3_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_add_onActiveBindingChange_m4DC3513C7C9507997D9D34F1A514F152B2D38CFA_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_add_onActiveChange_mE0FC38C5C6749C482B67CA8FC2017969A0BE37F6_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_add_onChange_m36F08DE1097970DE49B839792F1935A218E92ADA_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_add_onDeviceConnectedChanged_m65E5DE81AF451EF0B00E214FA8E5034E29FA3EC7_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_add_onTrackingChanged_m1214E513861191327AAAF65D11DDA8E978F2EAD0_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_add_onUpdate_m7E46F0BA1CFA58A2B4CD7E9937AF913E21B597E4_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_add_onValidPoseChanged_m2A4D3F3E5FEFDD0ACBBCA7018AD94DF8EDA37A24_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_activeBinding_m541AE099F07A8283CC85D9CDBAB6C52DF84935C6_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_boneCount_m993C474DB459FA2B9A75B36F266729761AF99FFC_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_boneHierarchy_mEB8E9840922D07A185E20B6DC5BF23BABE6E36CE_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_bonePositions_mA0C01DDB9EAB9749BBBEDBCFF72582812AB9C195_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_boneRotations_mCD0B038517CA7A79945AD615082F05B25B0EDA20_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_fingerCurls_mD56D63D01414ED3D7D6074DB29C81AAC3C490479_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_fingerSplays_m5461F8E49017BD6579CC10D8D0783642DEDE37D0_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_indexCurl_m06230658C52C5E441A49AD40313C608619196B5B_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_indexMiddleSplay_mC5FC7F51CDCC049B987DB60C5686335125255583_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_lastActiveBinding_mE814471BA5DA727D7AFC082907D4EA51AF0650C5_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_lastBonePositions_m99D1C7B8A05E646777AC85CFC0ED2FF0953C3AB9_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_lastBoneRotations_m14A98028FB99C0404733364FFD3C187D2A53261C_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_lastFingerCurls_m00C4EB3059A4427EF390371B7B56077017F42C2C_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_lastFingerSplays_mC1CF900637C3FB99B1DE3F4BE06452EC07264747_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_lastIndexCurl_m400F28379D6657033E67D29F2B6376654E71440F_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_lastIndexMiddleSplay_m328634EB394F9D2A6370F481BC35EF947462AB2E_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_lastMiddleCurl_m32F8B6C010E5EDEFE25465EAFCCEE7CEBBEC8F36_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_lastMiddleRingSplay_m33B09DF71ADF6FF1BA42C31E2ACD6D3E5C258845_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_lastPinkyCurl_m40495088AE01BE4B8AE90499CE0A5AEC0673EB13_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_lastRingCurl_m79AD5ABC922A559F034B53F25848FCCB8F80C35D_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_lastRingPinkySplay_mFD509B1C21CF79C88833690ECDB237D307AAC531_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_lastThumbCurl_m55C39AD1FA31B45A7C19348451F25A0488D13241_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_lastThumbIndexSplay_m990D77456F84B5E00C2DD1A5BEC36B915213B1FA_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_middleCurl_mE52CDCDA31A963E723E4BDCC3F3B618FC97CBBE8_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_middleRingSplay_m3FCE7BEB2171ACEFCFD9A0E4169AB0BAD6BFEA62_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_onlyUpdateSummaryData_m3AC011DB8ED08B67F124368EEA9934C5FACA5920_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_pinkyCurl_m0E983BD50EB9B7AEB30874395070AE5E86C66FBB_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_poseChanged_m00A9DB3FFD0499D982FC39500D115B4968518988_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_rangeOfMotion_mCEFC5B01B736A3B6218C5C91A0AEF272FFD88B47_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_ringCurl_m779E5E61A32799167B43551CB36FE864A6413868_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_ringPinkySplay_mCAFFCF55E8363259B27670F7193D8B85AA934BC7_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_skeletalTrackingLevel_mD592F4C9B67DBFB75FD15DF4755E51FC24C32769_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_skeletalTransformSpace_m0D9D61CC1BC50CC7FA1F9AD5192FBC418009F3F3_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_summaryDataType_mE0AB648E0339C2A082B81B15AA2D97854E8BB8CC_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_thumbCurl_m7C48F880AFC6164499E9E23B8D1F413B4AC9A98E_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_get_thumbIndexSplay_mEA2624540878BDB6DA6344334535F817583A97B0_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_remove_onActiveBindingChange_m8B778606DA02C1FB1A23C1A955951094E261F2AF_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_remove_onActiveChange_m02B106748649E99F649EC24789D36D5DB0577965_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_remove_onChange_m9AE202076C862455102381B3DD4AA5E98D8E7DB0_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_remove_onDeviceConnectedChanged_mB24005D6459F7B8D170E3445BF5B95405871AF13_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_remove_onTrackingChanged_mD1990275D9A505E92742B063863D9F1BE96BFDB0_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_remove_onUpdate_m3DAC62A7DE38AF1BA67D76654BDC0CECB0296FAF_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_remove_onValidPoseChanged_mA00A29139A1727456784ECF81C9009BAD9B2D8D0_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_set_bonePositions_m6E2F4BC8D0DB6C17A44D1DD390933B195C8F0BE7_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_set_boneRotations_m04DF922F78BEB4B48C610E5263CB5A56723BFE11_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_set_fingerCurls_m8A5B299B1D9CA30852BCFDF4439985C7C67607D5_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_set_fingerSplays_mEC48DADE504DBFF9AB6B0D16ED35C39CE97F2EBD_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_set_lastBonePositions_m7B9C3EC1294D432EBF5834AA2FD1518F398C771B_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_set_lastBoneRotations_mAF79C76574CD9C644F280B1E5DCBF068D84C0C71_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_set_lastFingerCurls_m87DEB2959B20AD607470B75C837EE42754040CFF_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_set_lastFingerSplays_mA14C6FC07879D8ED956F931D74A2DF14526476E9_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_set_onlyUpdateSummaryData_m49C580092D3CDFD2E8D1D98D06026C2FF6F73BCA_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_set_poseChanged_m91451416B46D3849E217C7FBAAA96F28364E94B0_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_set_rangeOfMotion_m01A4338F1C4D57E5691A2F8EA861BAD76DA75619_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_set_skeletalTransformSpace_m851FCD54C037B0D6CF78F14CBF0BF7B44EE86FA8_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_Source_set_summaryDataType_m99B705C8282316AC52EBA3A718C998FE46329E1F_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize_m5CD84AEC49B84E110E6BF9277B9335A136ABAAA5_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize_m4CFD08AACF800E504667C5F20A2636ED6CF50ED2_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_UpdateTransform_m6F79643A24833641C748F3088E112AF52E478BF2_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_UpdateValueWithoutEvents_mDEFBA29DA9DD73B2577B692E21B71CAE9650735C_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_UpdateValue_mA4FFC2C42D19F3EBD6E63E0F10D43754E49E238F_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton__cctor_m57066E5D93F7A7D6D735CE541E25BABAC7E5480A_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton__ctor_mC5935E4BA141DDF7A90EC1593B0AB235ED4A150E_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_add_onActiveBindingChange_m07DF54383907362AF8846A96EC486DE4ADF4CDA1_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_add_onActiveChange_m49322B1046AB4F7F652CFC7F8F5354697CFC419E_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_add_onChange_mD39BD96DEA8F826BAB9975C7960E0FCC34DD2949_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_add_onDeviceConnectedChanged_m92354268E04EC26BEA381884B6642CFBB1E08CC1_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_add_onTrackingChanged_m27D7D512A8B28F439D5462462C58725039CB823B_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_add_onUpdate_mB35B29D83BC5DBA077A734822B1E78F0D921A6E9_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_add_onValidPoseChanged_m16EEF660B28D51B84173746D48C7CA5E4AFDF384_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_boneCount_m03FEFB972B25D05F07C7AEB4D61B2349C75DE864_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_bonePositions_m0CA06F68C8E3D40036C298CE992C74A79C7DA80B_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_boneRotations_m3FF8C259CBA6EF38DF309362206C2871EB754A4E_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_fingerCurls_m4A263447B22178919E09D1E97E8C3BDEA0736BAD_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_fingerSplays_m7B088FB1B70AD3B51A16353085AA0A50AF77EDBD_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_indexCurl_mEB1F41479BDBBEF2E93E1268C0947AA789242C41_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_indexMiddleSplay_m546A2A3E6E1449CA4C6A482D4138EAD63206C7D5_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_lastBonePositions_m5BB686C5104B6A2CC970239A84B0DD48EED00005_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_lastBoneRotations_m116F9E698A5C9DF460DD49FBEAB7580913027F9A_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_lastFingerCurls_m3739004D70486E65E29BC117CE7D03A7F42A334F_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_lastFingerSplays_m8D682F035CBCDC7D71503C78433E061096D3D5FE_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_lastIndexCurl_m8CF537005F0FB51208329280711F0A8408BDBAC9_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_lastIndexMiddleSplay_m30ED9E7BD9BA8E840D1F80AC165E7074B050F1B8_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_lastMiddleCurl_m6D5135ECD058B820D04982DC4077E2E14AA03BAC_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_lastMiddleRingSplay_mD8B7B998BDCE4FEE0FD4D60A6EF589F85A7CE40C_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_lastPinkyCurl_mBFB42992D9E09ADD2B6ED7BC5782C5C6986D3D69_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_lastRingCurl_m6D22D1042A5D05F28D363BE71CA94318FDEF683F_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_lastRingPinkySplay_m4AA30BABB66CAD75BD36C1B957A439F308AD694B_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_lastThumbCurl_m8EF585CBDF71173BBE7A3FFDCADDA14B9DF133DE_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_lastThumbIndexSplay_mA28395123EDD33FE080B5BBDD9B83A5A25E80948_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_middleCurl_mB7653A8B23ED58306E8EB31E707229BFAE1FA9B8_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_middleRingSplay_mC6A6DC9021549480656FD3EFABD14D6D304D555C_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_onlyUpdateSummaryData_m34F8E2E3DFF90BC3E25A4DE8F90C6E717AF3D5BE_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_pinkyCurl_mFB7270C1D7CCD0346630B7FD9537DF2859241C32_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_poseChanged_m248D619571236D9D7833B76A03BA70B033516FFA_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_rangeOfMotion_m67729E8AE1AA6F85CB507D08500E43B64DF76785_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_ringCurl_mC657F338C93FBF39891F77C5B58DFD063B82D9E2_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_ringPinkySplay_mA246643EFA211CB2B0ACC8BF02C70B386D86420E_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_skeletalTrackingLevel_m42CDC3C3C98C91065325A4C71510B9B8B6FBAA14_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_skeletalTransformSpace_mD90A3FC93A8F0BEF500E54EBE0AC67E323950B35_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_summaryDataType_mD93DEF103A25384272D6EC1915F2B794806F4519_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_thumbCurl_m78B436FFB2D7C6B0FE83FBA4BA11123C3B06EF28_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_get_thumbIndexSplay_mE662DBD9173578066DAC6EA4537A9609A89ED735_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_remove_onActiveBindingChange_mF4DF38A823FEA14CBCBEBAD5B07048564772FF42_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_remove_onActiveChange_mB45B49699E0BA70E2CE347A6E9F96018F3FA7BB4_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_remove_onChange_mE3314F2A6094E48BA418013DBEB83064A7F853B0_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_remove_onDeviceConnectedChanged_mCC1CD5EF82563E7FE898D2BAE0DEDC59C9AFA8C9_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_remove_onTrackingChanged_mE5229135F65372F6DDA222F462565A6D0E66DA6D_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_remove_onUpdate_m8558F015C56A6191114E396FBFA440F47580D79C_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_remove_onValidPoseChanged_m36DAF4159892070D6853F24DD8D8DB701CA0F706_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_set_onlyUpdateSummaryData_mFB1077C0BE8DD592764267D71E922C34CF11DB09_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_set_rangeOfMotion_mB389010B0C01970B95C278A809545561A1BA4D58_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_set_skeletalTransformSpace_mA307660C0D7CC13E16AEF9D45B7B87D6B90634F3_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Skeleton_set_summaryDataType_m71DB13F92B26A5E85B0E03386E49397066869B27_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Source_Initialize_m712F1B6FEBD8059CBB80EC50CC0F16F528023E64_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Source_Map_GetActionDirection_mA48BA216E276F882C863341B7197E590B6471119_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Source_Map_GetActionSetPath_mA1707CA47C4282036468F3EA4603C7B25963D834_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Source_Map_Initialize_mF2DCDEC5F104A3F7879C6D0CE8D60483334DBAC6_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Source_Map_PreInitialize_m39C648952C2AFF5056406BD4D62DCC94D5D15CF8_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Source_Map__cctor_mF8C1CC42AFBDF717407FDEDAF6AB49577F23A171_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Source_Map__ctor_m357508E2B821CFFCA32DAA7B72C9CEC839318744_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Source_Map_get_actionSet_mE10477F66D710B36A4DB0BDEF9DC7788CD86D893_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Source_Map_get_direction_m57FCD20566320667DDD47CCF0743E7AF33971413_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Source_Map_get_fullPath_m17B3B1227ABDCC35456A1B37EE9919772DD1F24E_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Source_Map_get_handle_mDD116BA67A37900EC7D7FBB831D8C6FD1BA2903D_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Source_Map_set_actionSet_m8D8A292258A3B69B920DED592F2BD44A259EBAA9_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Source_Map_set_direction_m4E65637F7F50E116169B2CFB6EBF5A2583D902F2_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Source_Map_set_fullPath_mBB40F4301664B3074825255DA6E51B5E02F93463_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Source_Map_set_handle_mB5B6B8E56BCC552963E91E2748DF8CC04BDC979A_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Source_Preinitialize_mD54CBA24E4881B8742430B3EDF16283316305913_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Source__ctor_m50ABEE6BD7F519AB9E0296103A69073EEA2D6576_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Source_get_actionSet_mF2BE8CE30F960A11115AD000921BBF16088CF5B2_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Source_get_direction_mDB8ACACE7D1530509D256AD658745A03218C0572_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Source_get_fullPath_mB0C33E6C1B4F91E908236055FFAE027ECB3ED996_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Source_get_handle_mE4C63F9ADB5ACA5E72265B62C0908ACF8EF73A01_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Source_get_inputSource_mAA1928183BB06E5C8CF950F65BA80635C25535D4_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Source_get_setActive_m4E3E3DD854D4B7384E415E8BD0F66E880BB97A3E_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Source_set_inputSource_mCA804B7275EED0C19F247767BCC22B7F639A3175_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_AddOnActiveBindingChangeListener_m35A2F8651583EEEA5BFBC687A94D985FFD1C9A01_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_AddOnActiveChangeListener_m4356C2D99F90AC783F576D243573B89ECC4A0765_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_AddOnAxisListener_m5167A71DD40E61F49C0651E92F333FF72DE8F918_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_AddOnChangeListener_m56C1216E50360BCA55C3A0C0EFD71D622939D3FE_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_AddOnUpdateListener_m26DF2290B9B1D47A4F581F149686B184C5625F18_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_GetAxisDelta_m28C52C9103D70A67727BE8BA93551C07951670B0_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_GetAxis_m8A479C238CC933D200B7011F525F49CF84C42BC2_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_GetLastAxisDelta_mFB4F219149889D017084BD189D659164E91E90C6_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_GetLastAxis_m4B679A6140787156C4E740F9A68D03D919111484_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_RemoveOnActiveBindingChangeListener_m3BDA480949C10CEC9D1EE308FA3A104860A5D193_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_RemoveOnActiveChangeListener_m77342D95999D75F33C4C1E7C1F052EA6DB22F9AE_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_RemoveOnAxisListener_m2E5541FBF94FF3B4854220E63766E1A383126384_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_RemoveOnChangeListener_mBFA847AD63D1EFEBEB507A0EDB69DC8721C9C53E_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_RemoveOnUpdateListener_m9B8C6E9BFE29429882D6118D4BDC13B441FA7FA6_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_Initialize_mEA3978343DC5DDA279610886729C005BA2807088_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_Map__ctor_m8779F6CACD1A9A58ECCEE336EEC40FC287CBFE01_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_Preinitialize_mD54D144D5346D31B95218D570EFF9EC692818236_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_UpdateValue_m46FD9956F29672FF3594957130165B620D3EFD21_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source__cctor_m1AFA0EE95F575480A04CE0A300836BDF1BC2067C_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source__ctor_m48D3C09B91B17F520133008F7722E4B4EB26F1EE_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_add_onActiveBindingChange_m10B03BA452F43087BBBB922DD51EF10CAE15D6BC_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_add_onActiveChange_m748D7DF506E999E43D76725669A423DC02CAC2A2_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_add_onAxis_m61879208AE0900224DF6DAC2B5F9AB437F3E3F65_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_add_onChange_m0E890E6CFC54755D7CA6271AACB94F0D16195BFC_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_add_onUpdate_mF42BBDFA8EFE2D15571BE512017F7D2C8A016345_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_get_activeBinding_mD4FD9C47EE8A52843595ED902EC5D3D9583FA283_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_get_activeOrigin_m0E2FC733B091514548A7F3D8E78FF62472C11E6C_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_get_active_m4491F9814CD04DF2F202D91A08C59209B09A38CF_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_get_axis_mCEB6E517ED0E10BE513D22B23A69F1BE3D5DA2BA_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_get_changed_m78ACD6A0F63B602F52D431CFA6093B4EE0FA3B0A_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_get_delta_m19CFFF4B8014BD4ED43D0C5EDDD909A2F1DF1908_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_get_lastActiveBinding_mF7419A1586A8E1F8199D3BF5778F7FE13DF2D0CE_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_get_lastActiveOrigin_mFD35F8515EB518EACBF6F731B72EC5533DA95C89_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_get_lastActive_mC0586915CE1150717F2F3B3814D5883D00FF5B1A_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_get_lastAxis_mD0A1188D33FAD9AAB16CBCC0C073796C76616460_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_get_lastChanged_mC48C1CC704E7C5C348F9BFBAE9682E718FD6FC9D_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_get_lastDelta_mE21D07B848010D30A36B3C7338B5B615B81598AC_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_remove_onActiveBindingChange_m3A62BA01D3F897E4C7115DF360F9DE899A66EB12_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_remove_onActiveChange_mF774E29E5C6AB17CE4351C8533279C2F1685F5A5_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_remove_onAxis_mF3D7E276BA4A72809424D8F02B91BC600C706A45_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_remove_onChange_m6B9FFEDD2003E99E2C81E03B744E35528BCABEE1_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_remove_onUpdate_m7FA21E9B212C4E869AFE43AAE5D3138799CA8320_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_set_axis_m2252BBEBC8C6D4A676ABF0EE270D181EBFB823BB_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_set_changed_mE5FBDB2D619AB5C4B9CC1A64408431E1106B4038_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_set_delta_m8D0A6407047BB76299057CF382CD612137A600F3_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_set_lastActive_mCB20AD139EB2094C54801EF5EC66E2D76E533E67_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_set_lastAxis_m77FAC4A378FA78CC827A871984258A60FA83CAE2_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_set_lastChanged_m417B2C89134DA1E9C1149EBBD128AF65524D26A2_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_Source_set_lastDelta_m1943C66837BE7929D58A91A9DFBAB4BBC2A1DB12_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize_m19FBDDF4C65A56BE9DEFBFF7D9C20ED59218FB4C_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize_mBA1C1038518ABB4C40774855505FB7844ECEC552_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2__ctor_mEEEA92BB27BB0513C419BAB3CB220ECBF331AF56_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_add_onActiveBindingChange_m15664B2ED53BB2BD17087FDB290DA192A62D91C8_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_add_onActiveChange_m0A69F75E3DC172336397A4100CE8E9536E907131_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_add_onAxis_m9AF8E8737CD6E677A1FBFF700F6536919762898B_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_add_onChange_m1F62155EA9883091580EC03275BE740C911BAAFF_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_add_onUpdate_m2B0186EEB573726C35ED4A38486D31FFE5CBC469_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_get_axis_mE421CADA54F41607E4F071B793BD5C55171812FB_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_get_delta_m368E3DEDCCE873F323FCB9B85C72103971A2B1E9_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_get_lastAxis_m746D1B31C63B141A97FBD0F4138D703FC5F9DEF0_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_get_lastDelta_mDDAC2B9F3DB61F8B1015F22B61CDD9591FEEEDD7_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_remove_onActiveBindingChange_m28C26AEA56A5BE493976C0C18A34349E13B63029_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_remove_onActiveChange_m27F9EC8B3B7CE60AB0AD1614DEE638622F6DABE7_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_remove_onAxis_mC00F340345B916EA150D4AA4FF3E03F924A67584_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_remove_onChange_m869E023BEB666D8A6A7955802BA9816EE77435F6_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector2_remove_onUpdate_mAEF9FF7CC422045456A60152EC8847FEDB033ED2_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_AddOnActiveBindingChangeListener_mA8C945BE28CAD502B6A1BD6A72659509A206C658_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_AddOnActiveChangeListener_m2D01DEF21993C1450F3A6DD5A1A0E13E015A16EE_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_AddOnAxisListener_mFB5B81222D06CE1838A819CD31E5468593497A42_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_AddOnChangeListener_m856C1E73A985193161F7E68E51E2E7D405CAC77D_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_AddOnUpdateListener_mFDBD5206DBD8AE0CB95CDF5FCA769635C7BEF1A3_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_GetAxisDelta_m6A8BA36DD1F6238D9EE8EF3D7E0F0C87CCE3D9C0_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_GetAxis_mAECD5AA7DB213F313164BCF52B688A44D2466EF5_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_GetLastAxisDelta_m68EA72E9F86BD55D97944438DE7173AD6DA2537D_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_GetLastAxis_mF0C0D122C31F80A5713E739B8D04D352756A6EB8_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_RemoveOnActiveBindingChangeListener_m0318DB5C418AB27237EBEDD74986CEED5322FED4_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_RemoveOnActiveChangeListener_m768C67754A7B4122AC2CA9AF3F4A6C84BF71C122_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_RemoveOnAxisListener_m54BB3A15B566FCD77B580FEB19A879EB6BAA0B19_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_RemoveOnChangeListener_m8AD0A1B8695E9BBF053F3E2D4A6661F22E52BC3D_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_RemoveOnUpdateListener_m3BB302B27358EBEF86B005C6C3BA792EDE27CB75_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_Initialize_mF6083AADD5357032AE31D4496681462FBC9379AB_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_Preinitialize_m4F993EE6B1E88BC3A4162D8C989D5E8B7FD3F286_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_UpdateValue_m740BBE6FBE4887C46BCBA55A25D58A7EF5AE2171_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source__cctor_mE841F95CDB56BC53EB934017D21DB959492E90DA_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source__ctor_mC0D29BEF4DAD2DE16DAA78C0F490591AB171DE1A_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_add_onActiveBindingChange_mC84803E228A14E7891F4B456DC5A102E2ED3956A_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_add_onActiveChange_m01C18C6CC07A9423AACB55F009E6562493049DA0_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_add_onAxis_m09DA9894C1E442EB2D92595D083CD574E287150A_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_add_onChange_m69C7AFE22DFEF6EE8205740927730B4793ABC16D_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_add_onUpdate_mE3337890745CBF20D96EB63A6241FB545E8D7DFC_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_get_activeBinding_mAD816DEB4089A3360C6C9CCD52B2FA22EC57D64D_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_get_activeOrigin_m8A7827E01B77FAAC402DF450D20DC23430ED6B38_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_get_active_mFC75630249C9BC675AFAFF01D5946AFFDF427C03_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_get_axis_m0F9A2BF33B9BC6BF5774EC4D7E2EE2B474B28E99_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_get_changed_m27FD9BF9FC97E30BC83073FFEDC2E54AF76BC0DF_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_get_delta_m4B3DA30643F7D02E80B5AAC93D5BF6D730305BC0_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_get_lastActiveBinding_m22970E1C3A3451045F5EDDB889E90A8D7D9E3EE9_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_get_lastActiveOrigin_mAA8545BDB78F99D6E9A1487FE19BEEEE9879B44B_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_get_lastActive_mAAF066B6810523B948D5DD1C055E9C11BD9FC8E1_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_get_lastAxis_mB5307EA9C41A76639B02A5FB7C775E14C7E8BE8E_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_get_lastChanged_m76C887902C2FC55C44CC7C42CD159A2FED2103D8_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_get_lastDelta_mBCB31D8D0D5F3B64784F01EAFFC7311F1E07B467_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_remove_onActiveBindingChange_m823695F9961EF46DB2811DA5B8E68567582C639B_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_remove_onActiveChange_mEFAADD238B7127C347FCBF4D850FBD7664BEFD95_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_remove_onAxis_m0E77E9C566405FABBE20C7120A16AE551AC4B70C_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_remove_onChange_m2C757953F88F1D3FCAD98F0F7D0C4EEDCE3220DB_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_remove_onUpdate_mE4D9472A97BDCB264B875B8AFEB5E1C19187FF07_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_set_axis_m8D6C550660D5D6EF3AFC2376B964204B4B26C0DF_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_set_changed_m0E8E663AA33C8749AE0B13926E8785921D5630A3_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_set_delta_m425C84C1DE5AD8F12F9F04C1E4C78452C580FE2B_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_set_lastActive_mD6174B8C50D61A9C1AC50341B1AC5F7C565B97CE_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_set_lastAxis_m2DA773CD84278414BB2D77495722E7E288C2727C_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_set_lastChanged_m3DF8DAAAB166AEC44452CC51D43F7602544C77AB_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_Source_set_lastDelta_mD5A541A52EC64B8BF321E3B9778E37647A968DD1_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize_m4713EBBEB02475300C221E3B1D590A50FBDCFE1D_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize_mFDC86399F04D0E0B080756422443B794B9FFBC7F_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3__ctor_m37437A0DC1654AC61B42767A3F6BE9FA2328347C_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_add_onActiveBindingChange_mC4E35E2233DC7C10B75320C8A5EAF0EC207AC5D8_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_add_onActiveChange_mFD6D6D7BBFDDDBAB5371E7D544A1CBA0ABE4CA18_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_add_onAxis_mD6A4E09D264E987391E26F51543D63494DD24EEF_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_add_onChange_m99FB29754E2862967F8BD9009CDD8F59B5D112FC_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_add_onUpdate_mC6730976874F184C9AC45CDDBA4A51145E562EB5_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_get_axis_mF2A2E572ADC8B76D4232AED7D44A94ACD1906099_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_get_delta_m3EA8C5D174CB8D7965B2026361C94F6FF750E38C_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_get_lastAxis_m0365F5B93BB05F9C8F59C44DA333B70C1C46F1DE_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_get_lastDelta_m1C55579E0A38F190350FF1827125EC6AC7D27606_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_remove_onActiveBindingChange_m65EA244FFFCEFAE4B87F0B1E90A38F1CBE2F9C1C_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_remove_onActiveChange_mB126BA6BF4C9EA71ED10C37E584079216BB7F536_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_remove_onAxis_mFD39E7E5FE3F6A009869F30872D651DAC960CF9F_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_remove_onChange_mBA3BF7FDF2A7C02DE0DB32629D2CF110A5375206_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeMethod* SteamVR_Action_Vector3_remove_onUpdate_m49616C5F27B3F1F0F08E30427FF68A2AA06CDB62_RuntimeMethod_var;
IL2CPP_EXTERN_C const RuntimeType* Boolean_tB53F6830F670160873277339AA58F15CAED4399C_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* ETrackingResult_t989C2212A7DBCBBF86EA2C1E776BC60223B3126E_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* EVRInputError_tC8741BE3044407E8FA26F282526B259D93DBF22F_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* EVRSkeletalMotionRange_t7B3CF169090271D1030B7DBCB36A9F6B9B5833F5_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* EVRSkeletalTrackingLevel_tDFEFEB2A62597359105A66DDF2A00CC5B7B8F1AD_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* EVRSkeletalTransformSpace_t42634E33BB67FB63D23667D5C12E7DCC6C4B90BB_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* EVRSummaryType_t3633B56EEC68A4E79555876B8E7B5C0CE387BF09_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* InputSkeletalActionData_t_tA39C0A0FE4DBB8966D852B4FFC7D3A6D8F887430_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* Int32_t585191389E07734F19F3156FF88FB3EF4800D102_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* RigidTransformU5BU5D_tC98EB3576009E5D825D0D43671A65D32A2449ECC_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* Single_tDDDA9169C4E4E308AC6D7A824F9B28DC82204AE1_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* SteamVR_ActionDirections_tC7760C9A471565840E2F1D11A61E44735571D8B1_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* SteamVR_Action_In_Source_t6C3FA81DC7F53D302E49E09F5791E612AC7832AB_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* SteamVR_Action_Source_t9D7428CDE39924074518EE6233D9A4FAB0C33CB0_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* SteamVR_Input_SourcesU5BU5D_t735048547A8599BA461FE16B1BC029194E1F184A_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* StringBuilder_t_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* String_t_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* UInt32_t4980FA09003AFAAB5A6E361BA2748EA9A005709B_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* UInt64_tA02DF3B59C8FC4A849BD207DA11038CC64E4CB4E_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28_0_0_0_var;
IL2CPP_EXTERN_C const RuntimeType* Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_0_0_0_var;
IL2CPP_EXTERN_C const uint32_t ActiveChangeHandler_BeginInvoke_m20FA39B27B526812B1D6D1749788D3F1D884B2C8_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ActiveChangeHandler_BeginInvoke_m9858F23AEB6C3D2B98736BBD60B2ED75E533A673_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ActiveChangeHandler_BeginInvoke_mFC1496645B04E0FA94A6D7CFDE9B46B6D0EEA42B_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t AxisHandler_BeginInvoke_m56A724C82B49A38D44B3D2B18453771AFA341B36_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t AxisHandler_BeginInvoke_m5CE6356122E9BD630D00B5452683EAE16AF35BA0_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ChangeHandler_BeginInvoke_m0EF461A8F50FD59DC6511DC78FCD636809CF5F14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ChangeHandler_BeginInvoke_mD94A911B751372C821E31CD6DD96566FFE44956E_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t DeviceConnectedChangeHandler_BeginInvoke_m822DAC3B254223500E283102B983C97D78333D10_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_In_Source_set_changedTime_mD1EE7D0BD28058E1901FF671FB77587F2FCA35DASteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_In_Source_set_updateTime_mDA27AEC2F90C6036B8E6979F74E68528316D1322SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Pose_Source_get_angularVelocity_mACAA45CB05DB94C9292ED147F3156109DAFA0209SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Pose_Source_get_lastAngularVelocity_m3EE729ECF16DA55CFE069E25EB9099A80667C55FSteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Pose_Source_get_lastLocalPosition_mB748F9D4600498E9BACCEBE5C8F00DED8125C307SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Pose_Source_get_lastLocalRotation_m15622BCE4A3D32548EBFE7DC98F8751352617660SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Pose_Source_get_lastVelocity_mB9FD7955140F713C63842433E1E50D498EAD0A21SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Pose_Source_get_localPosition_mE065A826D8D1A8CF44D9E7F0D038F24D70985833SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Pose_Source_get_localRotation_m307D9DD92DFFFCC30446A71D9BD15674A797ED2ASteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Pose_Source_get_velocity_m2B71BB7981006080D113442CB374529602A310BFSteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Single_Source_Map__ctor_mBEEDF89DB49EE998BFEFAC3FB1DF7665B3FE4AE9_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_AddOnActiveChangeListener_m2D32E586E074A6211226E0B25A4BD7819BDD2331_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_AddOnChangeListener_m6D171EBBE99E96449ED31256191F0B9B37660CA4_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_AddOnDeviceConnectedChanged_mCDC3AE4ECD7F52EBBF02BB5DC2E81A5F2F493915_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_AddOnTrackingChanged_mFEFEF4A49A2F219DD9C6A2B315829772A140FAE0_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_AddOnUpdateListener_m4747980341F8DD2D9AB7068B6517CCB415635808_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_AddOnValidPoseChanged_m7C3267EC9F47669379DC41F6653B34BD70071A20_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetActive_m6E06AD31889D5E0E0431CA1766F874759FE3216F_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetAngularVelocity_mFC20208B5BBBA5BA921F1541BFBD1126A2850946_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetBoneCount_mB8D948288CCD3A7E432C9A28508CFF40C96F85A1_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetBoneHierarchy_mE6046CC9827A1DDF795FB53696BA8A0119FCBD54_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetBoneName_m3664883EBE49B71E83B8C4A2D3D6CA5648D896A1_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetBonePositions_mB8ED80319622D467201E3562AEDCE36C6601D531_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetBoneRotations_m7239E024A6D2E783C25D633A0476CA9428D465C4_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetDeviceIsConnected_m5A76303DB4261016DAEBD30B735BED3259855734_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetFingerCurl_m74152BBAF9EE89F9A8F186E462FFD0DDE1C9D420_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetFingerCurl_mC1F50D0ECE4C5553E8E25A7C06668558D2742620_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetFingerCurls_mB05B99839838D84A19A639120BC6DD7FB2395A29_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetFingerSplays_m7CB3DAB877B3FE9EF6AD8A79FCFE6A80C0D1CD0E_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetLastAngularVelocity_m0F6189A5D1B1F5400F4725891F1B7FB6B6A724BD_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetLastBonePositions_mD5C9D7939B6693865BFC89D4CFF3A29E8273E5EA_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetLastBoneRotations_m6828376AA97DD3A7A78FE2F9E0EE038CA96D39ED_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetLastDeviceIsConnected_mD15EE41DB5743A4DD42DB692B56470A75297D7B4_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetLastFingerCurl_m39488C73FCFCA0C9586171A54C06F3336F9EA563_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetLastFingerCurl_m8F00957C95BDA66CE16C133DF5408FC7472410A9_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetLastFingerCurls_m6971403DF34683B96CB48F156A71C57C137AA5CA_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetLastFingerSplays_m8144088BE8AF0D0FDDF3F1D89711732D63C16EBB_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetLastLocalPosition_m47A225F07BE521AE0BCE352D6D9DC51EB1D3C367_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetLastLocalRotation_m99CAC6CCFA012EAA3DEF73BA8DC2B781E6F95542_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetLastPoseIsValid_mB18ED4BF91977E89C1BE821A473AAAD5C2AD9AAB_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetLastSplay_m1C845AC46C2657DA0BE3D71578C195D5F7FFDA5D_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetLastSplay_m3EE8FC2ECE44A16A6F103E19A42AF8A10780C9B2_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetLastTrackingResult_m37C8D9BEA0568AA117E7F4A9A6C25E36D08D628F_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetLastVelocity_m578B56041101A994C9D60A31B9F360B7E0C63AAF_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetLocalPosition_mB9C362EEA9A30E590A62D20B986A94C98AA1FAD5_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetLocalRotation_m917F58C641A69D3E71DC1F48AF8B2EE2A8C143D2_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetLocalizedName_m6E5B2E0BB7BBB24B0C10D4178DEBD2452F21511B_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetPoseAtTimeOffset_mBCC36205E479616B506EFA081120EDA9E3269202_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetPoseIsValid_m940EF6B8834E5EE883FB69081F7A8CF115F7090D_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetReferenceTransforms_m003738CB3D282D68A3B67970CDF7F508117FD296_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetSetActive_mF56700F6043B0FBDC749DFCEC673AB1CC7CC010E_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetSkeletalTrackingLevel_m6C574D1BBEA110C4DF8A5CEEF03E4987709F73E2_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetSplay_m6A6A69B1D61A8EB56C024FBE87D50C11A155ACE0_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetSplay_mE67EEB0903CB5D257900AA9947BB259E83B2E953_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetTrackingResult_mC2E4F3F2683D8B4AAB82B16F36D49F3FD81B5BE7_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetVelocitiesAtTimeOffset_m188E942824BC8328FF62524D8AC7121B41214E8C_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_GetVelocity_m9E1BECFF847AF4E2FB1AEF786886D9A1A5F42E38_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_RemoveOnActiveChangeListener_mDAA7E51AE61F9EFB56712D2BFC5C2481BE781D7C_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_RemoveOnChangeListener_mAFAD8747C82109904BB2B6B5BF3387EA6DA970F3_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_RemoveOnDeviceConnectedChanged_mA65B569EE113DD0F88233B2A720F57ACDBFFDA23_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_RemoveOnTrackingChanged_m50F6BBB2398BED51DAC0B5F444FFFB487C938D58_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_RemoveOnUpdateListener_m123C6B0C9425E2C84DFDFA880047D7A6C6FDD3CF_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_RemoveOnValidPoseChanged_mC3A2516F26566F6E2C9F01EA501C095E1978269C_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_SetRangeOfMotion_mF9A18F8B97BE27E61EF44516E381801FA301FC11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_SetSkeletalTransformSpace_m18728D948D1B46D284FBEBFEDA47FB97BBB1B68D_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_CheckAndSendEvents_mA17AE6BAD4218E6BA1D54DF842DD117B20F8F115_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_GetBoneCount_m4EC7F17792380A78FF5B7699E35FB98ED5081E8C_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_GetBoneHierarchy_m87C2A7C088DCA2527B23F2054C62EB27234DFF78_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_GetBoneName_m67234F0D980501AD00E029B0B30415B8F18856F9_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_GetReferenceTransforms_mD97ED9032334370252095D9ABCED25D4D5533B92_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_GetSkeletalSummaryData_m0DAFEAB1629AF85F54F616FF08013251AC1281CF_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_GetSkeletalTrackingLevel_mE38D26E81AA2C43A3BECB3EBEE02C2C632104C3B_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_Initialize_mAC7E24B466C1A3D77533F0A1C76F5E1F3C0D704A_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_Map_GetSourceElementForIndexer_mFB38E3EBD97606F62D6A3960F54D1C320CCEBD4E_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_Map__ctor_m69133E0B86EA755338F18B76A09F13A18570204A_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_Preinitialize_mC689B2C9BDC3CB56B8539484F3B370FA955C0A45_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_UpdateSkeletalSummaryData_m66FD26ED63C98F872AB1DB6810616785C96BE3A2_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_UpdateValue_m973732FC7285143B7F0ABF27A4DD83041EA2FB82_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_UpdateValue_mE924A6C6CFD9CD77209E2FE67B60B8D7D2FFA3A9_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source__cctor_m2A8E4EEA53B06E906C8F0A76AE53800CDBBD9B5D_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source__ctor_mFC568147EA2C28081C0956D1830836B71530D0B3_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_add_onActiveBindingChange_m4DC3513C7C9507997D9D34F1A514F152B2D38CFA_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_add_onActiveChange_mE0FC38C5C6749C482B67CA8FC2017969A0BE37F6_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_add_onChange_m36F08DE1097970DE49B839792F1935A218E92ADA_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_add_onDeviceConnectedChanged_m65E5DE81AF451EF0B00E214FA8E5034E29FA3EC7_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_add_onTrackingChanged_m1214E513861191327AAAF65D11DDA8E978F2EAD0_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_add_onUpdate_m7E46F0BA1CFA58A2B4CD7E9937AF913E21B597E4_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_add_onValidPoseChanged_m2A4D3F3E5FEFDD0ACBBCA7018AD94DF8EDA37A24_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_activeBinding_m541AE099F07A8283CC85D9CDBAB6C52DF84935C6_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_boneCount_m993C474DB459FA2B9A75B36F266729761AF99FFC_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_boneHierarchy_mEB8E9840922D07A185E20B6DC5BF23BABE6E36CE_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_bonePositions_mA0C01DDB9EAB9749BBBEDBCFF72582812AB9C195SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_bonePositions_mA0C01DDB9EAB9749BBBEDBCFF72582812AB9C195_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_boneRotations_mCD0B038517CA7A79945AD615082F05B25B0EDA20SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_boneRotations_mCD0B038517CA7A79945AD615082F05B25B0EDA20_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_fingerCurls_mD56D63D01414ED3D7D6074DB29C81AAC3C490479SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_fingerCurls_mD56D63D01414ED3D7D6074DB29C81AAC3C490479_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_fingerSplays_m5461F8E49017BD6579CC10D8D0783642DEDE37D0SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_fingerSplays_m5461F8E49017BD6579CC10D8D0783642DEDE37D0_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_indexCurl_m06230658C52C5E441A49AD40313C608619196B5B_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_indexMiddleSplay_mC5FC7F51CDCC049B987DB60C5686335125255583_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_lastActiveBinding_mE814471BA5DA727D7AFC082907D4EA51AF0650C5_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_lastBonePositions_m99D1C7B8A05E646777AC85CFC0ED2FF0953C3AB9SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_lastBonePositions_m99D1C7B8A05E646777AC85CFC0ED2FF0953C3AB9_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_lastBoneRotations_m14A98028FB99C0404733364FFD3C187D2A53261CSteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_lastBoneRotations_m14A98028FB99C0404733364FFD3C187D2A53261C_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_lastFingerCurls_m00C4EB3059A4427EF390371B7B56077017F42C2CSteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_lastFingerCurls_m00C4EB3059A4427EF390371B7B56077017F42C2C_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_lastFingerSplays_mC1CF900637C3FB99B1DE3F4BE06452EC07264747SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_lastFingerSplays_mC1CF900637C3FB99B1DE3F4BE06452EC07264747_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_lastIndexCurl_m400F28379D6657033E67D29F2B6376654E71440F_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_lastIndexMiddleSplay_m328634EB394F9D2A6370F481BC35EF947462AB2E_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_lastMiddleCurl_m32F8B6C010E5EDEFE25465EAFCCEE7CEBBEC8F36_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_lastMiddleRingSplay_m33B09DF71ADF6FF1BA42C31E2ACD6D3E5C258845_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_lastPinkyCurl_m40495088AE01BE4B8AE90499CE0A5AEC0673EB13_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_lastRingCurl_m79AD5ABC922A559F034B53F25848FCCB8F80C35D_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_lastRingPinkySplay_mFD509B1C21CF79C88833690ECDB237D307AAC531_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_lastThumbCurl_m55C39AD1FA31B45A7C19348451F25A0488D13241_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_lastThumbIndexSplay_m990D77456F84B5E00C2DD1A5BEC36B915213B1FA_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_middleCurl_mE52CDCDA31A963E723E4BDCC3F3B618FC97CBBE8_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_middleRingSplay_m3FCE7BEB2171ACEFCFD9A0E4169AB0BAD6BFEA62_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_onlyUpdateSummaryData_m3AC011DB8ED08B67F124368EEA9934C5FACA5920SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_onlyUpdateSummaryData_m3AC011DB8ED08B67F124368EEA9934C5FACA5920_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_pinkyCurl_m0E983BD50EB9B7AEB30874395070AE5E86C66FBB_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_poseChanged_m00A9DB3FFD0499D982FC39500D115B4968518988SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_poseChanged_m00A9DB3FFD0499D982FC39500D115B4968518988_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_rangeOfMotion_mCEFC5B01B736A3B6218C5C91A0AEF272FFD88B47SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_rangeOfMotion_mCEFC5B01B736A3B6218C5C91A0AEF272FFD88B47_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_ringCurl_m779E5E61A32799167B43551CB36FE864A6413868_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_ringPinkySplay_mCAFFCF55E8363259B27670F7193D8B85AA934BC7_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_skeletalTrackingLevel_mD592F4C9B67DBFB75FD15DF4755E51FC24C32769_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_skeletalTransformSpace_m0D9D61CC1BC50CC7FA1F9AD5192FBC418009F3F3SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_skeletalTransformSpace_m0D9D61CC1BC50CC7FA1F9AD5192FBC418009F3F3_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_summaryDataType_mE0AB648E0339C2A082B81B15AA2D97854E8BB8CCSteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_summaryDataType_mE0AB648E0339C2A082B81B15AA2D97854E8BB8CC_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_thumbCurl_m7C48F880AFC6164499E9E23B8D1F413B4AC9A98E_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_get_thumbIndexSplay_mEA2624540878BDB6DA6344334535F817583A97B0_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_remove_onActiveBindingChange_m8B778606DA02C1FB1A23C1A955951094E261F2AF_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_remove_onActiveChange_m02B106748649E99F649EC24789D36D5DB0577965_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_remove_onChange_m9AE202076C862455102381B3DD4AA5E98D8E7DB0_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_remove_onDeviceConnectedChanged_mB24005D6459F7B8D170E3445BF5B95405871AF13_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_remove_onTrackingChanged_mD1990275D9A505E92742B063863D9F1BE96BFDB0_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_remove_onUpdate_m3DAC62A7DE38AF1BA67D76654BDC0CECB0296FAF_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_remove_onValidPoseChanged_mA00A29139A1727456784ECF81C9009BAD9B2D8D0_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_set_bonePositions_m6E2F4BC8D0DB6C17A44D1DD390933B195C8F0BE7SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_set_bonePositions_m6E2F4BC8D0DB6C17A44D1DD390933B195C8F0BE7_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_set_boneRotations_m04DF922F78BEB4B48C610E5263CB5A56723BFE11SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_set_boneRotations_m04DF922F78BEB4B48C610E5263CB5A56723BFE11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_set_fingerCurls_m8A5B299B1D9CA30852BCFDF4439985C7C67607D5SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_set_fingerCurls_m8A5B299B1D9CA30852BCFDF4439985C7C67607D5_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_set_fingerSplays_mEC48DADE504DBFF9AB6B0D16ED35C39CE97F2EBDSteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_set_fingerSplays_mEC48DADE504DBFF9AB6B0D16ED35C39CE97F2EBD_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_set_lastBonePositions_m7B9C3EC1294D432EBF5834AA2FD1518F398C771BSteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_set_lastBonePositions_m7B9C3EC1294D432EBF5834AA2FD1518F398C771B_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_set_lastBoneRotations_mAF79C76574CD9C644F280B1E5DCBF068D84C0C71SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_set_lastBoneRotations_mAF79C76574CD9C644F280B1E5DCBF068D84C0C71_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_set_lastFingerCurls_m87DEB2959B20AD607470B75C837EE42754040CFFSteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_set_lastFingerCurls_m87DEB2959B20AD607470B75C837EE42754040CFF_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_set_lastFingerSplays_mA14C6FC07879D8ED956F931D74A2DF14526476E9SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_set_lastFingerSplays_mA14C6FC07879D8ED956F931D74A2DF14526476E9_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_set_onlyUpdateSummaryData_m49C580092D3CDFD2E8D1D98D06026C2FF6F73BCASteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_set_onlyUpdateSummaryData_m49C580092D3CDFD2E8D1D98D06026C2FF6F73BCA_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_set_poseChanged_m91451416B46D3849E217C7FBAAA96F28364E94B0SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_set_poseChanged_m91451416B46D3849E217C7FBAAA96F28364E94B0_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_set_rangeOfMotion_m01A4338F1C4D57E5691A2F8EA861BAD76DA75619SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_set_rangeOfMotion_m01A4338F1C4D57E5691A2F8EA861BAD76DA75619_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_set_skeletalTransformSpace_m851FCD54C037B0D6CF78F14CBF0BF7B44EE86FA8SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_set_skeletalTransformSpace_m851FCD54C037B0D6CF78F14CBF0BF7B44EE86FA8_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_set_summaryDataType_m99B705C8282316AC52EBA3A718C998FE46329E1FSteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_Source_set_summaryDataType_m99B705C8282316AC52EBA3A718C998FE46329E1F_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize_m5CD84AEC49B84E110E6BF9277B9335A136ABAAA5_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize_m4CFD08AACF800E504667C5F20A2636ED6CF50ED2_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_UpdateTransform_m6F79643A24833641C748F3088E112AF52E478BF2_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_UpdateValueWithoutEvents_mDEFBA29DA9DD73B2577B692E21B71CAE9650735C_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_UpdateValue_mA4FFC2C42D19F3EBD6E63E0F10D43754E49E238F_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton__cctor_m57066E5D93F7A7D6D735CE541E25BABAC7E5480A_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton__ctor_mC5935E4BA141DDF7A90EC1593B0AB235ED4A150E_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_add_onActiveBindingChange_m07DF54383907362AF8846A96EC486DE4ADF4CDA1_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_add_onActiveChange_m49322B1046AB4F7F652CFC7F8F5354697CFC419E_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_add_onChange_mD39BD96DEA8F826BAB9975C7960E0FCC34DD2949_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_add_onDeviceConnectedChanged_m92354268E04EC26BEA381884B6642CFBB1E08CC1_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_add_onTrackingChanged_m27D7D512A8B28F439D5462462C58725039CB823B_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_add_onUpdate_mB35B29D83BC5DBA077A734822B1E78F0D921A6E9_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_add_onValidPoseChanged_m16EEF660B28D51B84173746D48C7CA5E4AFDF384_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_boneCount_m03FEFB972B25D05F07C7AEB4D61B2349C75DE864_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_bonePositions_m0CA06F68C8E3D40036C298CE992C74A79C7DA80B_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_boneRotations_m3FF8C259CBA6EF38DF309362206C2871EB754A4E_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_fingerCurls_m4A263447B22178919E09D1E97E8C3BDEA0736BAD_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_fingerSplays_m7B088FB1B70AD3B51A16353085AA0A50AF77EDBD_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_indexCurl_mEB1F41479BDBBEF2E93E1268C0947AA789242C41_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_indexMiddleSplay_m546A2A3E6E1449CA4C6A482D4138EAD63206C7D5_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_lastBonePositions_m5BB686C5104B6A2CC970239A84B0DD48EED00005_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_lastBoneRotations_m116F9E698A5C9DF460DD49FBEAB7580913027F9A_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_lastFingerCurls_m3739004D70486E65E29BC117CE7D03A7F42A334F_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_lastFingerSplays_m8D682F035CBCDC7D71503C78433E061096D3D5FE_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_lastIndexCurl_m8CF537005F0FB51208329280711F0A8408BDBAC9_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_lastIndexMiddleSplay_m30ED9E7BD9BA8E840D1F80AC165E7074B050F1B8_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_lastMiddleCurl_m6D5135ECD058B820D04982DC4077E2E14AA03BAC_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_lastMiddleRingSplay_mD8B7B998BDCE4FEE0FD4D60A6EF589F85A7CE40C_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_lastPinkyCurl_mBFB42992D9E09ADD2B6ED7BC5782C5C6986D3D69_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_lastRingCurl_m6D22D1042A5D05F28D363BE71CA94318FDEF683F_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_lastRingPinkySplay_m4AA30BABB66CAD75BD36C1B957A439F308AD694B_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_lastThumbCurl_m8EF585CBDF71173BBE7A3FFDCADDA14B9DF133DE_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_lastThumbIndexSplay_mA28395123EDD33FE080B5BBDD9B83A5A25E80948_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_middleCurl_mB7653A8B23ED58306E8EB31E707229BFAE1FA9B8_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_middleRingSplay_mC6A6DC9021549480656FD3EFABD14D6D304D555C_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_onlyUpdateSummaryData_m34F8E2E3DFF90BC3E25A4DE8F90C6E717AF3D5BE_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_pinkyCurl_mFB7270C1D7CCD0346630B7FD9537DF2859241C32_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_poseChanged_m248D619571236D9D7833B76A03BA70B033516FFA_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_rangeOfMotion_m67729E8AE1AA6F85CB507D08500E43B64DF76785_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_ringCurl_mC657F338C93FBF39891F77C5B58DFD063B82D9E2_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_ringPinkySplay_mA246643EFA211CB2B0ACC8BF02C70B386D86420E_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_skeletalTrackingLevel_m42CDC3C3C98C91065325A4C71510B9B8B6FBAA14_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_skeletalTransformSpace_mD90A3FC93A8F0BEF500E54EBE0AC67E323950B35_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_summaryDataType_mD93DEF103A25384272D6EC1915F2B794806F4519_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_thumbCurl_m78B436FFB2D7C6B0FE83FBA4BA11123C3B06EF28_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_get_thumbIndexSplay_mE662DBD9173578066DAC6EA4537A9609A89ED735_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_remove_onActiveBindingChange_mF4DF38A823FEA14CBCBEBAD5B07048564772FF42_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_remove_onActiveChange_mB45B49699E0BA70E2CE347A6E9F96018F3FA7BB4_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_remove_onChange_mE3314F2A6094E48BA418013DBEB83064A7F853B0_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_remove_onDeviceConnectedChanged_mCC1CD5EF82563E7FE898D2BAE0DEDC59C9AFA8C9_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_remove_onTrackingChanged_mE5229135F65372F6DDA222F462565A6D0E66DA6D_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_remove_onUpdate_m8558F015C56A6191114E396FBFA440F47580D79C_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_remove_onValidPoseChanged_m36DAF4159892070D6853F24DD8D8DB701CA0F706_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_set_onlyUpdateSummaryData_mFB1077C0BE8DD592764267D71E922C34CF11DB09_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_set_rangeOfMotion_mB389010B0C01970B95C278A809545561A1BA4D58_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_set_skeletalTransformSpace_mA307660C0D7CC13E16AEF9D45B7B87D6B90634F3_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Skeleton_set_summaryDataType_m71DB13F92B26A5E85B0E03386E49397066869B27_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_Initialize_m712F1B6FEBD8059CBB80EC50CC0F16F528023E64_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_Map_GetActionDirection_mA48BA216E276F882C863341B7197E590B6471119_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_Map_GetActionSetPath_mA1707CA47C4282036468F3EA4603C7B25963D834_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_Map_Initialize_mF2DCDEC5F104A3F7879C6D0CE8D60483334DBAC6_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_Map_PreInitialize_m39C648952C2AFF5056406BD4D62DCC94D5D15CF8_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_Map__cctor_mF8C1CC42AFBDF717407FDEDAF6AB49577F23A171_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_Map__ctor_m357508E2B821CFFCA32DAA7B72C9CEC839318744_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_Map_get_actionSet_mE10477F66D710B36A4DB0BDEF9DC7788CD86D893_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_Map_get_direction_m57FCD20566320667DDD47CCF0743E7AF33971413_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_Map_get_fullPath_m17B3B1227ABDCC35456A1B37EE9919772DD1F24ESteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_Map_get_fullPath_m17B3B1227ABDCC35456A1B37EE9919772DD1F24E_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_Map_get_handle_mDD116BA67A37900EC7D7FBB831D8C6FD1BA2903D_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_Map_set_actionSet_m8D8A292258A3B69B920DED592F2BD44A259EBAA9SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_Map_set_actionSet_m8D8A292258A3B69B920DED592F2BD44A259EBAA9_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_Map_set_direction_m4E65637F7F50E116169B2CFB6EBF5A2583D902F2SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_Map_set_direction_m4E65637F7F50E116169B2CFB6EBF5A2583D902F2_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_Map_set_fullPath_mBB40F4301664B3074825255DA6E51B5E02F93463SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_Map_set_fullPath_mBB40F4301664B3074825255DA6E51B5E02F93463_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_Map_set_handle_mB5B6B8E56BCC552963E91E2748DF8CC04BDC979ASteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_Map_set_handle_mB5B6B8E56BCC552963E91E2748DF8CC04BDC979A_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_Preinitialize_mD54CBA24E4881B8742430B3EDF16283316305913_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source__ctor_m50ABEE6BD7F519AB9E0296103A69073EEA2D6576_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_get_actionSet_mF2BE8CE30F960A11115AD000921BBF16088CF5B2_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_get_direction_mDB8ACACE7D1530509D256AD658745A03218C0572_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_get_fullPath_mB0C33E6C1B4F91E908236055FFAE027ECB3ED996_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_get_handle_mE4C63F9ADB5ACA5E72265B62C0908ACF8EF73A01_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_get_inputSource_mAA1928183BB06E5C8CF950F65BA80635C25535D4SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_get_inputSource_mAA1928183BB06E5C8CF950F65BA80635C25535D4_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_get_setActive_m4E3E3DD854D4B7384E415E8BD0F66E880BB97A3E_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_set_inputSource_mCA804B7275EED0C19F247767BCC22B7F639A3175SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Source_set_inputSource_mCA804B7275EED0C19F247767BCC22B7F639A3175_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_AddOnActiveBindingChangeListener_m35A2F8651583EEEA5BFBC687A94D985FFD1C9A01_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_AddOnActiveChangeListener_m4356C2D99F90AC783F576D243573B89ECC4A0765_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_AddOnAxisListener_m5167A71DD40E61F49C0651E92F333FF72DE8F918_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_AddOnChangeListener_m56C1216E50360BCA55C3A0C0EFD71D622939D3FE_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_AddOnUpdateListener_m26DF2290B9B1D47A4F581F149686B184C5625F18_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_GetAxisDelta_m28C52C9103D70A67727BE8BA93551C07951670B0_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_GetAxis_m8A479C238CC933D200B7011F525F49CF84C42BC2_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_GetLastAxisDelta_mFB4F219149889D017084BD189D659164E91E90C6_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_GetLastAxis_m4B679A6140787156C4E740F9A68D03D919111484_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_RemoveOnActiveBindingChangeListener_m3BDA480949C10CEC9D1EE308FA3A104860A5D193_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_RemoveOnActiveChangeListener_m77342D95999D75F33C4C1E7C1F052EA6DB22F9AE_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_RemoveOnAxisListener_m2E5541FBF94FF3B4854220E63766E1A383126384_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_RemoveOnChangeListener_mBFA847AD63D1EFEBEB507A0EDB69DC8721C9C53E_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_RemoveOnUpdateListener_m9B8C6E9BFE29429882D6118D4BDC13B441FA7FA6_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_Initialize_mEA3978343DC5DDA279610886729C005BA2807088_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_Map__ctor_m8779F6CACD1A9A58ECCEE336EEC40FC287CBFE01_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_Preinitialize_mD54D144D5346D31B95218D570EFF9EC692818236_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_UpdateValue_m46FD9956F29672FF3594957130165B620D3EFD21_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source__cctor_m1AFA0EE95F575480A04CE0A300836BDF1BC2067C_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source__ctor_m48D3C09B91B17F520133008F7722E4B4EB26F1EE_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_add_onActiveBindingChange_m10B03BA452F43087BBBB922DD51EF10CAE15D6BC_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_add_onActiveChange_m748D7DF506E999E43D76725669A423DC02CAC2A2_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_add_onAxis_m61879208AE0900224DF6DAC2B5F9AB437F3E3F65_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_add_onChange_m0E890E6CFC54755D7CA6271AACB94F0D16195BFC_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_add_onUpdate_mF42BBDFA8EFE2D15571BE512017F7D2C8A016345_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_get_activeBinding_mD4FD9C47EE8A52843595ED902EC5D3D9583FA283_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_get_activeOrigin_m0E2FC733B091514548A7F3D8E78FF62472C11E6C_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_get_active_m4491F9814CD04DF2F202D91A08C59209B09A38CF_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_get_axis_mCEB6E517ED0E10BE513D22B23A69F1BE3D5DA2BASteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_get_axis_mCEB6E517ED0E10BE513D22B23A69F1BE3D5DA2BA_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_get_changed_m78ACD6A0F63B602F52D431CFA6093B4EE0FA3B0A_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_get_delta_m19CFFF4B8014BD4ED43D0C5EDDD909A2F1DF1908SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_get_delta_m19CFFF4B8014BD4ED43D0C5EDDD909A2F1DF1908_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_get_lastActiveBinding_mF7419A1586A8E1F8199D3BF5778F7FE13DF2D0CE_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_get_lastActiveOrigin_mFD35F8515EB518EACBF6F731B72EC5533DA95C89_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_get_lastActive_mC0586915CE1150717F2F3B3814D5883D00FF5B1A_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_get_lastAxis_mD0A1188D33FAD9AAB16CBCC0C073796C76616460SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_get_lastAxis_mD0A1188D33FAD9AAB16CBCC0C073796C76616460_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_get_lastChanged_mC48C1CC704E7C5C348F9BFBAE9682E718FD6FC9D_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_get_lastDelta_mE21D07B848010D30A36B3C7338B5B615B81598ACSteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_get_lastDelta_mE21D07B848010D30A36B3C7338B5B615B81598AC_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_remove_onActiveBindingChange_m3A62BA01D3F897E4C7115DF360F9DE899A66EB12_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_remove_onActiveChange_mF774E29E5C6AB17CE4351C8533279C2F1685F5A5_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_remove_onAxis_mF3D7E276BA4A72809424D8F02B91BC600C706A45_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_remove_onChange_m6B9FFEDD2003E99E2C81E03B744E35528BCABEE1_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_remove_onUpdate_m7FA21E9B212C4E869AFE43AAE5D3138799CA8320_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_set_axis_m2252BBEBC8C6D4A676ABF0EE270D181EBFB823BBSteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_set_axis_m2252BBEBC8C6D4A676ABF0EE270D181EBFB823BB_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_set_changed_mE5FBDB2D619AB5C4B9CC1A64408431E1106B4038_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_set_delta_m8D0A6407047BB76299057CF382CD612137A600F3SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_set_delta_m8D0A6407047BB76299057CF382CD612137A600F3_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_set_lastActive_mCB20AD139EB2094C54801EF5EC66E2D76E533E67_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_set_lastAxis_m77FAC4A378FA78CC827A871984258A60FA83CAE2SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_set_lastAxis_m77FAC4A378FA78CC827A871984258A60FA83CAE2_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_set_lastChanged_m417B2C89134DA1E9C1149EBBD128AF65524D26A2_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_set_lastDelta_m1943C66837BE7929D58A91A9DFBAB4BBC2A1DB12SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_Source_set_lastDelta_m1943C66837BE7929D58A91A9DFBAB4BBC2A1DB12_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize_m19FBDDF4C65A56BE9DEFBFF7D9C20ED59218FB4C_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize_mBA1C1038518ABB4C40774855505FB7844ECEC552_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2__ctor_mEEEA92BB27BB0513C419BAB3CB220ECBF331AF56_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_add_onActiveBindingChange_m15664B2ED53BB2BD17087FDB290DA192A62D91C8_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_add_onActiveChange_m0A69F75E3DC172336397A4100CE8E9536E907131_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_add_onAxis_m9AF8E8737CD6E677A1FBFF700F6536919762898B_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_add_onChange_m1F62155EA9883091580EC03275BE740C911BAAFF_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_add_onUpdate_m2B0186EEB573726C35ED4A38486D31FFE5CBC469_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_get_axis_mE421CADA54F41607E4F071B793BD5C55171812FB_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_get_delta_m368E3DEDCCE873F323FCB9B85C72103971A2B1E9_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_get_lastAxis_m746D1B31C63B141A97FBD0F4138D703FC5F9DEF0_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_get_lastDelta_mDDAC2B9F3DB61F8B1015F22B61CDD9591FEEEDD7_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_remove_onActiveBindingChange_m28C26AEA56A5BE493976C0C18A34349E13B63029_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_remove_onActiveChange_m27F9EC8B3B7CE60AB0AD1614DEE638622F6DABE7_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_remove_onAxis_mC00F340345B916EA150D4AA4FF3E03F924A67584_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_remove_onChange_m869E023BEB666D8A6A7955802BA9816EE77435F6_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector2_remove_onUpdate_mAEF9FF7CC422045456A60152EC8847FEDB033ED2_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_AddOnActiveBindingChangeListener_mA8C945BE28CAD502B6A1BD6A72659509A206C658_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_AddOnActiveChangeListener_m2D01DEF21993C1450F3A6DD5A1A0E13E015A16EE_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_AddOnAxisListener_mFB5B81222D06CE1838A819CD31E5468593497A42_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_AddOnChangeListener_m856C1E73A985193161F7E68E51E2E7D405CAC77D_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_AddOnUpdateListener_mFDBD5206DBD8AE0CB95CDF5FCA769635C7BEF1A3_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_GetAxisDelta_m6A8BA36DD1F6238D9EE8EF3D7E0F0C87CCE3D9C0_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_GetAxis_mAECD5AA7DB213F313164BCF52B688A44D2466EF5_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_GetLastAxisDelta_m68EA72E9F86BD55D97944438DE7173AD6DA2537D_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_GetLastAxis_mF0C0D122C31F80A5713E739B8D04D352756A6EB8_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_RemoveOnActiveBindingChangeListener_m0318DB5C418AB27237EBEDD74986CEED5322FED4_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_RemoveOnActiveChangeListener_m768C67754A7B4122AC2CA9AF3F4A6C84BF71C122_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_RemoveOnAxisListener_m54BB3A15B566FCD77B580FEB19A879EB6BAA0B19_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_RemoveOnChangeListener_m8AD0A1B8695E9BBF053F3E2D4A6661F22E52BC3D_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_RemoveOnUpdateListener_m3BB302B27358EBEF86B005C6C3BA792EDE27CB75_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_Initialize_mF6083AADD5357032AE31D4496681462FBC9379AB_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_Preinitialize_m4F993EE6B1E88BC3A4162D8C989D5E8B7FD3F286_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_UpdateValue_m740BBE6FBE4887C46BCBA55A25D58A7EF5AE2171_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source__cctor_mE841F95CDB56BC53EB934017D21DB959492E90DA_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source__ctor_mC0D29BEF4DAD2DE16DAA78C0F490591AB171DE1A_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_add_onActiveBindingChange_mC84803E228A14E7891F4B456DC5A102E2ED3956A_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_add_onActiveChange_m01C18C6CC07A9423AACB55F009E6562493049DA0_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_add_onAxis_m09DA9894C1E442EB2D92595D083CD574E287150A_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_add_onChange_m69C7AFE22DFEF6EE8205740927730B4793ABC16D_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_add_onUpdate_mE3337890745CBF20D96EB63A6241FB545E8D7DFC_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_get_activeBinding_mAD816DEB4089A3360C6C9CCD52B2FA22EC57D64D_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_get_activeOrigin_m8A7827E01B77FAAC402DF450D20DC23430ED6B38_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_get_active_mFC75630249C9BC675AFAFF01D5946AFFDF427C03_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_get_axis_m0F9A2BF33B9BC6BF5774EC4D7E2EE2B474B28E99SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_get_axis_m0F9A2BF33B9BC6BF5774EC4D7E2EE2B474B28E99_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_get_changed_m27FD9BF9FC97E30BC83073FFEDC2E54AF76BC0DF_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_get_delta_m4B3DA30643F7D02E80B5AAC93D5BF6D730305BC0SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_get_delta_m4B3DA30643F7D02E80B5AAC93D5BF6D730305BC0_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_get_lastActiveBinding_m22970E1C3A3451045F5EDDB889E90A8D7D9E3EE9_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_get_lastActiveOrigin_mAA8545BDB78F99D6E9A1487FE19BEEEE9879B44B_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_get_lastActive_mAAF066B6810523B948D5DD1C055E9C11BD9FC8E1_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_get_lastAxis_mB5307EA9C41A76639B02A5FB7C775E14C7E8BE8ESteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_get_lastAxis_mB5307EA9C41A76639B02A5FB7C775E14C7E8BE8E_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_get_lastChanged_m76C887902C2FC55C44CC7C42CD159A2FED2103D8_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_get_lastDelta_mBCB31D8D0D5F3B64784F01EAFFC7311F1E07B467SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_get_lastDelta_mBCB31D8D0D5F3B64784F01EAFFC7311F1E07B467_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_remove_onActiveBindingChange_m823695F9961EF46DB2811DA5B8E68567582C639B_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_remove_onActiveChange_mEFAADD238B7127C347FCBF4D850FBD7664BEFD95_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_remove_onAxis_m0E77E9C566405FABBE20C7120A16AE551AC4B70C_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_remove_onChange_m2C757953F88F1D3FCAD98F0F7D0C4EEDCE3220DB_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_remove_onUpdate_mE4D9472A97BDCB264B875B8AFEB5E1C19187FF07_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_set_axis_m8D6C550660D5D6EF3AFC2376B964204B4B26C0DFSteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_set_axis_m8D6C550660D5D6EF3AFC2376B964204B4B26C0DF_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_set_changed_m0E8E663AA33C8749AE0B13926E8785921D5630A3_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_set_delta_m425C84C1DE5AD8F12F9F04C1E4C78452C580FE2BSteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_set_delta_m425C84C1DE5AD8F12F9F04C1E4C78452C580FE2B_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_set_lastActive_mD6174B8C50D61A9C1AC50341B1AC5F7C565B97CE_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_set_lastAxis_m2DA773CD84278414BB2D77495722E7E288C2727CSteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_set_lastAxis_m2DA773CD84278414BB2D77495722E7E288C2727C_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_set_lastChanged_m3DF8DAAAB166AEC44452CC51D43F7602544C77AB_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_set_lastDelta_mD5A541A52EC64B8BF321E3B9778E37647A968DD1SteamVR11_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_Source_set_lastDelta_mD5A541A52EC64B8BF321E3B9778E37647A968DD1_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize_m4713EBBEB02475300C221E3B1D590A50FBDCFE1D_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize_mFDC86399F04D0E0B080756422443B794B9FFBC7F_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3__ctor_m37437A0DC1654AC61B42767A3F6BE9FA2328347C_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_add_onActiveBindingChange_mC4E35E2233DC7C10B75320C8A5EAF0EC207AC5D8_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_add_onActiveChange_mFD6D6D7BBFDDDBAB5371E7D544A1CBA0ABE4CA18_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_add_onAxis_mD6A4E09D264E987391E26F51543D63494DD24EEF_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_add_onChange_m99FB29754E2862967F8BD9009CDD8F59B5D112FC_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_add_onUpdate_mC6730976874F184C9AC45CDDBA4A51145E562EB5_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_get_axis_mF2A2E572ADC8B76D4232AED7D44A94ACD1906099_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_get_delta_m3EA8C5D174CB8D7965B2026361C94F6FF750E38C_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_get_lastAxis_m0365F5B93BB05F9C8F59C44DA333B70C1C46F1DE_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_get_lastDelta_m1C55579E0A38F190350FF1827125EC6AC7D27606_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_remove_onActiveBindingChange_m65EA244FFFCEFAE4B87F0B1E90A38F1CBE2F9C1C_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_remove_onActiveChange_mB126BA6BF4C9EA71ED10C37E584079216BB7F536_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_remove_onAxis_mFD39E7E5FE3F6A009869F30872D651DAC960CF9F_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_remove_onChange_mBA3BF7FDF2A7C02DE0DB32629D2CF110A5375206_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t SteamVR_Action_Vector3_remove_onUpdate_m49616C5F27B3F1F0F08E30427FF68A2AA06CDB62_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t TrackingChangeHandler_BeginInvoke_m9817EC8D7AAF0FA43430700B83DD1F976D5C8242_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t UpdateHandler_BeginInvoke_m3BD5916ADDFFADD04B76A00FA7F8A73235AB5598_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t UpdateHandler_BeginInvoke_mBFD7F08AC61DC5337F3BF6981E53E840CF89AC68_MetadataUsageId;
IL2CPP_EXTERN_C const uint32_t ValidPoseChangeHandler_BeginInvoke_m3BEFCC52268F783010319929B644B5D756E0D1C6_MetadataUsageId;
struct CultureData_tF43B080FFA6EB278F4F289BCDA3FB74B6C208ECD_marshaled_com;
struct CultureData_tF43B080FFA6EB278F4F289BCDA3FB74B6C208ECD_marshaled_pinvoke;
struct CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F_marshaled_com;
struct CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F_marshaled_pinvoke;
struct Delegate_t_marshaled_com;
struct Delegate_t_marshaled_pinvoke;

struct RigidTransformU5BU5D_tC98EB3576009E5D825D0D43671A65D32A2449ECC;
struct DelegateU5BU5D_tDFCDEE2A6322F96C0FE49AF47E9ADB8C4B294E86;
struct Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83;
struct SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5;
struct StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E;
struct QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3;
struct Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28;
struct EVRInputStringBitsU5BU5D_t9F9E9B47CD745CAAB4F8EDC305D84DDF9E5BE511;
struct SteamVR_Action_Skeleton_SourceU5BU5D_tD7F80DE17D413EA1E866B222C9A63AEBFF0CE5D4;
struct SteamVR_Input_SourcesU5BU5D_t735048547A8599BA461FE16B1BC029194E1F184A;
struct SteamVR_Skeleton_FingerIndexEnumU5BU5D_t972F21E674536524E0BFB5F382CFD0ACA1714DB7;
struct SteamVR_Skeleton_FingerSplayIndexEnumU5BU5D_t92DED5924CD2E6B494B9ABD5961F9BC65373A81B;
struct VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B;

IL2CPP_EXTERN_C_BEGIN
IL2CPP_EXTERN_C_END

#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif

// System.Object

struct Il2CppArrayBounds;

// System.Array


// System.Globalization.CultureInfo
struct  CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F  : public RuntimeObject
{
public:
	// System.Boolean System.Globalization.CultureInfo::m_isReadOnly
	bool ___m_isReadOnly_3;
	// System.Int32 System.Globalization.CultureInfo::cultureID
	int32_t ___cultureID_4;
	// System.Int32 System.Globalization.CultureInfo::parent_lcid
	int32_t ___parent_lcid_5;
	// System.Int32 System.Globalization.CultureInfo::datetime_index
	int32_t ___datetime_index_6;
	// System.Int32 System.Globalization.CultureInfo::number_index
	int32_t ___number_index_7;
	// System.Int32 System.Globalization.CultureInfo::default_calendar_type
	int32_t ___default_calendar_type_8;
	// System.Boolean System.Globalization.CultureInfo::m_useUserOverride
	bool ___m_useUserOverride_9;
	// System.Globalization.NumberFormatInfo modreq(System.Runtime.CompilerServices.IsVolatile) System.Globalization.CultureInfo::numInfo
	NumberFormatInfo_tFDF57037EBC5BC833D0A53EF0327B805994860A8 * ___numInfo_10;
	// System.Globalization.DateTimeFormatInfo modreq(System.Runtime.CompilerServices.IsVolatile) System.Globalization.CultureInfo::dateTimeInfo
	DateTimeFormatInfo_tF4BB3AA482C2F772D2A9022F78BF8727830FAF5F * ___dateTimeInfo_11;
	// System.Globalization.TextInfo modreq(System.Runtime.CompilerServices.IsVolatile) System.Globalization.CultureInfo::textInfo
	TextInfo_t5F1E697CB6A7E5EC80F0DC3A968B9B4A70C291D8 * ___textInfo_12;
	// System.String System.Globalization.CultureInfo::m_name
	String_t* ___m_name_13;
	// System.String System.Globalization.CultureInfo::englishname
	String_t* ___englishname_14;
	// System.String System.Globalization.CultureInfo::nativename
	String_t* ___nativename_15;
	// System.String System.Globalization.CultureInfo::iso3lang
	String_t* ___iso3lang_16;
	// System.String System.Globalization.CultureInfo::iso2lang
	String_t* ___iso2lang_17;
	// System.String System.Globalization.CultureInfo::win3lang
	String_t* ___win3lang_18;
	// System.String System.Globalization.CultureInfo::territory
	String_t* ___territory_19;
	// System.String[] System.Globalization.CultureInfo::native_calendar_names
	StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* ___native_calendar_names_20;
	// System.Globalization.CompareInfo modreq(System.Runtime.CompilerServices.IsVolatile) System.Globalization.CultureInfo::compareInfo
	CompareInfo_tB9A071DBC11AC00AF2EA2066D0C2AE1DCB1865D1 * ___compareInfo_21;
	// System.Void* System.Globalization.CultureInfo::textinfo_data
	void* ___textinfo_data_22;
	// System.Int32 System.Globalization.CultureInfo::m_dataItem
	int32_t ___m_dataItem_23;
	// System.Globalization.Calendar System.Globalization.CultureInfo::calendar
	Calendar_tF55A785ACD277504CF0D2F2C6AD56F76C6E91BD5 * ___calendar_24;
	// System.Globalization.CultureInfo System.Globalization.CultureInfo::parent_culture
	CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F * ___parent_culture_25;
	// System.Boolean System.Globalization.CultureInfo::constructed
	bool ___constructed_26;
	// System.Byte[] System.Globalization.CultureInfo::cached_serialized_form
	ByteU5BU5D_tD06FDBE8142446525DF1C40351D523A228373821* ___cached_serialized_form_27;
	// System.Globalization.CultureData System.Globalization.CultureInfo::m_cultureData
	CultureData_tF43B080FFA6EB278F4F289BCDA3FB74B6C208ECD * ___m_cultureData_28;
	// System.Boolean System.Globalization.CultureInfo::m_isInherited
	bool ___m_isInherited_29;

public:
	inline static int32_t get_offset_of_m_isReadOnly_3() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F, ___m_isReadOnly_3)); }
	inline bool get_m_isReadOnly_3() const { return ___m_isReadOnly_3; }
	inline bool* get_address_of_m_isReadOnly_3() { return &___m_isReadOnly_3; }
	inline void set_m_isReadOnly_3(bool value)
	{
		___m_isReadOnly_3 = value;
	}

	inline static int32_t get_offset_of_cultureID_4() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F, ___cultureID_4)); }
	inline int32_t get_cultureID_4() const { return ___cultureID_4; }
	inline int32_t* get_address_of_cultureID_4() { return &___cultureID_4; }
	inline void set_cultureID_4(int32_t value)
	{
		___cultureID_4 = value;
	}

	inline static int32_t get_offset_of_parent_lcid_5() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F, ___parent_lcid_5)); }
	inline int32_t get_parent_lcid_5() const { return ___parent_lcid_5; }
	inline int32_t* get_address_of_parent_lcid_5() { return &___parent_lcid_5; }
	inline void set_parent_lcid_5(int32_t value)
	{
		___parent_lcid_5 = value;
	}

	inline static int32_t get_offset_of_datetime_index_6() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F, ___datetime_index_6)); }
	inline int32_t get_datetime_index_6() const { return ___datetime_index_6; }
	inline int32_t* get_address_of_datetime_index_6() { return &___datetime_index_6; }
	inline void set_datetime_index_6(int32_t value)
	{
		___datetime_index_6 = value;
	}

	inline static int32_t get_offset_of_number_index_7() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F, ___number_index_7)); }
	inline int32_t get_number_index_7() const { return ___number_index_7; }
	inline int32_t* get_address_of_number_index_7() { return &___number_index_7; }
	inline void set_number_index_7(int32_t value)
	{
		___number_index_7 = value;
	}

	inline static int32_t get_offset_of_default_calendar_type_8() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F, ___default_calendar_type_8)); }
	inline int32_t get_default_calendar_type_8() const { return ___default_calendar_type_8; }
	inline int32_t* get_address_of_default_calendar_type_8() { return &___default_calendar_type_8; }
	inline void set_default_calendar_type_8(int32_t value)
	{
		___default_calendar_type_8 = value;
	}

	inline static int32_t get_offset_of_m_useUserOverride_9() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F, ___m_useUserOverride_9)); }
	inline bool get_m_useUserOverride_9() const { return ___m_useUserOverride_9; }
	inline bool* get_address_of_m_useUserOverride_9() { return &___m_useUserOverride_9; }
	inline void set_m_useUserOverride_9(bool value)
	{
		___m_useUserOverride_9 = value;
	}

	inline static int32_t get_offset_of_numInfo_10() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F, ___numInfo_10)); }
	inline NumberFormatInfo_tFDF57037EBC5BC833D0A53EF0327B805994860A8 * get_numInfo_10() const { return ___numInfo_10; }
	inline NumberFormatInfo_tFDF57037EBC5BC833D0A53EF0327B805994860A8 ** get_address_of_numInfo_10() { return &___numInfo_10; }
	inline void set_numInfo_10(NumberFormatInfo_tFDF57037EBC5BC833D0A53EF0327B805994860A8 * value)
	{
		___numInfo_10 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___numInfo_10), (void*)value);
	}

	inline static int32_t get_offset_of_dateTimeInfo_11() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F, ___dateTimeInfo_11)); }
	inline DateTimeFormatInfo_tF4BB3AA482C2F772D2A9022F78BF8727830FAF5F * get_dateTimeInfo_11() const { return ___dateTimeInfo_11; }
	inline DateTimeFormatInfo_tF4BB3AA482C2F772D2A9022F78BF8727830FAF5F ** get_address_of_dateTimeInfo_11() { return &___dateTimeInfo_11; }
	inline void set_dateTimeInfo_11(DateTimeFormatInfo_tF4BB3AA482C2F772D2A9022F78BF8727830FAF5F * value)
	{
		___dateTimeInfo_11 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___dateTimeInfo_11), (void*)value);
	}

	inline static int32_t get_offset_of_textInfo_12() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F, ___textInfo_12)); }
	inline TextInfo_t5F1E697CB6A7E5EC80F0DC3A968B9B4A70C291D8 * get_textInfo_12() const { return ___textInfo_12; }
	inline TextInfo_t5F1E697CB6A7E5EC80F0DC3A968B9B4A70C291D8 ** get_address_of_textInfo_12() { return &___textInfo_12; }
	inline void set_textInfo_12(TextInfo_t5F1E697CB6A7E5EC80F0DC3A968B9B4A70C291D8 * value)
	{
		___textInfo_12 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___textInfo_12), (void*)value);
	}

	inline static int32_t get_offset_of_m_name_13() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F, ___m_name_13)); }
	inline String_t* get_m_name_13() const { return ___m_name_13; }
	inline String_t** get_address_of_m_name_13() { return &___m_name_13; }
	inline void set_m_name_13(String_t* value)
	{
		___m_name_13 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___m_name_13), (void*)value);
	}

	inline static int32_t get_offset_of_englishname_14() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F, ___englishname_14)); }
	inline String_t* get_englishname_14() const { return ___englishname_14; }
	inline String_t** get_address_of_englishname_14() { return &___englishname_14; }
	inline void set_englishname_14(String_t* value)
	{
		___englishname_14 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___englishname_14), (void*)value);
	}

	inline static int32_t get_offset_of_nativename_15() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F, ___nativename_15)); }
	inline String_t* get_nativename_15() const { return ___nativename_15; }
	inline String_t** get_address_of_nativename_15() { return &___nativename_15; }
	inline void set_nativename_15(String_t* value)
	{
		___nativename_15 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___nativename_15), (void*)value);
	}

	inline static int32_t get_offset_of_iso3lang_16() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F, ___iso3lang_16)); }
	inline String_t* get_iso3lang_16() const { return ___iso3lang_16; }
	inline String_t** get_address_of_iso3lang_16() { return &___iso3lang_16; }
	inline void set_iso3lang_16(String_t* value)
	{
		___iso3lang_16 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___iso3lang_16), (void*)value);
	}

	inline static int32_t get_offset_of_iso2lang_17() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F, ___iso2lang_17)); }
	inline String_t* get_iso2lang_17() const { return ___iso2lang_17; }
	inline String_t** get_address_of_iso2lang_17() { return &___iso2lang_17; }
	inline void set_iso2lang_17(String_t* value)
	{
		___iso2lang_17 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___iso2lang_17), (void*)value);
	}

	inline static int32_t get_offset_of_win3lang_18() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F, ___win3lang_18)); }
	inline String_t* get_win3lang_18() const { return ___win3lang_18; }
	inline String_t** get_address_of_win3lang_18() { return &___win3lang_18; }
	inline void set_win3lang_18(String_t* value)
	{
		___win3lang_18 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___win3lang_18), (void*)value);
	}

	inline static int32_t get_offset_of_territory_19() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F, ___territory_19)); }
	inline String_t* get_territory_19() const { return ___territory_19; }
	inline String_t** get_address_of_territory_19() { return &___territory_19; }
	inline void set_territory_19(String_t* value)
	{
		___territory_19 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___territory_19), (void*)value);
	}

	inline static int32_t get_offset_of_native_calendar_names_20() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F, ___native_calendar_names_20)); }
	inline StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* get_native_calendar_names_20() const { return ___native_calendar_names_20; }
	inline StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E** get_address_of_native_calendar_names_20() { return &___native_calendar_names_20; }
	inline void set_native_calendar_names_20(StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* value)
	{
		___native_calendar_names_20 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___native_calendar_names_20), (void*)value);
	}

	inline static int32_t get_offset_of_compareInfo_21() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F, ___compareInfo_21)); }
	inline CompareInfo_tB9A071DBC11AC00AF2EA2066D0C2AE1DCB1865D1 * get_compareInfo_21() const { return ___compareInfo_21; }
	inline CompareInfo_tB9A071DBC11AC00AF2EA2066D0C2AE1DCB1865D1 ** get_address_of_compareInfo_21() { return &___compareInfo_21; }
	inline void set_compareInfo_21(CompareInfo_tB9A071DBC11AC00AF2EA2066D0C2AE1DCB1865D1 * value)
	{
		___compareInfo_21 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___compareInfo_21), (void*)value);
	}

	inline static int32_t get_offset_of_textinfo_data_22() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F, ___textinfo_data_22)); }
	inline void* get_textinfo_data_22() const { return ___textinfo_data_22; }
	inline void** get_address_of_textinfo_data_22() { return &___textinfo_data_22; }
	inline void set_textinfo_data_22(void* value)
	{
		___textinfo_data_22 = value;
	}

	inline static int32_t get_offset_of_m_dataItem_23() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F, ___m_dataItem_23)); }
	inline int32_t get_m_dataItem_23() const { return ___m_dataItem_23; }
	inline int32_t* get_address_of_m_dataItem_23() { return &___m_dataItem_23; }
	inline void set_m_dataItem_23(int32_t value)
	{
		___m_dataItem_23 = value;
	}

	inline static int32_t get_offset_of_calendar_24() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F, ___calendar_24)); }
	inline Calendar_tF55A785ACD277504CF0D2F2C6AD56F76C6E91BD5 * get_calendar_24() const { return ___calendar_24; }
	inline Calendar_tF55A785ACD277504CF0D2F2C6AD56F76C6E91BD5 ** get_address_of_calendar_24() { return &___calendar_24; }
	inline void set_calendar_24(Calendar_tF55A785ACD277504CF0D2F2C6AD56F76C6E91BD5 * value)
	{
		___calendar_24 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___calendar_24), (void*)value);
	}

	inline static int32_t get_offset_of_parent_culture_25() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F, ___parent_culture_25)); }
	inline CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F * get_parent_culture_25() const { return ___parent_culture_25; }
	inline CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F ** get_address_of_parent_culture_25() { return &___parent_culture_25; }
	inline void set_parent_culture_25(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F * value)
	{
		___parent_culture_25 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___parent_culture_25), (void*)value);
	}

	inline static int32_t get_offset_of_constructed_26() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F, ___constructed_26)); }
	inline bool get_constructed_26() const { return ___constructed_26; }
	inline bool* get_address_of_constructed_26() { return &___constructed_26; }
	inline void set_constructed_26(bool value)
	{
		___constructed_26 = value;
	}

	inline static int32_t get_offset_of_cached_serialized_form_27() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F, ___cached_serialized_form_27)); }
	inline ByteU5BU5D_tD06FDBE8142446525DF1C40351D523A228373821* get_cached_serialized_form_27() const { return ___cached_serialized_form_27; }
	inline ByteU5BU5D_tD06FDBE8142446525DF1C40351D523A228373821** get_address_of_cached_serialized_form_27() { return &___cached_serialized_form_27; }
	inline void set_cached_serialized_form_27(ByteU5BU5D_tD06FDBE8142446525DF1C40351D523A228373821* value)
	{
		___cached_serialized_form_27 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___cached_serialized_form_27), (void*)value);
	}

	inline static int32_t get_offset_of_m_cultureData_28() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F, ___m_cultureData_28)); }
	inline CultureData_tF43B080FFA6EB278F4F289BCDA3FB74B6C208ECD * get_m_cultureData_28() const { return ___m_cultureData_28; }
	inline CultureData_tF43B080FFA6EB278F4F289BCDA3FB74B6C208ECD ** get_address_of_m_cultureData_28() { return &___m_cultureData_28; }
	inline void set_m_cultureData_28(CultureData_tF43B080FFA6EB278F4F289BCDA3FB74B6C208ECD * value)
	{
		___m_cultureData_28 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___m_cultureData_28), (void*)value);
	}

	inline static int32_t get_offset_of_m_isInherited_29() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F, ___m_isInherited_29)); }
	inline bool get_m_isInherited_29() const { return ___m_isInherited_29; }
	inline bool* get_address_of_m_isInherited_29() { return &___m_isInherited_29; }
	inline void set_m_isInherited_29(bool value)
	{
		___m_isInherited_29 = value;
	}
};

struct CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F_StaticFields
{
public:
	// System.Globalization.CultureInfo modreq(System.Runtime.CompilerServices.IsVolatile) System.Globalization.CultureInfo::invariant_culture_info
	CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F * ___invariant_culture_info_0;
	// System.Object System.Globalization.CultureInfo::shared_table_lock
	RuntimeObject * ___shared_table_lock_1;
	// System.Globalization.CultureInfo System.Globalization.CultureInfo::default_current_culture
	CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F * ___default_current_culture_2;
	// System.Globalization.CultureInfo modreq(System.Runtime.CompilerServices.IsVolatile) System.Globalization.CultureInfo::s_DefaultThreadCurrentUICulture
	CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F * ___s_DefaultThreadCurrentUICulture_33;
	// System.Globalization.CultureInfo modreq(System.Runtime.CompilerServices.IsVolatile) System.Globalization.CultureInfo::s_DefaultThreadCurrentCulture
	CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F * ___s_DefaultThreadCurrentCulture_34;
	// System.Collections.Generic.Dictionary`2<System.Int32,System.Globalization.CultureInfo> System.Globalization.CultureInfo::shared_by_number
	Dictionary_2_tC88A56872F7C79DBB9582D4F3FC22ED5D8E0B98B * ___shared_by_number_35;
	// System.Collections.Generic.Dictionary`2<System.String,System.Globalization.CultureInfo> System.Globalization.CultureInfo::shared_by_name
	Dictionary_2_tBA5388DBB42BF620266F9A48E8B859BBBB224E25 * ___shared_by_name_36;
	// System.Boolean System.Globalization.CultureInfo::IsTaiwanSku
	bool ___IsTaiwanSku_37;

public:
	inline static int32_t get_offset_of_invariant_culture_info_0() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F_StaticFields, ___invariant_culture_info_0)); }
	inline CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F * get_invariant_culture_info_0() const { return ___invariant_culture_info_0; }
	inline CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F ** get_address_of_invariant_culture_info_0() { return &___invariant_culture_info_0; }
	inline void set_invariant_culture_info_0(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F * value)
	{
		___invariant_culture_info_0 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___invariant_culture_info_0), (void*)value);
	}

	inline static int32_t get_offset_of_shared_table_lock_1() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F_StaticFields, ___shared_table_lock_1)); }
	inline RuntimeObject * get_shared_table_lock_1() const { return ___shared_table_lock_1; }
	inline RuntimeObject ** get_address_of_shared_table_lock_1() { return &___shared_table_lock_1; }
	inline void set_shared_table_lock_1(RuntimeObject * value)
	{
		___shared_table_lock_1 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___shared_table_lock_1), (void*)value);
	}

	inline static int32_t get_offset_of_default_current_culture_2() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F_StaticFields, ___default_current_culture_2)); }
	inline CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F * get_default_current_culture_2() const { return ___default_current_culture_2; }
	inline CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F ** get_address_of_default_current_culture_2() { return &___default_current_culture_2; }
	inline void set_default_current_culture_2(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F * value)
	{
		___default_current_culture_2 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___default_current_culture_2), (void*)value);
	}

	inline static int32_t get_offset_of_s_DefaultThreadCurrentUICulture_33() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F_StaticFields, ___s_DefaultThreadCurrentUICulture_33)); }
	inline CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F * get_s_DefaultThreadCurrentUICulture_33() const { return ___s_DefaultThreadCurrentUICulture_33; }
	inline CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F ** get_address_of_s_DefaultThreadCurrentUICulture_33() { return &___s_DefaultThreadCurrentUICulture_33; }
	inline void set_s_DefaultThreadCurrentUICulture_33(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F * value)
	{
		___s_DefaultThreadCurrentUICulture_33 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___s_DefaultThreadCurrentUICulture_33), (void*)value);
	}

	inline static int32_t get_offset_of_s_DefaultThreadCurrentCulture_34() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F_StaticFields, ___s_DefaultThreadCurrentCulture_34)); }
	inline CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F * get_s_DefaultThreadCurrentCulture_34() const { return ___s_DefaultThreadCurrentCulture_34; }
	inline CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F ** get_address_of_s_DefaultThreadCurrentCulture_34() { return &___s_DefaultThreadCurrentCulture_34; }
	inline void set_s_DefaultThreadCurrentCulture_34(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F * value)
	{
		___s_DefaultThreadCurrentCulture_34 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___s_DefaultThreadCurrentCulture_34), (void*)value);
	}

	inline static int32_t get_offset_of_shared_by_number_35() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F_StaticFields, ___shared_by_number_35)); }
	inline Dictionary_2_tC88A56872F7C79DBB9582D4F3FC22ED5D8E0B98B * get_shared_by_number_35() const { return ___shared_by_number_35; }
	inline Dictionary_2_tC88A56872F7C79DBB9582D4F3FC22ED5D8E0B98B ** get_address_of_shared_by_number_35() { return &___shared_by_number_35; }
	inline void set_shared_by_number_35(Dictionary_2_tC88A56872F7C79DBB9582D4F3FC22ED5D8E0B98B * value)
	{
		___shared_by_number_35 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___shared_by_number_35), (void*)value);
	}

	inline static int32_t get_offset_of_shared_by_name_36() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F_StaticFields, ___shared_by_name_36)); }
	inline Dictionary_2_tBA5388DBB42BF620266F9A48E8B859BBBB224E25 * get_shared_by_name_36() const { return ___shared_by_name_36; }
	inline Dictionary_2_tBA5388DBB42BF620266F9A48E8B859BBBB224E25 ** get_address_of_shared_by_name_36() { return &___shared_by_name_36; }
	inline void set_shared_by_name_36(Dictionary_2_tBA5388DBB42BF620266F9A48E8B859BBBB224E25 * value)
	{
		___shared_by_name_36 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___shared_by_name_36), (void*)value);
	}

	inline static int32_t get_offset_of_IsTaiwanSku_37() { return static_cast<int32_t>(offsetof(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F_StaticFields, ___IsTaiwanSku_37)); }
	inline bool get_IsTaiwanSku_37() const { return ___IsTaiwanSku_37; }
	inline bool* get_address_of_IsTaiwanSku_37() { return &___IsTaiwanSku_37; }
	inline void set_IsTaiwanSku_37(bool value)
	{
		___IsTaiwanSku_37 = value;
	}
};

// Native definition for P/Invoke marshalling of System.Globalization.CultureInfo
struct CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F_marshaled_pinvoke
{
	int32_t ___m_isReadOnly_3;
	int32_t ___cultureID_4;
	int32_t ___parent_lcid_5;
	int32_t ___datetime_index_6;
	int32_t ___number_index_7;
	int32_t ___default_calendar_type_8;
	int32_t ___m_useUserOverride_9;
	NumberFormatInfo_tFDF57037EBC5BC833D0A53EF0327B805994860A8 * ___numInfo_10;
	DateTimeFormatInfo_tF4BB3AA482C2F772D2A9022F78BF8727830FAF5F * ___dateTimeInfo_11;
	TextInfo_t5F1E697CB6A7E5EC80F0DC3A968B9B4A70C291D8 * ___textInfo_12;
	char* ___m_name_13;
	char* ___englishname_14;
	char* ___nativename_15;
	char* ___iso3lang_16;
	char* ___iso2lang_17;
	char* ___win3lang_18;
	char* ___territory_19;
	char** ___native_calendar_names_20;
	CompareInfo_tB9A071DBC11AC00AF2EA2066D0C2AE1DCB1865D1 * ___compareInfo_21;
	void* ___textinfo_data_22;
	int32_t ___m_dataItem_23;
	Calendar_tF55A785ACD277504CF0D2F2C6AD56F76C6E91BD5 * ___calendar_24;
	CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F_marshaled_pinvoke* ___parent_culture_25;
	int32_t ___constructed_26;
	Il2CppSafeArray/*NONE*/* ___cached_serialized_form_27;
	CultureData_tF43B080FFA6EB278F4F289BCDA3FB74B6C208ECD_marshaled_pinvoke* ___m_cultureData_28;
	int32_t ___m_isInherited_29;
};
// Native definition for COM marshalling of System.Globalization.CultureInfo
struct CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F_marshaled_com
{
	int32_t ___m_isReadOnly_3;
	int32_t ___cultureID_4;
	int32_t ___parent_lcid_5;
	int32_t ___datetime_index_6;
	int32_t ___number_index_7;
	int32_t ___default_calendar_type_8;
	int32_t ___m_useUserOverride_9;
	NumberFormatInfo_tFDF57037EBC5BC833D0A53EF0327B805994860A8 * ___numInfo_10;
	DateTimeFormatInfo_tF4BB3AA482C2F772D2A9022F78BF8727830FAF5F * ___dateTimeInfo_11;
	TextInfo_t5F1E697CB6A7E5EC80F0DC3A968B9B4A70C291D8 * ___textInfo_12;
	Il2CppChar* ___m_name_13;
	Il2CppChar* ___englishname_14;
	Il2CppChar* ___nativename_15;
	Il2CppChar* ___iso3lang_16;
	Il2CppChar* ___iso2lang_17;
	Il2CppChar* ___win3lang_18;
	Il2CppChar* ___territory_19;
	Il2CppChar** ___native_calendar_names_20;
	CompareInfo_tB9A071DBC11AC00AF2EA2066D0C2AE1DCB1865D1 * ___compareInfo_21;
	void* ___textinfo_data_22;
	int32_t ___m_dataItem_23;
	Calendar_tF55A785ACD277504CF0D2F2C6AD56F76C6E91BD5 * ___calendar_24;
	CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F_marshaled_com* ___parent_culture_25;
	int32_t ___constructed_26;
	Il2CppSafeArray/*NONE*/* ___cached_serialized_form_27;
	CultureData_tF43B080FFA6EB278F4F289BCDA3FB74B6C208ECD_marshaled_com* ___m_cultureData_28;
	int32_t ___m_isInherited_29;
};

// System.Reflection.MemberInfo
struct  MemberInfo_t  : public RuntimeObject
{
public:

public:
};


// System.String
struct  String_t  : public RuntimeObject
{
public:
	// System.Int32 System.String::m_stringLength
	int32_t ___m_stringLength_0;
	// System.Char System.String::m_firstChar
	Il2CppChar ___m_firstChar_1;

public:
	inline static int32_t get_offset_of_m_stringLength_0() { return static_cast<int32_t>(offsetof(String_t, ___m_stringLength_0)); }
	inline int32_t get_m_stringLength_0() const { return ___m_stringLength_0; }
	inline int32_t* get_address_of_m_stringLength_0() { return &___m_stringLength_0; }
	inline void set_m_stringLength_0(int32_t value)
	{
		___m_stringLength_0 = value;
	}

	inline static int32_t get_offset_of_m_firstChar_1() { return static_cast<int32_t>(offsetof(String_t, ___m_firstChar_1)); }
	inline Il2CppChar get_m_firstChar_1() const { return ___m_firstChar_1; }
	inline Il2CppChar* get_address_of_m_firstChar_1() { return &___m_firstChar_1; }
	inline void set_m_firstChar_1(Il2CppChar value)
	{
		___m_firstChar_1 = value;
	}
};

struct String_t_StaticFields
{
public:
	// System.String System.String::Empty
	String_t* ___Empty_5;

public:
	inline static int32_t get_offset_of_Empty_5() { return static_cast<int32_t>(offsetof(String_t_StaticFields, ___Empty_5)); }
	inline String_t* get_Empty_5() const { return ___Empty_5; }
	inline String_t** get_address_of_Empty_5() { return &___Empty_5; }
	inline void set_Empty_5(String_t* value)
	{
		___Empty_5 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___Empty_5), (void*)value);
	}
};


// System.Text.StringBuilder
struct  StringBuilder_t  : public RuntimeObject
{
public:
	// System.Char[] System.Text.StringBuilder::m_ChunkChars
	CharU5BU5D_t4CC6ABF0AD71BEC97E3C2F1E9C5677E46D3A75C2* ___m_ChunkChars_0;
	// System.Text.StringBuilder System.Text.StringBuilder::m_ChunkPrevious
	StringBuilder_t * ___m_ChunkPrevious_1;
	// System.Int32 System.Text.StringBuilder::m_ChunkLength
	int32_t ___m_ChunkLength_2;
	// System.Int32 System.Text.StringBuilder::m_ChunkOffset
	int32_t ___m_ChunkOffset_3;
	// System.Int32 System.Text.StringBuilder::m_MaxCapacity
	int32_t ___m_MaxCapacity_4;

public:
	inline static int32_t get_offset_of_m_ChunkChars_0() { return static_cast<int32_t>(offsetof(StringBuilder_t, ___m_ChunkChars_0)); }
	inline CharU5BU5D_t4CC6ABF0AD71BEC97E3C2F1E9C5677E46D3A75C2* get_m_ChunkChars_0() const { return ___m_ChunkChars_0; }
	inline CharU5BU5D_t4CC6ABF0AD71BEC97E3C2F1E9C5677E46D3A75C2** get_address_of_m_ChunkChars_0() { return &___m_ChunkChars_0; }
	inline void set_m_ChunkChars_0(CharU5BU5D_t4CC6ABF0AD71BEC97E3C2F1E9C5677E46D3A75C2* value)
	{
		___m_ChunkChars_0 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___m_ChunkChars_0), (void*)value);
	}

	inline static int32_t get_offset_of_m_ChunkPrevious_1() { return static_cast<int32_t>(offsetof(StringBuilder_t, ___m_ChunkPrevious_1)); }
	inline StringBuilder_t * get_m_ChunkPrevious_1() const { return ___m_ChunkPrevious_1; }
	inline StringBuilder_t ** get_address_of_m_ChunkPrevious_1() { return &___m_ChunkPrevious_1; }
	inline void set_m_ChunkPrevious_1(StringBuilder_t * value)
	{
		___m_ChunkPrevious_1 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___m_ChunkPrevious_1), (void*)value);
	}

	inline static int32_t get_offset_of_m_ChunkLength_2() { return static_cast<int32_t>(offsetof(StringBuilder_t, ___m_ChunkLength_2)); }
	inline int32_t get_m_ChunkLength_2() const { return ___m_ChunkLength_2; }
	inline int32_t* get_address_of_m_ChunkLength_2() { return &___m_ChunkLength_2; }
	inline void set_m_ChunkLength_2(int32_t value)
	{
		___m_ChunkLength_2 = value;
	}

	inline static int32_t get_offset_of_m_ChunkOffset_3() { return static_cast<int32_t>(offsetof(StringBuilder_t, ___m_ChunkOffset_3)); }
	inline int32_t get_m_ChunkOffset_3() const { return ___m_ChunkOffset_3; }
	inline int32_t* get_address_of_m_ChunkOffset_3() { return &___m_ChunkOffset_3; }
	inline void set_m_ChunkOffset_3(int32_t value)
	{
		___m_ChunkOffset_3 = value;
	}

	inline static int32_t get_offset_of_m_MaxCapacity_4() { return static_cast<int32_t>(offsetof(StringBuilder_t, ___m_MaxCapacity_4)); }
	inline int32_t get_m_MaxCapacity_4() const { return ___m_MaxCapacity_4; }
	inline int32_t* get_address_of_m_MaxCapacity_4() { return &___m_MaxCapacity_4; }
	inline void set_m_MaxCapacity_4(int32_t value)
	{
		___m_MaxCapacity_4 = value;
	}
};


// System.ValueType
struct  ValueType_t4D0C27076F7C36E76190FB3328E232BCB1CD1FFF  : public RuntimeObject
{
public:

public:
};

// Native definition for P/Invoke marshalling of System.ValueType
struct ValueType_t4D0C27076F7C36E76190FB3328E232BCB1CD1FFF_marshaled_pinvoke
{
};
// Native definition for COM marshalling of System.ValueType
struct ValueType_t4D0C27076F7C36E76190FB3328E232BCB1CD1FFF_marshaled_com
{
};

// Valve.VR.SteamVR_Action
struct  SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734  : public RuntimeObject
{
public:
	// System.String Valve.VR.SteamVR_Action::actionPath
	String_t* ___actionPath_0;
	// System.Boolean Valve.VR.SteamVR_Action::needsReinit
	bool ___needsReinit_1;
	// System.String Valve.VR.SteamVR_Action::cachedShortName
	String_t* ___cachedShortName_3;

public:
	inline static int32_t get_offset_of_actionPath_0() { return static_cast<int32_t>(offsetof(SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734, ___actionPath_0)); }
	inline String_t* get_actionPath_0() const { return ___actionPath_0; }
	inline String_t** get_address_of_actionPath_0() { return &___actionPath_0; }
	inline void set_actionPath_0(String_t* value)
	{
		___actionPath_0 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___actionPath_0), (void*)value);
	}

	inline static int32_t get_offset_of_needsReinit_1() { return static_cast<int32_t>(offsetof(SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734, ___needsReinit_1)); }
	inline bool get_needsReinit_1() const { return ___needsReinit_1; }
	inline bool* get_address_of_needsReinit_1() { return &___needsReinit_1; }
	inline void set_needsReinit_1(bool value)
	{
		___needsReinit_1 = value;
	}

	inline static int32_t get_offset_of_cachedShortName_3() { return static_cast<int32_t>(offsetof(SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734, ___cachedShortName_3)); }
	inline String_t* get_cachedShortName_3() const { return ___cachedShortName_3; }
	inline String_t** get_address_of_cachedShortName_3() { return &___cachedShortName_3; }
	inline void set_cachedShortName_3(String_t* value)
	{
		___cachedShortName_3 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___cachedShortName_3), (void*)value);
	}
};

struct SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734_StaticFields
{
public:
	// System.Boolean Valve.VR.SteamVR_Action::startUpdatingSourceOnAccess
	bool ___startUpdatingSourceOnAccess_2;

public:
	inline static int32_t get_offset_of_startUpdatingSourceOnAccess_2() { return static_cast<int32_t>(offsetof(SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734_StaticFields, ___startUpdatingSourceOnAccess_2)); }
	inline bool get_startUpdatingSourceOnAccess_2() const { return ___startUpdatingSourceOnAccess_2; }
	inline bool* get_address_of_startUpdatingSourceOnAccess_2() { return &___startUpdatingSourceOnAccess_2; }
	inline void set_startUpdatingSourceOnAccess_2(bool value)
	{
		___startUpdatingSourceOnAccess_2 = value;
	}
};


// Valve.VR.SteamVR_ActionSet
struct  SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6  : public RuntimeObject
{
public:
	// System.String Valve.VR.SteamVR_ActionSet::actionSetPath
	String_t* ___actionSetPath_0;
	// Valve.VR.SteamVR_ActionSet_Data Valve.VR.SteamVR_ActionSet::setData
	SteamVR_ActionSet_Data_tDA03CB718A3B3F5805D6D9C399D57E56AF9DA529 * ___setData_1;
	// System.Boolean Valve.VR.SteamVR_ActionSet::initialized
	bool ___initialized_2;

public:
	inline static int32_t get_offset_of_actionSetPath_0() { return static_cast<int32_t>(offsetof(SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6, ___actionSetPath_0)); }
	inline String_t* get_actionSetPath_0() const { return ___actionSetPath_0; }
	inline String_t** get_address_of_actionSetPath_0() { return &___actionSetPath_0; }
	inline void set_actionSetPath_0(String_t* value)
	{
		___actionSetPath_0 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___actionSetPath_0), (void*)value);
	}

	inline static int32_t get_offset_of_setData_1() { return static_cast<int32_t>(offsetof(SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6, ___setData_1)); }
	inline SteamVR_ActionSet_Data_tDA03CB718A3B3F5805D6D9C399D57E56AF9DA529 * get_setData_1() const { return ___setData_1; }
	inline SteamVR_ActionSet_Data_tDA03CB718A3B3F5805D6D9C399D57E56AF9DA529 ** get_address_of_setData_1() { return &___setData_1; }
	inline void set_setData_1(SteamVR_ActionSet_Data_tDA03CB718A3B3F5805D6D9C399D57E56AF9DA529 * value)
	{
		___setData_1 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___setData_1), (void*)value);
	}

	inline static int32_t get_offset_of_initialized_2() { return static_cast<int32_t>(offsetof(SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6, ___initialized_2)); }
	inline bool get_initialized_2() const { return ___initialized_2; }
	inline bool* get_address_of_initialized_2() { return &___initialized_2; }
	inline void set_initialized_2(bool value)
	{
		___initialized_2 = value;
	}
};


// Valve.VR.SteamVR_Skeleton_FingerIndexes
struct  SteamVR_Skeleton_FingerIndexes_t23102EBBB267071AC40CD07242EE4C746DC7F020  : public RuntimeObject
{
public:

public:
};

struct SteamVR_Skeleton_FingerIndexes_t23102EBBB267071AC40CD07242EE4C746DC7F020_StaticFields
{
public:
	// Valve.VR.SteamVR_Skeleton_FingerIndexEnum[] Valve.VR.SteamVR_Skeleton_FingerIndexes::enumArray
	SteamVR_Skeleton_FingerIndexEnumU5BU5D_t972F21E674536524E0BFB5F382CFD0ACA1714DB7* ___enumArray_5;

public:
	inline static int32_t get_offset_of_enumArray_5() { return static_cast<int32_t>(offsetof(SteamVR_Skeleton_FingerIndexes_t23102EBBB267071AC40CD07242EE4C746DC7F020_StaticFields, ___enumArray_5)); }
	inline SteamVR_Skeleton_FingerIndexEnumU5BU5D_t972F21E674536524E0BFB5F382CFD0ACA1714DB7* get_enumArray_5() const { return ___enumArray_5; }
	inline SteamVR_Skeleton_FingerIndexEnumU5BU5D_t972F21E674536524E0BFB5F382CFD0ACA1714DB7** get_address_of_enumArray_5() { return &___enumArray_5; }
	inline void set_enumArray_5(SteamVR_Skeleton_FingerIndexEnumU5BU5D_t972F21E674536524E0BFB5F382CFD0ACA1714DB7* value)
	{
		___enumArray_5 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___enumArray_5), (void*)value);
	}
};


// Valve.VR.SteamVR_Skeleton_FingerSplayIndexes
struct  SteamVR_Skeleton_FingerSplayIndexes_t0141FA1AFC8CF87E917B728EEBBA9186F26D3246  : public RuntimeObject
{
public:

public:
};

struct SteamVR_Skeleton_FingerSplayIndexes_t0141FA1AFC8CF87E917B728EEBBA9186F26D3246_StaticFields
{
public:
	// Valve.VR.SteamVR_Skeleton_FingerSplayIndexEnum[] Valve.VR.SteamVR_Skeleton_FingerSplayIndexes::enumArray
	SteamVR_Skeleton_FingerSplayIndexEnumU5BU5D_t92DED5924CD2E6B494B9ABD5961F9BC65373A81B* ___enumArray_4;

public:
	inline static int32_t get_offset_of_enumArray_4() { return static_cast<int32_t>(offsetof(SteamVR_Skeleton_FingerSplayIndexes_t0141FA1AFC8CF87E917B728EEBBA9186F26D3246_StaticFields, ___enumArray_4)); }
	inline SteamVR_Skeleton_FingerSplayIndexEnumU5BU5D_t92DED5924CD2E6B494B9ABD5961F9BC65373A81B* get_enumArray_4() const { return ___enumArray_4; }
	inline SteamVR_Skeleton_FingerSplayIndexEnumU5BU5D_t92DED5924CD2E6B494B9ABD5961F9BC65373A81B** get_address_of_enumArray_4() { return &___enumArray_4; }
	inline void set_enumArray_4(SteamVR_Skeleton_FingerSplayIndexEnumU5BU5D_t92DED5924CD2E6B494B9ABD5961F9BC65373A81B* value)
	{
		___enumArray_4 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___enumArray_4), (void*)value);
	}
};


// System.Boolean
struct  Boolean_tB53F6830F670160873277339AA58F15CAED4399C 
{
public:
	// System.Boolean System.Boolean::m_value
	bool ___m_value_0;

public:
	inline static int32_t get_offset_of_m_value_0() { return static_cast<int32_t>(offsetof(Boolean_tB53F6830F670160873277339AA58F15CAED4399C, ___m_value_0)); }
	inline bool get_m_value_0() const { return ___m_value_0; }
	inline bool* get_address_of_m_value_0() { return &___m_value_0; }
	inline void set_m_value_0(bool value)
	{
		___m_value_0 = value;
	}
};

struct Boolean_tB53F6830F670160873277339AA58F15CAED4399C_StaticFields
{
public:
	// System.String System.Boolean::TrueString
	String_t* ___TrueString_5;
	// System.String System.Boolean::FalseString
	String_t* ___FalseString_6;

public:
	inline static int32_t get_offset_of_TrueString_5() { return static_cast<int32_t>(offsetof(Boolean_tB53F6830F670160873277339AA58F15CAED4399C_StaticFields, ___TrueString_5)); }
	inline String_t* get_TrueString_5() const { return ___TrueString_5; }
	inline String_t** get_address_of_TrueString_5() { return &___TrueString_5; }
	inline void set_TrueString_5(String_t* value)
	{
		___TrueString_5 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___TrueString_5), (void*)value);
	}

	inline static int32_t get_offset_of_FalseString_6() { return static_cast<int32_t>(offsetof(Boolean_tB53F6830F670160873277339AA58F15CAED4399C_StaticFields, ___FalseString_6)); }
	inline String_t* get_FalseString_6() const { return ___FalseString_6; }
	inline String_t** get_address_of_FalseString_6() { return &___FalseString_6; }
	inline void set_FalseString_6(String_t* value)
	{
		___FalseString_6 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___FalseString_6), (void*)value);
	}
};


// System.Char
struct  Char_tBF22D9FC341BE970735250BB6FF1A4A92BBA58B9 
{
public:
	// System.Char System.Char::m_value
	Il2CppChar ___m_value_0;

public:
	inline static int32_t get_offset_of_m_value_0() { return static_cast<int32_t>(offsetof(Char_tBF22D9FC341BE970735250BB6FF1A4A92BBA58B9, ___m_value_0)); }
	inline Il2CppChar get_m_value_0() const { return ___m_value_0; }
	inline Il2CppChar* get_address_of_m_value_0() { return &___m_value_0; }
	inline void set_m_value_0(Il2CppChar value)
	{
		___m_value_0 = value;
	}
};

struct Char_tBF22D9FC341BE970735250BB6FF1A4A92BBA58B9_StaticFields
{
public:
	// System.Byte[] System.Char::categoryForLatin1
	ByteU5BU5D_tD06FDBE8142446525DF1C40351D523A228373821* ___categoryForLatin1_3;

public:
	inline static int32_t get_offset_of_categoryForLatin1_3() { return static_cast<int32_t>(offsetof(Char_tBF22D9FC341BE970735250BB6FF1A4A92BBA58B9_StaticFields, ___categoryForLatin1_3)); }
	inline ByteU5BU5D_tD06FDBE8142446525DF1C40351D523A228373821* get_categoryForLatin1_3() const { return ___categoryForLatin1_3; }
	inline ByteU5BU5D_tD06FDBE8142446525DF1C40351D523A228373821** get_address_of_categoryForLatin1_3() { return &___categoryForLatin1_3; }
	inline void set_categoryForLatin1_3(ByteU5BU5D_tD06FDBE8142446525DF1C40351D523A228373821* value)
	{
		___categoryForLatin1_3 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___categoryForLatin1_3), (void*)value);
	}
};


// System.Enum
struct  Enum_t2AF27C02B8653AE29442467390005ABC74D8F521  : public ValueType_t4D0C27076F7C36E76190FB3328E232BCB1CD1FFF
{
public:

public:
};

struct Enum_t2AF27C02B8653AE29442467390005ABC74D8F521_StaticFields
{
public:
	// System.Char[] System.Enum::enumSeperatorCharArray
	CharU5BU5D_t4CC6ABF0AD71BEC97E3C2F1E9C5677E46D3A75C2* ___enumSeperatorCharArray_0;

public:
	inline static int32_t get_offset_of_enumSeperatorCharArray_0() { return static_cast<int32_t>(offsetof(Enum_t2AF27C02B8653AE29442467390005ABC74D8F521_StaticFields, ___enumSeperatorCharArray_0)); }
	inline CharU5BU5D_t4CC6ABF0AD71BEC97E3C2F1E9C5677E46D3A75C2* get_enumSeperatorCharArray_0() const { return ___enumSeperatorCharArray_0; }
	inline CharU5BU5D_t4CC6ABF0AD71BEC97E3C2F1E9C5677E46D3A75C2** get_address_of_enumSeperatorCharArray_0() { return &___enumSeperatorCharArray_0; }
	inline void set_enumSeperatorCharArray_0(CharU5BU5D_t4CC6ABF0AD71BEC97E3C2F1E9C5677E46D3A75C2* value)
	{
		___enumSeperatorCharArray_0 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___enumSeperatorCharArray_0), (void*)value);
	}
};

// Native definition for P/Invoke marshalling of System.Enum
struct Enum_t2AF27C02B8653AE29442467390005ABC74D8F521_marshaled_pinvoke
{
};
// Native definition for COM marshalling of System.Enum
struct Enum_t2AF27C02B8653AE29442467390005ABC74D8F521_marshaled_com
{
};

// System.Int32
struct  Int32_t585191389E07734F19F3156FF88FB3EF4800D102 
{
public:
	// System.Int32 System.Int32::m_value
	int32_t ___m_value_0;

public:
	inline static int32_t get_offset_of_m_value_0() { return static_cast<int32_t>(offsetof(Int32_t585191389E07734F19F3156FF88FB3EF4800D102, ___m_value_0)); }
	inline int32_t get_m_value_0() const { return ___m_value_0; }
	inline int32_t* get_address_of_m_value_0() { return &___m_value_0; }
	inline void set_m_value_0(int32_t value)
	{
		___m_value_0 = value;
	}
};


// System.IntPtr
struct  IntPtr_t 
{
public:
	// System.Void* System.IntPtr::m_value
	void* ___m_value_0;

public:
	inline static int32_t get_offset_of_m_value_0() { return static_cast<int32_t>(offsetof(IntPtr_t, ___m_value_0)); }
	inline void* get_m_value_0() const { return ___m_value_0; }
	inline void** get_address_of_m_value_0() { return &___m_value_0; }
	inline void set_m_value_0(void* value)
	{
		___m_value_0 = value;
	}
};

struct IntPtr_t_StaticFields
{
public:
	// System.IntPtr System.IntPtr::Zero
	intptr_t ___Zero_1;

public:
	inline static int32_t get_offset_of_Zero_1() { return static_cast<int32_t>(offsetof(IntPtr_t_StaticFields, ___Zero_1)); }
	inline intptr_t get_Zero_1() const { return ___Zero_1; }
	inline intptr_t* get_address_of_Zero_1() { return &___Zero_1; }
	inline void set_Zero_1(intptr_t value)
	{
		___Zero_1 = value;
	}
};


// System.Single
struct  Single_tDDDA9169C4E4E308AC6D7A824F9B28DC82204AE1 
{
public:
	// System.Single System.Single::m_value
	float ___m_value_0;

public:
	inline static int32_t get_offset_of_m_value_0() { return static_cast<int32_t>(offsetof(Single_tDDDA9169C4E4E308AC6D7A824F9B28DC82204AE1, ___m_value_0)); }
	inline float get_m_value_0() const { return ___m_value_0; }
	inline float* get_address_of_m_value_0() { return &___m_value_0; }
	inline void set_m_value_0(float value)
	{
		___m_value_0 = value;
	}
};


// System.UInt32
struct  UInt32_t4980FA09003AFAAB5A6E361BA2748EA9A005709B 
{
public:
	// System.UInt32 System.UInt32::m_value
	uint32_t ___m_value_0;

public:
	inline static int32_t get_offset_of_m_value_0() { return static_cast<int32_t>(offsetof(UInt32_t4980FA09003AFAAB5A6E361BA2748EA9A005709B, ___m_value_0)); }
	inline uint32_t get_m_value_0() const { return ___m_value_0; }
	inline uint32_t* get_address_of_m_value_0() { return &___m_value_0; }
	inline void set_m_value_0(uint32_t value)
	{
		___m_value_0 = value;
	}
};


// System.UInt64
struct  UInt64_tA02DF3B59C8FC4A849BD207DA11038CC64E4CB4E 
{
public:
	// System.UInt64 System.UInt64::m_value
	uint64_t ___m_value_0;

public:
	inline static int32_t get_offset_of_m_value_0() { return static_cast<int32_t>(offsetof(UInt64_tA02DF3B59C8FC4A849BD207DA11038CC64E4CB4E, ___m_value_0)); }
	inline uint64_t get_m_value_0() const { return ___m_value_0; }
	inline uint64_t* get_address_of_m_value_0() { return &___m_value_0; }
	inline void set_m_value_0(uint64_t value)
	{
		___m_value_0 = value;
	}
};


// System.Void
struct  Void_t22962CB4C05B1D89B55A6E1139F0E87A90987017 
{
public:
	union
	{
		struct
		{
		};
		uint8_t Void_t22962CB4C05B1D89B55A6E1139F0E87A90987017__padding[1];
	};

public:
};


// UnityEngine.Mathf
struct  Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB 
{
public:
	union
	{
		struct
		{
		};
		uint8_t Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB__padding[1];
	};

public:
};

struct Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_StaticFields
{
public:
	// System.Single UnityEngine.Mathf::Epsilon
	float ___Epsilon_0;

public:
	inline static int32_t get_offset_of_Epsilon_0() { return static_cast<int32_t>(offsetof(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_StaticFields, ___Epsilon_0)); }
	inline float get_Epsilon_0() const { return ___Epsilon_0; }
	inline float* get_address_of_Epsilon_0() { return &___Epsilon_0; }
	inline void set_Epsilon_0(float value)
	{
		___Epsilon_0 = value;
	}
};


// UnityEngine.Quaternion
struct  Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 
{
public:
	// System.Single UnityEngine.Quaternion::x
	float ___x_0;
	// System.Single UnityEngine.Quaternion::y
	float ___y_1;
	// System.Single UnityEngine.Quaternion::z
	float ___z_2;
	// System.Single UnityEngine.Quaternion::w
	float ___w_3;

public:
	inline static int32_t get_offset_of_x_0() { return static_cast<int32_t>(offsetof(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357, ___x_0)); }
	inline float get_x_0() const { return ___x_0; }
	inline float* get_address_of_x_0() { return &___x_0; }
	inline void set_x_0(float value)
	{
		___x_0 = value;
	}

	inline static int32_t get_offset_of_y_1() { return static_cast<int32_t>(offsetof(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357, ___y_1)); }
	inline float get_y_1() const { return ___y_1; }
	inline float* get_address_of_y_1() { return &___y_1; }
	inline void set_y_1(float value)
	{
		___y_1 = value;
	}

	inline static int32_t get_offset_of_z_2() { return static_cast<int32_t>(offsetof(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357, ___z_2)); }
	inline float get_z_2() const { return ___z_2; }
	inline float* get_address_of_z_2() { return &___z_2; }
	inline void set_z_2(float value)
	{
		___z_2 = value;
	}

	inline static int32_t get_offset_of_w_3() { return static_cast<int32_t>(offsetof(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357, ___w_3)); }
	inline float get_w_3() const { return ___w_3; }
	inline float* get_address_of_w_3() { return &___w_3; }
	inline void set_w_3(float value)
	{
		___w_3 = value;
	}
};

struct Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_StaticFields
{
public:
	// UnityEngine.Quaternion UnityEngine.Quaternion::identityQuaternion
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___identityQuaternion_4;

public:
	inline static int32_t get_offset_of_identityQuaternion_4() { return static_cast<int32_t>(offsetof(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_StaticFields, ___identityQuaternion_4)); }
	inline Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  get_identityQuaternion_4() const { return ___identityQuaternion_4; }
	inline Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * get_address_of_identityQuaternion_4() { return &___identityQuaternion_4; }
	inline void set_identityQuaternion_4(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  value)
	{
		___identityQuaternion_4 = value;
	}
};


// UnityEngine.Vector2
struct  Vector2_tA85D2DD88578276CA8A8796756458277E72D073D 
{
public:
	// System.Single UnityEngine.Vector2::x
	float ___x_0;
	// System.Single UnityEngine.Vector2::y
	float ___y_1;

public:
	inline static int32_t get_offset_of_x_0() { return static_cast<int32_t>(offsetof(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D, ___x_0)); }
	inline float get_x_0() const { return ___x_0; }
	inline float* get_address_of_x_0() { return &___x_0; }
	inline void set_x_0(float value)
	{
		___x_0 = value;
	}

	inline static int32_t get_offset_of_y_1() { return static_cast<int32_t>(offsetof(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D, ___y_1)); }
	inline float get_y_1() const { return ___y_1; }
	inline float* get_address_of_y_1() { return &___y_1; }
	inline void set_y_1(float value)
	{
		___y_1 = value;
	}
};

struct Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_StaticFields
{
public:
	// UnityEngine.Vector2 UnityEngine.Vector2::zeroVector
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___zeroVector_2;
	// UnityEngine.Vector2 UnityEngine.Vector2::oneVector
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___oneVector_3;
	// UnityEngine.Vector2 UnityEngine.Vector2::upVector
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___upVector_4;
	// UnityEngine.Vector2 UnityEngine.Vector2::downVector
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___downVector_5;
	// UnityEngine.Vector2 UnityEngine.Vector2::leftVector
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___leftVector_6;
	// UnityEngine.Vector2 UnityEngine.Vector2::rightVector
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___rightVector_7;
	// UnityEngine.Vector2 UnityEngine.Vector2::positiveInfinityVector
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___positiveInfinityVector_8;
	// UnityEngine.Vector2 UnityEngine.Vector2::negativeInfinityVector
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___negativeInfinityVector_9;

public:
	inline static int32_t get_offset_of_zeroVector_2() { return static_cast<int32_t>(offsetof(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_StaticFields, ___zeroVector_2)); }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  get_zeroVector_2() const { return ___zeroVector_2; }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * get_address_of_zeroVector_2() { return &___zeroVector_2; }
	inline void set_zeroVector_2(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  value)
	{
		___zeroVector_2 = value;
	}

	inline static int32_t get_offset_of_oneVector_3() { return static_cast<int32_t>(offsetof(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_StaticFields, ___oneVector_3)); }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  get_oneVector_3() const { return ___oneVector_3; }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * get_address_of_oneVector_3() { return &___oneVector_3; }
	inline void set_oneVector_3(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  value)
	{
		___oneVector_3 = value;
	}

	inline static int32_t get_offset_of_upVector_4() { return static_cast<int32_t>(offsetof(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_StaticFields, ___upVector_4)); }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  get_upVector_4() const { return ___upVector_4; }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * get_address_of_upVector_4() { return &___upVector_4; }
	inline void set_upVector_4(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  value)
	{
		___upVector_4 = value;
	}

	inline static int32_t get_offset_of_downVector_5() { return static_cast<int32_t>(offsetof(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_StaticFields, ___downVector_5)); }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  get_downVector_5() const { return ___downVector_5; }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * get_address_of_downVector_5() { return &___downVector_5; }
	inline void set_downVector_5(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  value)
	{
		___downVector_5 = value;
	}

	inline static int32_t get_offset_of_leftVector_6() { return static_cast<int32_t>(offsetof(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_StaticFields, ___leftVector_6)); }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  get_leftVector_6() const { return ___leftVector_6; }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * get_address_of_leftVector_6() { return &___leftVector_6; }
	inline void set_leftVector_6(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  value)
	{
		___leftVector_6 = value;
	}

	inline static int32_t get_offset_of_rightVector_7() { return static_cast<int32_t>(offsetof(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_StaticFields, ___rightVector_7)); }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  get_rightVector_7() const { return ___rightVector_7; }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * get_address_of_rightVector_7() { return &___rightVector_7; }
	inline void set_rightVector_7(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  value)
	{
		___rightVector_7 = value;
	}

	inline static int32_t get_offset_of_positiveInfinityVector_8() { return static_cast<int32_t>(offsetof(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_StaticFields, ___positiveInfinityVector_8)); }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  get_positiveInfinityVector_8() const { return ___positiveInfinityVector_8; }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * get_address_of_positiveInfinityVector_8() { return &___positiveInfinityVector_8; }
	inline void set_positiveInfinityVector_8(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  value)
	{
		___positiveInfinityVector_8 = value;
	}

	inline static int32_t get_offset_of_negativeInfinityVector_9() { return static_cast<int32_t>(offsetof(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_StaticFields, ___negativeInfinityVector_9)); }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  get_negativeInfinityVector_9() const { return ___negativeInfinityVector_9; }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * get_address_of_negativeInfinityVector_9() { return &___negativeInfinityVector_9; }
	inline void set_negativeInfinityVector_9(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  value)
	{
		___negativeInfinityVector_9 = value;
	}
};


// UnityEngine.Vector3
struct  Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 
{
public:
	// System.Single UnityEngine.Vector3::x
	float ___x_2;
	// System.Single UnityEngine.Vector3::y
	float ___y_3;
	// System.Single UnityEngine.Vector3::z
	float ___z_4;

public:
	inline static int32_t get_offset_of_x_2() { return static_cast<int32_t>(offsetof(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720, ___x_2)); }
	inline float get_x_2() const { return ___x_2; }
	inline float* get_address_of_x_2() { return &___x_2; }
	inline void set_x_2(float value)
	{
		___x_2 = value;
	}

	inline static int32_t get_offset_of_y_3() { return static_cast<int32_t>(offsetof(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720, ___y_3)); }
	inline float get_y_3() const { return ___y_3; }
	inline float* get_address_of_y_3() { return &___y_3; }
	inline void set_y_3(float value)
	{
		___y_3 = value;
	}

	inline static int32_t get_offset_of_z_4() { return static_cast<int32_t>(offsetof(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720, ___z_4)); }
	inline float get_z_4() const { return ___z_4; }
	inline float* get_address_of_z_4() { return &___z_4; }
	inline void set_z_4(float value)
	{
		___z_4 = value;
	}
};

struct Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_StaticFields
{
public:
	// UnityEngine.Vector3 UnityEngine.Vector3::zeroVector
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___zeroVector_5;
	// UnityEngine.Vector3 UnityEngine.Vector3::oneVector
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___oneVector_6;
	// UnityEngine.Vector3 UnityEngine.Vector3::upVector
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___upVector_7;
	// UnityEngine.Vector3 UnityEngine.Vector3::downVector
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___downVector_8;
	// UnityEngine.Vector3 UnityEngine.Vector3::leftVector
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___leftVector_9;
	// UnityEngine.Vector3 UnityEngine.Vector3::rightVector
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___rightVector_10;
	// UnityEngine.Vector3 UnityEngine.Vector3::forwardVector
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___forwardVector_11;
	// UnityEngine.Vector3 UnityEngine.Vector3::backVector
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___backVector_12;
	// UnityEngine.Vector3 UnityEngine.Vector3::positiveInfinityVector
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___positiveInfinityVector_13;
	// UnityEngine.Vector3 UnityEngine.Vector3::negativeInfinityVector
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___negativeInfinityVector_14;

public:
	inline static int32_t get_offset_of_zeroVector_5() { return static_cast<int32_t>(offsetof(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_StaticFields, ___zeroVector_5)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_zeroVector_5() const { return ___zeroVector_5; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_zeroVector_5() { return &___zeroVector_5; }
	inline void set_zeroVector_5(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___zeroVector_5 = value;
	}

	inline static int32_t get_offset_of_oneVector_6() { return static_cast<int32_t>(offsetof(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_StaticFields, ___oneVector_6)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_oneVector_6() const { return ___oneVector_6; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_oneVector_6() { return &___oneVector_6; }
	inline void set_oneVector_6(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___oneVector_6 = value;
	}

	inline static int32_t get_offset_of_upVector_7() { return static_cast<int32_t>(offsetof(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_StaticFields, ___upVector_7)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_upVector_7() const { return ___upVector_7; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_upVector_7() { return &___upVector_7; }
	inline void set_upVector_7(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___upVector_7 = value;
	}

	inline static int32_t get_offset_of_downVector_8() { return static_cast<int32_t>(offsetof(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_StaticFields, ___downVector_8)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_downVector_8() const { return ___downVector_8; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_downVector_8() { return &___downVector_8; }
	inline void set_downVector_8(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___downVector_8 = value;
	}

	inline static int32_t get_offset_of_leftVector_9() { return static_cast<int32_t>(offsetof(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_StaticFields, ___leftVector_9)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_leftVector_9() const { return ___leftVector_9; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_leftVector_9() { return &___leftVector_9; }
	inline void set_leftVector_9(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___leftVector_9 = value;
	}

	inline static int32_t get_offset_of_rightVector_10() { return static_cast<int32_t>(offsetof(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_StaticFields, ___rightVector_10)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_rightVector_10() const { return ___rightVector_10; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_rightVector_10() { return &___rightVector_10; }
	inline void set_rightVector_10(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___rightVector_10 = value;
	}

	inline static int32_t get_offset_of_forwardVector_11() { return static_cast<int32_t>(offsetof(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_StaticFields, ___forwardVector_11)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_forwardVector_11() const { return ___forwardVector_11; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_forwardVector_11() { return &___forwardVector_11; }
	inline void set_forwardVector_11(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___forwardVector_11 = value;
	}

	inline static int32_t get_offset_of_backVector_12() { return static_cast<int32_t>(offsetof(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_StaticFields, ___backVector_12)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_backVector_12() const { return ___backVector_12; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_backVector_12() { return &___backVector_12; }
	inline void set_backVector_12(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___backVector_12 = value;
	}

	inline static int32_t get_offset_of_positiveInfinityVector_13() { return static_cast<int32_t>(offsetof(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_StaticFields, ___positiveInfinityVector_13)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_positiveInfinityVector_13() const { return ___positiveInfinityVector_13; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_positiveInfinityVector_13() { return &___positiveInfinityVector_13; }
	inline void set_positiveInfinityVector_13(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___positiveInfinityVector_13 = value;
	}

	inline static int32_t get_offset_of_negativeInfinityVector_14() { return static_cast<int32_t>(offsetof(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_StaticFields, ___negativeInfinityVector_14)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_negativeInfinityVector_14() const { return ___negativeInfinityVector_14; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_negativeInfinityVector_14() { return &___negativeInfinityVector_14; }
	inline void set_negativeInfinityVector_14(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___negativeInfinityVector_14 = value;
	}
};


// Valve.VR.HmdMatrix34_t
struct  HmdMatrix34_t_t69CC0A858D1EBF95773929B6228EE953DE612669 
{
public:
	// System.Single Valve.VR.HmdMatrix34_t::m0
	float ___m0_0;
	// System.Single Valve.VR.HmdMatrix34_t::m1
	float ___m1_1;
	// System.Single Valve.VR.HmdMatrix34_t::m2
	float ___m2_2;
	// System.Single Valve.VR.HmdMatrix34_t::m3
	float ___m3_3;
	// System.Single Valve.VR.HmdMatrix34_t::m4
	float ___m4_4;
	// System.Single Valve.VR.HmdMatrix34_t::m5
	float ___m5_5;
	// System.Single Valve.VR.HmdMatrix34_t::m6
	float ___m6_6;
	// System.Single Valve.VR.HmdMatrix34_t::m7
	float ___m7_7;
	// System.Single Valve.VR.HmdMatrix34_t::m8
	float ___m8_8;
	// System.Single Valve.VR.HmdMatrix34_t::m9
	float ___m9_9;
	// System.Single Valve.VR.HmdMatrix34_t::m10
	float ___m10_10;
	// System.Single Valve.VR.HmdMatrix34_t::m11
	float ___m11_11;

public:
	inline static int32_t get_offset_of_m0_0() { return static_cast<int32_t>(offsetof(HmdMatrix34_t_t69CC0A858D1EBF95773929B6228EE953DE612669, ___m0_0)); }
	inline float get_m0_0() const { return ___m0_0; }
	inline float* get_address_of_m0_0() { return &___m0_0; }
	inline void set_m0_0(float value)
	{
		___m0_0 = value;
	}

	inline static int32_t get_offset_of_m1_1() { return static_cast<int32_t>(offsetof(HmdMatrix34_t_t69CC0A858D1EBF95773929B6228EE953DE612669, ___m1_1)); }
	inline float get_m1_1() const { return ___m1_1; }
	inline float* get_address_of_m1_1() { return &___m1_1; }
	inline void set_m1_1(float value)
	{
		___m1_1 = value;
	}

	inline static int32_t get_offset_of_m2_2() { return static_cast<int32_t>(offsetof(HmdMatrix34_t_t69CC0A858D1EBF95773929B6228EE953DE612669, ___m2_2)); }
	inline float get_m2_2() const { return ___m2_2; }
	inline float* get_address_of_m2_2() { return &___m2_2; }
	inline void set_m2_2(float value)
	{
		___m2_2 = value;
	}

	inline static int32_t get_offset_of_m3_3() { return static_cast<int32_t>(offsetof(HmdMatrix34_t_t69CC0A858D1EBF95773929B6228EE953DE612669, ___m3_3)); }
	inline float get_m3_3() const { return ___m3_3; }
	inline float* get_address_of_m3_3() { return &___m3_3; }
	inline void set_m3_3(float value)
	{
		___m3_3 = value;
	}

	inline static int32_t get_offset_of_m4_4() { return static_cast<int32_t>(offsetof(HmdMatrix34_t_t69CC0A858D1EBF95773929B6228EE953DE612669, ___m4_4)); }
	inline float get_m4_4() const { return ___m4_4; }
	inline float* get_address_of_m4_4() { return &___m4_4; }
	inline void set_m4_4(float value)
	{
		___m4_4 = value;
	}

	inline static int32_t get_offset_of_m5_5() { return static_cast<int32_t>(offsetof(HmdMatrix34_t_t69CC0A858D1EBF95773929B6228EE953DE612669, ___m5_5)); }
	inline float get_m5_5() const { return ___m5_5; }
	inline float* get_address_of_m5_5() { return &___m5_5; }
	inline void set_m5_5(float value)
	{
		___m5_5 = value;
	}

	inline static int32_t get_offset_of_m6_6() { return static_cast<int32_t>(offsetof(HmdMatrix34_t_t69CC0A858D1EBF95773929B6228EE953DE612669, ___m6_6)); }
	inline float get_m6_6() const { return ___m6_6; }
	inline float* get_address_of_m6_6() { return &___m6_6; }
	inline void set_m6_6(float value)
	{
		___m6_6 = value;
	}

	inline static int32_t get_offset_of_m7_7() { return static_cast<int32_t>(offsetof(HmdMatrix34_t_t69CC0A858D1EBF95773929B6228EE953DE612669, ___m7_7)); }
	inline float get_m7_7() const { return ___m7_7; }
	inline float* get_address_of_m7_7() { return &___m7_7; }
	inline void set_m7_7(float value)
	{
		___m7_7 = value;
	}

	inline static int32_t get_offset_of_m8_8() { return static_cast<int32_t>(offsetof(HmdMatrix34_t_t69CC0A858D1EBF95773929B6228EE953DE612669, ___m8_8)); }
	inline float get_m8_8() const { return ___m8_8; }
	inline float* get_address_of_m8_8() { return &___m8_8; }
	inline void set_m8_8(float value)
	{
		___m8_8 = value;
	}

	inline static int32_t get_offset_of_m9_9() { return static_cast<int32_t>(offsetof(HmdMatrix34_t_t69CC0A858D1EBF95773929B6228EE953DE612669, ___m9_9)); }
	inline float get_m9_9() const { return ___m9_9; }
	inline float* get_address_of_m9_9() { return &___m9_9; }
	inline void set_m9_9(float value)
	{
		___m9_9 = value;
	}

	inline static int32_t get_offset_of_m10_10() { return static_cast<int32_t>(offsetof(HmdMatrix34_t_t69CC0A858D1EBF95773929B6228EE953DE612669, ___m10_10)); }
	inline float get_m10_10() const { return ___m10_10; }
	inline float* get_address_of_m10_10() { return &___m10_10; }
	inline void set_m10_10(float value)
	{
		___m10_10 = value;
	}

	inline static int32_t get_offset_of_m11_11() { return static_cast<int32_t>(offsetof(HmdMatrix34_t_t69CC0A858D1EBF95773929B6228EE953DE612669, ___m11_11)); }
	inline float get_m11_11() const { return ___m11_11; }
	inline float* get_address_of_m11_11() { return &___m11_11; }
	inline void set_m11_11(float value)
	{
		___m11_11 = value;
	}
};


// Valve.VR.HmdQuaternionf_t
struct  HmdQuaternionf_t_t83752025A54692367798FA15BDC82F30F4D97C11 
{
public:
	// System.Single Valve.VR.HmdQuaternionf_t::w
	float ___w_0;
	// System.Single Valve.VR.HmdQuaternionf_t::x
	float ___x_1;
	// System.Single Valve.VR.HmdQuaternionf_t::y
	float ___y_2;
	// System.Single Valve.VR.HmdQuaternionf_t::z
	float ___z_3;

public:
	inline static int32_t get_offset_of_w_0() { return static_cast<int32_t>(offsetof(HmdQuaternionf_t_t83752025A54692367798FA15BDC82F30F4D97C11, ___w_0)); }
	inline float get_w_0() const { return ___w_0; }
	inline float* get_address_of_w_0() { return &___w_0; }
	inline void set_w_0(float value)
	{
		___w_0 = value;
	}

	inline static int32_t get_offset_of_x_1() { return static_cast<int32_t>(offsetof(HmdQuaternionf_t_t83752025A54692367798FA15BDC82F30F4D97C11, ___x_1)); }
	inline float get_x_1() const { return ___x_1; }
	inline float* get_address_of_x_1() { return &___x_1; }
	inline void set_x_1(float value)
	{
		___x_1 = value;
	}

	inline static int32_t get_offset_of_y_2() { return static_cast<int32_t>(offsetof(HmdQuaternionf_t_t83752025A54692367798FA15BDC82F30F4D97C11, ___y_2)); }
	inline float get_y_2() const { return ___y_2; }
	inline float* get_address_of_y_2() { return &___y_2; }
	inline void set_y_2(float value)
	{
		___y_2 = value;
	}

	inline static int32_t get_offset_of_z_3() { return static_cast<int32_t>(offsetof(HmdQuaternionf_t_t83752025A54692367798FA15BDC82F30F4D97C11, ___z_3)); }
	inline float get_z_3() const { return ___z_3; }
	inline float* get_address_of_z_3() { return &___z_3; }
	inline void set_z_3(float value)
	{
		___z_3 = value;
	}
};


// Valve.VR.HmdVector3_t
struct  HmdVector3_t_t62AE508B69C04959DCD5633927536E28C2E6113A 
{
public:
	// System.Single Valve.VR.HmdVector3_t::v0
	float ___v0_0;
	// System.Single Valve.VR.HmdVector3_t::v1
	float ___v1_1;
	// System.Single Valve.VR.HmdVector3_t::v2
	float ___v2_2;

public:
	inline static int32_t get_offset_of_v0_0() { return static_cast<int32_t>(offsetof(HmdVector3_t_t62AE508B69C04959DCD5633927536E28C2E6113A, ___v0_0)); }
	inline float get_v0_0() const { return ___v0_0; }
	inline float* get_address_of_v0_0() { return &___v0_0; }
	inline void set_v0_0(float value)
	{
		___v0_0 = value;
	}

	inline static int32_t get_offset_of_v1_1() { return static_cast<int32_t>(offsetof(HmdVector3_t_t62AE508B69C04959DCD5633927536E28C2E6113A, ___v1_1)); }
	inline float get_v1_1() const { return ___v1_1; }
	inline float* get_address_of_v1_1() { return &___v1_1; }
	inline void set_v1_1(float value)
	{
		___v1_1 = value;
	}

	inline static int32_t get_offset_of_v2_2() { return static_cast<int32_t>(offsetof(HmdVector3_t_t62AE508B69C04959DCD5633927536E28C2E6113A, ___v2_2)); }
	inline float get_v2_2() const { return ___v2_2; }
	inline float* get_address_of_v2_2() { return &___v2_2; }
	inline void set_v2_2(float value)
	{
		___v2_2 = value;
	}
};


// Valve.VR.HmdVector4_t
struct  HmdVector4_t_t97F0B9E146F0A0E38B243B3317E4B1095A8DD0C9 
{
public:
	// System.Single Valve.VR.HmdVector4_t::v0
	float ___v0_0;
	// System.Single Valve.VR.HmdVector4_t::v1
	float ___v1_1;
	// System.Single Valve.VR.HmdVector4_t::v2
	float ___v2_2;
	// System.Single Valve.VR.HmdVector4_t::v3
	float ___v3_3;

public:
	inline static int32_t get_offset_of_v0_0() { return static_cast<int32_t>(offsetof(HmdVector4_t_t97F0B9E146F0A0E38B243B3317E4B1095A8DD0C9, ___v0_0)); }
	inline float get_v0_0() const { return ___v0_0; }
	inline float* get_address_of_v0_0() { return &___v0_0; }
	inline void set_v0_0(float value)
	{
		___v0_0 = value;
	}

	inline static int32_t get_offset_of_v1_1() { return static_cast<int32_t>(offsetof(HmdVector4_t_t97F0B9E146F0A0E38B243B3317E4B1095A8DD0C9, ___v1_1)); }
	inline float get_v1_1() const { return ___v1_1; }
	inline float* get_address_of_v1_1() { return &___v1_1; }
	inline void set_v1_1(float value)
	{
		___v1_1 = value;
	}

	inline static int32_t get_offset_of_v2_2() { return static_cast<int32_t>(offsetof(HmdVector4_t_t97F0B9E146F0A0E38B243B3317E4B1095A8DD0C9, ___v2_2)); }
	inline float get_v2_2() const { return ___v2_2; }
	inline float* get_address_of_v2_2() { return &___v2_2; }
	inline void set_v2_2(float value)
	{
		___v2_2 = value;
	}

	inline static int32_t get_offset_of_v3_3() { return static_cast<int32_t>(offsetof(HmdVector4_t_t97F0B9E146F0A0E38B243B3317E4B1095A8DD0C9, ___v3_3)); }
	inline float get_v3_3() const { return ___v3_3; }
	inline float* get_address_of_v3_3() { return &___v3_3; }
	inline void set_v3_3(float value)
	{
		___v3_3 = value;
	}
};


// Valve.VR.IVRInput
struct  IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78 
{
public:
	// Valve.VR.IVRInput__SetActionManifestPath Valve.VR.IVRInput::SetActionManifestPath
	_SetActionManifestPath_tCC8157D33535562FA6C3DDCA5CBC0F82B51306FE * ___SetActionManifestPath_0;
	// Valve.VR.IVRInput__GetActionSetHandle Valve.VR.IVRInput::GetActionSetHandle
	_GetActionSetHandle_tDCCC10117A32D6F523EED20F9C35C8F104A6DE56 * ___GetActionSetHandle_1;
	// Valve.VR.IVRInput__GetActionHandle Valve.VR.IVRInput::GetActionHandle
	_GetActionHandle_tAA6FC70C31E52EB9899414C5DF8666A660D73988 * ___GetActionHandle_2;
	// Valve.VR.IVRInput__GetInputSourceHandle Valve.VR.IVRInput::GetInputSourceHandle
	_GetInputSourceHandle_tAB5E42F59BE5F64E4D025C405AD1DF589BE798EF * ___GetInputSourceHandle_3;
	// Valve.VR.IVRInput__UpdateActionState Valve.VR.IVRInput::UpdateActionState
	_UpdateActionState_t34A07E451D658BB88598E974A3A804775EE414C5 * ___UpdateActionState_4;
	// Valve.VR.IVRInput__GetDigitalActionData Valve.VR.IVRInput::GetDigitalActionData
	_GetDigitalActionData_tF308BA2153B8638CAD78903A8E4A6FF63A0AE5E8 * ___GetDigitalActionData_5;
	// Valve.VR.IVRInput__GetAnalogActionData Valve.VR.IVRInput::GetAnalogActionData
	_GetAnalogActionData_t6B38FFFF0181415420E9380BDCFC944C9D73D6CB * ___GetAnalogActionData_6;
	// Valve.VR.IVRInput__GetPoseActionDataRelativeToNow Valve.VR.IVRInput::GetPoseActionDataRelativeToNow
	_GetPoseActionDataRelativeToNow_t8ED7A8761F721F5713D809DB6B79BFDB91E01BB8 * ___GetPoseActionDataRelativeToNow_7;
	// Valve.VR.IVRInput__GetPoseActionDataForNextFrame Valve.VR.IVRInput::GetPoseActionDataForNextFrame
	_GetPoseActionDataForNextFrame_tAA10FE3259883E133F8F097728EED8DE994C157E * ___GetPoseActionDataForNextFrame_8;
	// Valve.VR.IVRInput__GetSkeletalActionData Valve.VR.IVRInput::GetSkeletalActionData
	_GetSkeletalActionData_t5F353A7DB921C384ACD71B83F4E7F83B8F957A1A * ___GetSkeletalActionData_9;
	// Valve.VR.IVRInput__GetDominantHand Valve.VR.IVRInput::GetDominantHand
	_GetDominantHand_tBA54323C6ADA02D432F6FB26A3AE1007002F5029 * ___GetDominantHand_10;
	// Valve.VR.IVRInput__SetDominantHand Valve.VR.IVRInput::SetDominantHand
	_SetDominantHand_t781C37553971079E806C986AF0571A5394BB608D * ___SetDominantHand_11;
	// Valve.VR.IVRInput__GetBoneCount Valve.VR.IVRInput::GetBoneCount
	_GetBoneCount_t6C3C3EFD4AAFFC3A51B471217CA56C6CDB85A8A1 * ___GetBoneCount_12;
	// Valve.VR.IVRInput__GetBoneHierarchy Valve.VR.IVRInput::GetBoneHierarchy
	_GetBoneHierarchy_t167DE2FE59F4348442E70AD40E9908D3396FE876 * ___GetBoneHierarchy_13;
	// Valve.VR.IVRInput__GetBoneName Valve.VR.IVRInput::GetBoneName
	_GetBoneName_t802A405B0C688F34E650358ED94EB5E83003B4FF * ___GetBoneName_14;
	// Valve.VR.IVRInput__GetSkeletalReferenceTransforms Valve.VR.IVRInput::GetSkeletalReferenceTransforms
	_GetSkeletalReferenceTransforms_tB13CA87584C074E43514FD286E673444A770C7F5 * ___GetSkeletalReferenceTransforms_15;
	// Valve.VR.IVRInput__GetSkeletalTrackingLevel Valve.VR.IVRInput::GetSkeletalTrackingLevel
	_GetSkeletalTrackingLevel_t20487D8EE1F4E97466D3362B812896DAC707DE93 * ___GetSkeletalTrackingLevel_16;
	// Valve.VR.IVRInput__GetSkeletalBoneData Valve.VR.IVRInput::GetSkeletalBoneData
	_GetSkeletalBoneData_tB6C26FFFE2DC1A4EBF7538C8B822BCF44FDE950A * ___GetSkeletalBoneData_17;
	// Valve.VR.IVRInput__GetSkeletalSummaryData Valve.VR.IVRInput::GetSkeletalSummaryData
	_GetSkeletalSummaryData_tDBD7B97D7AEB5C6023AB7500B7EFB7B46FC00822 * ___GetSkeletalSummaryData_18;
	// Valve.VR.IVRInput__GetSkeletalBoneDataCompressed Valve.VR.IVRInput::GetSkeletalBoneDataCompressed
	_GetSkeletalBoneDataCompressed_tE546DCB602D70AFE33D3988CA648F582BF4D795B * ___GetSkeletalBoneDataCompressed_19;
	// Valve.VR.IVRInput__DecompressSkeletalBoneData Valve.VR.IVRInput::DecompressSkeletalBoneData
	_DecompressSkeletalBoneData_t8A92BDC21C8090D2E2952E48A5925D4B8DD48277 * ___DecompressSkeletalBoneData_20;
	// Valve.VR.IVRInput__TriggerHapticVibrationAction Valve.VR.IVRInput::TriggerHapticVibrationAction
	_TriggerHapticVibrationAction_tD6966DC222C78E33A391603FA738554C337292C8 * ___TriggerHapticVibrationAction_21;
	// Valve.VR.IVRInput__GetActionOrigins Valve.VR.IVRInput::GetActionOrigins
	_GetActionOrigins_tE0D9FE805034861066738B53CD6ED5D774553C69 * ___GetActionOrigins_22;
	// Valve.VR.IVRInput__GetOriginLocalizedName Valve.VR.IVRInput::GetOriginLocalizedName
	_GetOriginLocalizedName_t3FDAF7E14C966B8922289564E4EDFD9FD2708E4F * ___GetOriginLocalizedName_23;
	// Valve.VR.IVRInput__GetOriginTrackedDeviceInfo Valve.VR.IVRInput::GetOriginTrackedDeviceInfo
	_GetOriginTrackedDeviceInfo_tCCCCE9FC46CC32CD3CEE514462A4D2AAB295BA4B * ___GetOriginTrackedDeviceInfo_24;
	// Valve.VR.IVRInput__GetActionBindingInfo Valve.VR.IVRInput::GetActionBindingInfo
	_GetActionBindingInfo_t888BA9460789EBC395139AB0DBBBA3089B2E0FC5 * ___GetActionBindingInfo_25;
	// Valve.VR.IVRInput__ShowActionOrigins Valve.VR.IVRInput::ShowActionOrigins
	_ShowActionOrigins_t2D44C15D7A1A68B48BD8A5718303C019CB82DE71 * ___ShowActionOrigins_26;
	// Valve.VR.IVRInput__ShowBindingsForActionSet Valve.VR.IVRInput::ShowBindingsForActionSet
	_ShowBindingsForActionSet_tE794CCA21EF1D46F19895A28146A79FA5B41BB2A * ___ShowBindingsForActionSet_27;
	// Valve.VR.IVRInput__GetComponentStateForBinding Valve.VR.IVRInput::GetComponentStateForBinding
	_GetComponentStateForBinding_t528D11F913578272C9159336F2B9473530BE99AA * ___GetComponentStateForBinding_28;
	// Valve.VR.IVRInput__IsUsingLegacyInput Valve.VR.IVRInput::IsUsingLegacyInput
	_IsUsingLegacyInput_t47530FACE216CEDA2B1629F03D1FE805B67664A7 * ___IsUsingLegacyInput_29;
	// Valve.VR.IVRInput__OpenBindingUI Valve.VR.IVRInput::OpenBindingUI
	_OpenBindingUI_t04252A1EDE97A953F55220A73E647A8DD9EA831F * ___OpenBindingUI_30;
	// Valve.VR.IVRInput__GetBindingVariant Valve.VR.IVRInput::GetBindingVariant
	_GetBindingVariant_t54394654ADF0C4DFE91EC183B932B47AD3AD9F96 * ___GetBindingVariant_31;

public:
	inline static int32_t get_offset_of_SetActionManifestPath_0() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___SetActionManifestPath_0)); }
	inline _SetActionManifestPath_tCC8157D33535562FA6C3DDCA5CBC0F82B51306FE * get_SetActionManifestPath_0() const { return ___SetActionManifestPath_0; }
	inline _SetActionManifestPath_tCC8157D33535562FA6C3DDCA5CBC0F82B51306FE ** get_address_of_SetActionManifestPath_0() { return &___SetActionManifestPath_0; }
	inline void set_SetActionManifestPath_0(_SetActionManifestPath_tCC8157D33535562FA6C3DDCA5CBC0F82B51306FE * value)
	{
		___SetActionManifestPath_0 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___SetActionManifestPath_0), (void*)value);
	}

	inline static int32_t get_offset_of_GetActionSetHandle_1() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___GetActionSetHandle_1)); }
	inline _GetActionSetHandle_tDCCC10117A32D6F523EED20F9C35C8F104A6DE56 * get_GetActionSetHandle_1() const { return ___GetActionSetHandle_1; }
	inline _GetActionSetHandle_tDCCC10117A32D6F523EED20F9C35C8F104A6DE56 ** get_address_of_GetActionSetHandle_1() { return &___GetActionSetHandle_1; }
	inline void set_GetActionSetHandle_1(_GetActionSetHandle_tDCCC10117A32D6F523EED20F9C35C8F104A6DE56 * value)
	{
		___GetActionSetHandle_1 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___GetActionSetHandle_1), (void*)value);
	}

	inline static int32_t get_offset_of_GetActionHandle_2() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___GetActionHandle_2)); }
	inline _GetActionHandle_tAA6FC70C31E52EB9899414C5DF8666A660D73988 * get_GetActionHandle_2() const { return ___GetActionHandle_2; }
	inline _GetActionHandle_tAA6FC70C31E52EB9899414C5DF8666A660D73988 ** get_address_of_GetActionHandle_2() { return &___GetActionHandle_2; }
	inline void set_GetActionHandle_2(_GetActionHandle_tAA6FC70C31E52EB9899414C5DF8666A660D73988 * value)
	{
		___GetActionHandle_2 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___GetActionHandle_2), (void*)value);
	}

	inline static int32_t get_offset_of_GetInputSourceHandle_3() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___GetInputSourceHandle_3)); }
	inline _GetInputSourceHandle_tAB5E42F59BE5F64E4D025C405AD1DF589BE798EF * get_GetInputSourceHandle_3() const { return ___GetInputSourceHandle_3; }
	inline _GetInputSourceHandle_tAB5E42F59BE5F64E4D025C405AD1DF589BE798EF ** get_address_of_GetInputSourceHandle_3() { return &___GetInputSourceHandle_3; }
	inline void set_GetInputSourceHandle_3(_GetInputSourceHandle_tAB5E42F59BE5F64E4D025C405AD1DF589BE798EF * value)
	{
		___GetInputSourceHandle_3 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___GetInputSourceHandle_3), (void*)value);
	}

	inline static int32_t get_offset_of_UpdateActionState_4() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___UpdateActionState_4)); }
	inline _UpdateActionState_t34A07E451D658BB88598E974A3A804775EE414C5 * get_UpdateActionState_4() const { return ___UpdateActionState_4; }
	inline _UpdateActionState_t34A07E451D658BB88598E974A3A804775EE414C5 ** get_address_of_UpdateActionState_4() { return &___UpdateActionState_4; }
	inline void set_UpdateActionState_4(_UpdateActionState_t34A07E451D658BB88598E974A3A804775EE414C5 * value)
	{
		___UpdateActionState_4 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___UpdateActionState_4), (void*)value);
	}

	inline static int32_t get_offset_of_GetDigitalActionData_5() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___GetDigitalActionData_5)); }
	inline _GetDigitalActionData_tF308BA2153B8638CAD78903A8E4A6FF63A0AE5E8 * get_GetDigitalActionData_5() const { return ___GetDigitalActionData_5; }
	inline _GetDigitalActionData_tF308BA2153B8638CAD78903A8E4A6FF63A0AE5E8 ** get_address_of_GetDigitalActionData_5() { return &___GetDigitalActionData_5; }
	inline void set_GetDigitalActionData_5(_GetDigitalActionData_tF308BA2153B8638CAD78903A8E4A6FF63A0AE5E8 * value)
	{
		___GetDigitalActionData_5 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___GetDigitalActionData_5), (void*)value);
	}

	inline static int32_t get_offset_of_GetAnalogActionData_6() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___GetAnalogActionData_6)); }
	inline _GetAnalogActionData_t6B38FFFF0181415420E9380BDCFC944C9D73D6CB * get_GetAnalogActionData_6() const { return ___GetAnalogActionData_6; }
	inline _GetAnalogActionData_t6B38FFFF0181415420E9380BDCFC944C9D73D6CB ** get_address_of_GetAnalogActionData_6() { return &___GetAnalogActionData_6; }
	inline void set_GetAnalogActionData_6(_GetAnalogActionData_t6B38FFFF0181415420E9380BDCFC944C9D73D6CB * value)
	{
		___GetAnalogActionData_6 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___GetAnalogActionData_6), (void*)value);
	}

	inline static int32_t get_offset_of_GetPoseActionDataRelativeToNow_7() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___GetPoseActionDataRelativeToNow_7)); }
	inline _GetPoseActionDataRelativeToNow_t8ED7A8761F721F5713D809DB6B79BFDB91E01BB8 * get_GetPoseActionDataRelativeToNow_7() const { return ___GetPoseActionDataRelativeToNow_7; }
	inline _GetPoseActionDataRelativeToNow_t8ED7A8761F721F5713D809DB6B79BFDB91E01BB8 ** get_address_of_GetPoseActionDataRelativeToNow_7() { return &___GetPoseActionDataRelativeToNow_7; }
	inline void set_GetPoseActionDataRelativeToNow_7(_GetPoseActionDataRelativeToNow_t8ED7A8761F721F5713D809DB6B79BFDB91E01BB8 * value)
	{
		___GetPoseActionDataRelativeToNow_7 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___GetPoseActionDataRelativeToNow_7), (void*)value);
	}

	inline static int32_t get_offset_of_GetPoseActionDataForNextFrame_8() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___GetPoseActionDataForNextFrame_8)); }
	inline _GetPoseActionDataForNextFrame_tAA10FE3259883E133F8F097728EED8DE994C157E * get_GetPoseActionDataForNextFrame_8() const { return ___GetPoseActionDataForNextFrame_8; }
	inline _GetPoseActionDataForNextFrame_tAA10FE3259883E133F8F097728EED8DE994C157E ** get_address_of_GetPoseActionDataForNextFrame_8() { return &___GetPoseActionDataForNextFrame_8; }
	inline void set_GetPoseActionDataForNextFrame_8(_GetPoseActionDataForNextFrame_tAA10FE3259883E133F8F097728EED8DE994C157E * value)
	{
		___GetPoseActionDataForNextFrame_8 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___GetPoseActionDataForNextFrame_8), (void*)value);
	}

	inline static int32_t get_offset_of_GetSkeletalActionData_9() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___GetSkeletalActionData_9)); }
	inline _GetSkeletalActionData_t5F353A7DB921C384ACD71B83F4E7F83B8F957A1A * get_GetSkeletalActionData_9() const { return ___GetSkeletalActionData_9; }
	inline _GetSkeletalActionData_t5F353A7DB921C384ACD71B83F4E7F83B8F957A1A ** get_address_of_GetSkeletalActionData_9() { return &___GetSkeletalActionData_9; }
	inline void set_GetSkeletalActionData_9(_GetSkeletalActionData_t5F353A7DB921C384ACD71B83F4E7F83B8F957A1A * value)
	{
		___GetSkeletalActionData_9 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___GetSkeletalActionData_9), (void*)value);
	}

	inline static int32_t get_offset_of_GetDominantHand_10() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___GetDominantHand_10)); }
	inline _GetDominantHand_tBA54323C6ADA02D432F6FB26A3AE1007002F5029 * get_GetDominantHand_10() const { return ___GetDominantHand_10; }
	inline _GetDominantHand_tBA54323C6ADA02D432F6FB26A3AE1007002F5029 ** get_address_of_GetDominantHand_10() { return &___GetDominantHand_10; }
	inline void set_GetDominantHand_10(_GetDominantHand_tBA54323C6ADA02D432F6FB26A3AE1007002F5029 * value)
	{
		___GetDominantHand_10 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___GetDominantHand_10), (void*)value);
	}

	inline static int32_t get_offset_of_SetDominantHand_11() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___SetDominantHand_11)); }
	inline _SetDominantHand_t781C37553971079E806C986AF0571A5394BB608D * get_SetDominantHand_11() const { return ___SetDominantHand_11; }
	inline _SetDominantHand_t781C37553971079E806C986AF0571A5394BB608D ** get_address_of_SetDominantHand_11() { return &___SetDominantHand_11; }
	inline void set_SetDominantHand_11(_SetDominantHand_t781C37553971079E806C986AF0571A5394BB608D * value)
	{
		___SetDominantHand_11 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___SetDominantHand_11), (void*)value);
	}

	inline static int32_t get_offset_of_GetBoneCount_12() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___GetBoneCount_12)); }
	inline _GetBoneCount_t6C3C3EFD4AAFFC3A51B471217CA56C6CDB85A8A1 * get_GetBoneCount_12() const { return ___GetBoneCount_12; }
	inline _GetBoneCount_t6C3C3EFD4AAFFC3A51B471217CA56C6CDB85A8A1 ** get_address_of_GetBoneCount_12() { return &___GetBoneCount_12; }
	inline void set_GetBoneCount_12(_GetBoneCount_t6C3C3EFD4AAFFC3A51B471217CA56C6CDB85A8A1 * value)
	{
		___GetBoneCount_12 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___GetBoneCount_12), (void*)value);
	}

	inline static int32_t get_offset_of_GetBoneHierarchy_13() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___GetBoneHierarchy_13)); }
	inline _GetBoneHierarchy_t167DE2FE59F4348442E70AD40E9908D3396FE876 * get_GetBoneHierarchy_13() const { return ___GetBoneHierarchy_13; }
	inline _GetBoneHierarchy_t167DE2FE59F4348442E70AD40E9908D3396FE876 ** get_address_of_GetBoneHierarchy_13() { return &___GetBoneHierarchy_13; }
	inline void set_GetBoneHierarchy_13(_GetBoneHierarchy_t167DE2FE59F4348442E70AD40E9908D3396FE876 * value)
	{
		___GetBoneHierarchy_13 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___GetBoneHierarchy_13), (void*)value);
	}

	inline static int32_t get_offset_of_GetBoneName_14() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___GetBoneName_14)); }
	inline _GetBoneName_t802A405B0C688F34E650358ED94EB5E83003B4FF * get_GetBoneName_14() const { return ___GetBoneName_14; }
	inline _GetBoneName_t802A405B0C688F34E650358ED94EB5E83003B4FF ** get_address_of_GetBoneName_14() { return &___GetBoneName_14; }
	inline void set_GetBoneName_14(_GetBoneName_t802A405B0C688F34E650358ED94EB5E83003B4FF * value)
	{
		___GetBoneName_14 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___GetBoneName_14), (void*)value);
	}

	inline static int32_t get_offset_of_GetSkeletalReferenceTransforms_15() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___GetSkeletalReferenceTransforms_15)); }
	inline _GetSkeletalReferenceTransforms_tB13CA87584C074E43514FD286E673444A770C7F5 * get_GetSkeletalReferenceTransforms_15() const { return ___GetSkeletalReferenceTransforms_15; }
	inline _GetSkeletalReferenceTransforms_tB13CA87584C074E43514FD286E673444A770C7F5 ** get_address_of_GetSkeletalReferenceTransforms_15() { return &___GetSkeletalReferenceTransforms_15; }
	inline void set_GetSkeletalReferenceTransforms_15(_GetSkeletalReferenceTransforms_tB13CA87584C074E43514FD286E673444A770C7F5 * value)
	{
		___GetSkeletalReferenceTransforms_15 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___GetSkeletalReferenceTransforms_15), (void*)value);
	}

	inline static int32_t get_offset_of_GetSkeletalTrackingLevel_16() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___GetSkeletalTrackingLevel_16)); }
	inline _GetSkeletalTrackingLevel_t20487D8EE1F4E97466D3362B812896DAC707DE93 * get_GetSkeletalTrackingLevel_16() const { return ___GetSkeletalTrackingLevel_16; }
	inline _GetSkeletalTrackingLevel_t20487D8EE1F4E97466D3362B812896DAC707DE93 ** get_address_of_GetSkeletalTrackingLevel_16() { return &___GetSkeletalTrackingLevel_16; }
	inline void set_GetSkeletalTrackingLevel_16(_GetSkeletalTrackingLevel_t20487D8EE1F4E97466D3362B812896DAC707DE93 * value)
	{
		___GetSkeletalTrackingLevel_16 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___GetSkeletalTrackingLevel_16), (void*)value);
	}

	inline static int32_t get_offset_of_GetSkeletalBoneData_17() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___GetSkeletalBoneData_17)); }
	inline _GetSkeletalBoneData_tB6C26FFFE2DC1A4EBF7538C8B822BCF44FDE950A * get_GetSkeletalBoneData_17() const { return ___GetSkeletalBoneData_17; }
	inline _GetSkeletalBoneData_tB6C26FFFE2DC1A4EBF7538C8B822BCF44FDE950A ** get_address_of_GetSkeletalBoneData_17() { return &___GetSkeletalBoneData_17; }
	inline void set_GetSkeletalBoneData_17(_GetSkeletalBoneData_tB6C26FFFE2DC1A4EBF7538C8B822BCF44FDE950A * value)
	{
		___GetSkeletalBoneData_17 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___GetSkeletalBoneData_17), (void*)value);
	}

	inline static int32_t get_offset_of_GetSkeletalSummaryData_18() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___GetSkeletalSummaryData_18)); }
	inline _GetSkeletalSummaryData_tDBD7B97D7AEB5C6023AB7500B7EFB7B46FC00822 * get_GetSkeletalSummaryData_18() const { return ___GetSkeletalSummaryData_18; }
	inline _GetSkeletalSummaryData_tDBD7B97D7AEB5C6023AB7500B7EFB7B46FC00822 ** get_address_of_GetSkeletalSummaryData_18() { return &___GetSkeletalSummaryData_18; }
	inline void set_GetSkeletalSummaryData_18(_GetSkeletalSummaryData_tDBD7B97D7AEB5C6023AB7500B7EFB7B46FC00822 * value)
	{
		___GetSkeletalSummaryData_18 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___GetSkeletalSummaryData_18), (void*)value);
	}

	inline static int32_t get_offset_of_GetSkeletalBoneDataCompressed_19() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___GetSkeletalBoneDataCompressed_19)); }
	inline _GetSkeletalBoneDataCompressed_tE546DCB602D70AFE33D3988CA648F582BF4D795B * get_GetSkeletalBoneDataCompressed_19() const { return ___GetSkeletalBoneDataCompressed_19; }
	inline _GetSkeletalBoneDataCompressed_tE546DCB602D70AFE33D3988CA648F582BF4D795B ** get_address_of_GetSkeletalBoneDataCompressed_19() { return &___GetSkeletalBoneDataCompressed_19; }
	inline void set_GetSkeletalBoneDataCompressed_19(_GetSkeletalBoneDataCompressed_tE546DCB602D70AFE33D3988CA648F582BF4D795B * value)
	{
		___GetSkeletalBoneDataCompressed_19 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___GetSkeletalBoneDataCompressed_19), (void*)value);
	}

	inline static int32_t get_offset_of_DecompressSkeletalBoneData_20() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___DecompressSkeletalBoneData_20)); }
	inline _DecompressSkeletalBoneData_t8A92BDC21C8090D2E2952E48A5925D4B8DD48277 * get_DecompressSkeletalBoneData_20() const { return ___DecompressSkeletalBoneData_20; }
	inline _DecompressSkeletalBoneData_t8A92BDC21C8090D2E2952E48A5925D4B8DD48277 ** get_address_of_DecompressSkeletalBoneData_20() { return &___DecompressSkeletalBoneData_20; }
	inline void set_DecompressSkeletalBoneData_20(_DecompressSkeletalBoneData_t8A92BDC21C8090D2E2952E48A5925D4B8DD48277 * value)
	{
		___DecompressSkeletalBoneData_20 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___DecompressSkeletalBoneData_20), (void*)value);
	}

	inline static int32_t get_offset_of_TriggerHapticVibrationAction_21() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___TriggerHapticVibrationAction_21)); }
	inline _TriggerHapticVibrationAction_tD6966DC222C78E33A391603FA738554C337292C8 * get_TriggerHapticVibrationAction_21() const { return ___TriggerHapticVibrationAction_21; }
	inline _TriggerHapticVibrationAction_tD6966DC222C78E33A391603FA738554C337292C8 ** get_address_of_TriggerHapticVibrationAction_21() { return &___TriggerHapticVibrationAction_21; }
	inline void set_TriggerHapticVibrationAction_21(_TriggerHapticVibrationAction_tD6966DC222C78E33A391603FA738554C337292C8 * value)
	{
		___TriggerHapticVibrationAction_21 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___TriggerHapticVibrationAction_21), (void*)value);
	}

	inline static int32_t get_offset_of_GetActionOrigins_22() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___GetActionOrigins_22)); }
	inline _GetActionOrigins_tE0D9FE805034861066738B53CD6ED5D774553C69 * get_GetActionOrigins_22() const { return ___GetActionOrigins_22; }
	inline _GetActionOrigins_tE0D9FE805034861066738B53CD6ED5D774553C69 ** get_address_of_GetActionOrigins_22() { return &___GetActionOrigins_22; }
	inline void set_GetActionOrigins_22(_GetActionOrigins_tE0D9FE805034861066738B53CD6ED5D774553C69 * value)
	{
		___GetActionOrigins_22 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___GetActionOrigins_22), (void*)value);
	}

	inline static int32_t get_offset_of_GetOriginLocalizedName_23() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___GetOriginLocalizedName_23)); }
	inline _GetOriginLocalizedName_t3FDAF7E14C966B8922289564E4EDFD9FD2708E4F * get_GetOriginLocalizedName_23() const { return ___GetOriginLocalizedName_23; }
	inline _GetOriginLocalizedName_t3FDAF7E14C966B8922289564E4EDFD9FD2708E4F ** get_address_of_GetOriginLocalizedName_23() { return &___GetOriginLocalizedName_23; }
	inline void set_GetOriginLocalizedName_23(_GetOriginLocalizedName_t3FDAF7E14C966B8922289564E4EDFD9FD2708E4F * value)
	{
		___GetOriginLocalizedName_23 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___GetOriginLocalizedName_23), (void*)value);
	}

	inline static int32_t get_offset_of_GetOriginTrackedDeviceInfo_24() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___GetOriginTrackedDeviceInfo_24)); }
	inline _GetOriginTrackedDeviceInfo_tCCCCE9FC46CC32CD3CEE514462A4D2AAB295BA4B * get_GetOriginTrackedDeviceInfo_24() const { return ___GetOriginTrackedDeviceInfo_24; }
	inline _GetOriginTrackedDeviceInfo_tCCCCE9FC46CC32CD3CEE514462A4D2AAB295BA4B ** get_address_of_GetOriginTrackedDeviceInfo_24() { return &___GetOriginTrackedDeviceInfo_24; }
	inline void set_GetOriginTrackedDeviceInfo_24(_GetOriginTrackedDeviceInfo_tCCCCE9FC46CC32CD3CEE514462A4D2AAB295BA4B * value)
	{
		___GetOriginTrackedDeviceInfo_24 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___GetOriginTrackedDeviceInfo_24), (void*)value);
	}

	inline static int32_t get_offset_of_GetActionBindingInfo_25() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___GetActionBindingInfo_25)); }
	inline _GetActionBindingInfo_t888BA9460789EBC395139AB0DBBBA3089B2E0FC5 * get_GetActionBindingInfo_25() const { return ___GetActionBindingInfo_25; }
	inline _GetActionBindingInfo_t888BA9460789EBC395139AB0DBBBA3089B2E0FC5 ** get_address_of_GetActionBindingInfo_25() { return &___GetActionBindingInfo_25; }
	inline void set_GetActionBindingInfo_25(_GetActionBindingInfo_t888BA9460789EBC395139AB0DBBBA3089B2E0FC5 * value)
	{
		___GetActionBindingInfo_25 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___GetActionBindingInfo_25), (void*)value);
	}

	inline static int32_t get_offset_of_ShowActionOrigins_26() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___ShowActionOrigins_26)); }
	inline _ShowActionOrigins_t2D44C15D7A1A68B48BD8A5718303C019CB82DE71 * get_ShowActionOrigins_26() const { return ___ShowActionOrigins_26; }
	inline _ShowActionOrigins_t2D44C15D7A1A68B48BD8A5718303C019CB82DE71 ** get_address_of_ShowActionOrigins_26() { return &___ShowActionOrigins_26; }
	inline void set_ShowActionOrigins_26(_ShowActionOrigins_t2D44C15D7A1A68B48BD8A5718303C019CB82DE71 * value)
	{
		___ShowActionOrigins_26 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___ShowActionOrigins_26), (void*)value);
	}

	inline static int32_t get_offset_of_ShowBindingsForActionSet_27() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___ShowBindingsForActionSet_27)); }
	inline _ShowBindingsForActionSet_tE794CCA21EF1D46F19895A28146A79FA5B41BB2A * get_ShowBindingsForActionSet_27() const { return ___ShowBindingsForActionSet_27; }
	inline _ShowBindingsForActionSet_tE794CCA21EF1D46F19895A28146A79FA5B41BB2A ** get_address_of_ShowBindingsForActionSet_27() { return &___ShowBindingsForActionSet_27; }
	inline void set_ShowBindingsForActionSet_27(_ShowBindingsForActionSet_tE794CCA21EF1D46F19895A28146A79FA5B41BB2A * value)
	{
		___ShowBindingsForActionSet_27 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___ShowBindingsForActionSet_27), (void*)value);
	}

	inline static int32_t get_offset_of_GetComponentStateForBinding_28() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___GetComponentStateForBinding_28)); }
	inline _GetComponentStateForBinding_t528D11F913578272C9159336F2B9473530BE99AA * get_GetComponentStateForBinding_28() const { return ___GetComponentStateForBinding_28; }
	inline _GetComponentStateForBinding_t528D11F913578272C9159336F2B9473530BE99AA ** get_address_of_GetComponentStateForBinding_28() { return &___GetComponentStateForBinding_28; }
	inline void set_GetComponentStateForBinding_28(_GetComponentStateForBinding_t528D11F913578272C9159336F2B9473530BE99AA * value)
	{
		___GetComponentStateForBinding_28 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___GetComponentStateForBinding_28), (void*)value);
	}

	inline static int32_t get_offset_of_IsUsingLegacyInput_29() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___IsUsingLegacyInput_29)); }
	inline _IsUsingLegacyInput_t47530FACE216CEDA2B1629F03D1FE805B67664A7 * get_IsUsingLegacyInput_29() const { return ___IsUsingLegacyInput_29; }
	inline _IsUsingLegacyInput_t47530FACE216CEDA2B1629F03D1FE805B67664A7 ** get_address_of_IsUsingLegacyInput_29() { return &___IsUsingLegacyInput_29; }
	inline void set_IsUsingLegacyInput_29(_IsUsingLegacyInput_t47530FACE216CEDA2B1629F03D1FE805B67664A7 * value)
	{
		___IsUsingLegacyInput_29 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___IsUsingLegacyInput_29), (void*)value);
	}

	inline static int32_t get_offset_of_OpenBindingUI_30() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___OpenBindingUI_30)); }
	inline _OpenBindingUI_t04252A1EDE97A953F55220A73E647A8DD9EA831F * get_OpenBindingUI_30() const { return ___OpenBindingUI_30; }
	inline _OpenBindingUI_t04252A1EDE97A953F55220A73E647A8DD9EA831F ** get_address_of_OpenBindingUI_30() { return &___OpenBindingUI_30; }
	inline void set_OpenBindingUI_30(_OpenBindingUI_t04252A1EDE97A953F55220A73E647A8DD9EA831F * value)
	{
		___OpenBindingUI_30 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___OpenBindingUI_30), (void*)value);
	}

	inline static int32_t get_offset_of_GetBindingVariant_31() { return static_cast<int32_t>(offsetof(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78, ___GetBindingVariant_31)); }
	inline _GetBindingVariant_t54394654ADF0C4DFE91EC183B932B47AD3AD9F96 * get_GetBindingVariant_31() const { return ___GetBindingVariant_31; }
	inline _GetBindingVariant_t54394654ADF0C4DFE91EC183B932B47AD3AD9F96 ** get_address_of_GetBindingVariant_31() { return &___GetBindingVariant_31; }
	inline void set_GetBindingVariant_31(_GetBindingVariant_t54394654ADF0C4DFE91EC183B932B47AD3AD9F96 * value)
	{
		___GetBindingVariant_31 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___GetBindingVariant_31), (void*)value);
	}
};

// Native definition for P/Invoke marshalling of Valve.VR.IVRInput
struct IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78_marshaled_pinvoke
{
	Il2CppMethodPointer ___SetActionManifestPath_0;
	Il2CppMethodPointer ___GetActionSetHandle_1;
	Il2CppMethodPointer ___GetActionHandle_2;
	Il2CppMethodPointer ___GetInputSourceHandle_3;
	Il2CppMethodPointer ___UpdateActionState_4;
	Il2CppMethodPointer ___GetDigitalActionData_5;
	Il2CppMethodPointer ___GetAnalogActionData_6;
	Il2CppMethodPointer ___GetPoseActionDataRelativeToNow_7;
	Il2CppMethodPointer ___GetPoseActionDataForNextFrame_8;
	Il2CppMethodPointer ___GetSkeletalActionData_9;
	Il2CppMethodPointer ___GetDominantHand_10;
	Il2CppMethodPointer ___SetDominantHand_11;
	Il2CppMethodPointer ___GetBoneCount_12;
	Il2CppMethodPointer ___GetBoneHierarchy_13;
	Il2CppMethodPointer ___GetBoneName_14;
	Il2CppMethodPointer ___GetSkeletalReferenceTransforms_15;
	Il2CppMethodPointer ___GetSkeletalTrackingLevel_16;
	Il2CppMethodPointer ___GetSkeletalBoneData_17;
	Il2CppMethodPointer ___GetSkeletalSummaryData_18;
	Il2CppMethodPointer ___GetSkeletalBoneDataCompressed_19;
	Il2CppMethodPointer ___DecompressSkeletalBoneData_20;
	Il2CppMethodPointer ___TriggerHapticVibrationAction_21;
	Il2CppMethodPointer ___GetActionOrigins_22;
	Il2CppMethodPointer ___GetOriginLocalizedName_23;
	Il2CppMethodPointer ___GetOriginTrackedDeviceInfo_24;
	Il2CppMethodPointer ___GetActionBindingInfo_25;
	Il2CppMethodPointer ___ShowActionOrigins_26;
	Il2CppMethodPointer ___ShowBindingsForActionSet_27;
	Il2CppMethodPointer ___GetComponentStateForBinding_28;
	Il2CppMethodPointer ___IsUsingLegacyInput_29;
	Il2CppMethodPointer ___OpenBindingUI_30;
	Il2CppMethodPointer ___GetBindingVariant_31;
};
// Native definition for COM marshalling of Valve.VR.IVRInput
struct IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78_marshaled_com
{
	Il2CppMethodPointer ___SetActionManifestPath_0;
	Il2CppMethodPointer ___GetActionSetHandle_1;
	Il2CppMethodPointer ___GetActionHandle_2;
	Il2CppMethodPointer ___GetInputSourceHandle_3;
	Il2CppMethodPointer ___UpdateActionState_4;
	Il2CppMethodPointer ___GetDigitalActionData_5;
	Il2CppMethodPointer ___GetAnalogActionData_6;
	Il2CppMethodPointer ___GetPoseActionDataRelativeToNow_7;
	Il2CppMethodPointer ___GetPoseActionDataForNextFrame_8;
	Il2CppMethodPointer ___GetSkeletalActionData_9;
	Il2CppMethodPointer ___GetDominantHand_10;
	Il2CppMethodPointer ___SetDominantHand_11;
	Il2CppMethodPointer ___GetBoneCount_12;
	Il2CppMethodPointer ___GetBoneHierarchy_13;
	Il2CppMethodPointer ___GetBoneName_14;
	Il2CppMethodPointer ___GetSkeletalReferenceTransforms_15;
	Il2CppMethodPointer ___GetSkeletalTrackingLevel_16;
	Il2CppMethodPointer ___GetSkeletalBoneData_17;
	Il2CppMethodPointer ___GetSkeletalSummaryData_18;
	Il2CppMethodPointer ___GetSkeletalBoneDataCompressed_19;
	Il2CppMethodPointer ___DecompressSkeletalBoneData_20;
	Il2CppMethodPointer ___TriggerHapticVibrationAction_21;
	Il2CppMethodPointer ___GetActionOrigins_22;
	Il2CppMethodPointer ___GetOriginLocalizedName_23;
	Il2CppMethodPointer ___GetOriginTrackedDeviceInfo_24;
	Il2CppMethodPointer ___GetActionBindingInfo_25;
	Il2CppMethodPointer ___ShowActionOrigins_26;
	Il2CppMethodPointer ___ShowBindingsForActionSet_27;
	Il2CppMethodPointer ___GetComponentStateForBinding_28;
	Il2CppMethodPointer ___IsUsingLegacyInput_29;
	Il2CppMethodPointer ___OpenBindingUI_30;
	Il2CppMethodPointer ___GetBindingVariant_31;
};

// Valve.VR.InputAnalogActionData_t
struct  InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C 
{
public:
	// System.Boolean Valve.VR.InputAnalogActionData_t::bActive
	bool ___bActive_0;
	// System.UInt64 Valve.VR.InputAnalogActionData_t::activeOrigin
	uint64_t ___activeOrigin_1;
	// System.Single Valve.VR.InputAnalogActionData_t::x
	float ___x_2;
	// System.Single Valve.VR.InputAnalogActionData_t::y
	float ___y_3;
	// System.Single Valve.VR.InputAnalogActionData_t::z
	float ___z_4;
	// System.Single Valve.VR.InputAnalogActionData_t::deltaX
	float ___deltaX_5;
	// System.Single Valve.VR.InputAnalogActionData_t::deltaY
	float ___deltaY_6;
	// System.Single Valve.VR.InputAnalogActionData_t::deltaZ
	float ___deltaZ_7;
	// System.Single Valve.VR.InputAnalogActionData_t::fUpdateTime
	float ___fUpdateTime_8;

public:
	inline static int32_t get_offset_of_bActive_0() { return static_cast<int32_t>(offsetof(InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C, ___bActive_0)); }
	inline bool get_bActive_0() const { return ___bActive_0; }
	inline bool* get_address_of_bActive_0() { return &___bActive_0; }
	inline void set_bActive_0(bool value)
	{
		___bActive_0 = value;
	}

	inline static int32_t get_offset_of_activeOrigin_1() { return static_cast<int32_t>(offsetof(InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C, ___activeOrigin_1)); }
	inline uint64_t get_activeOrigin_1() const { return ___activeOrigin_1; }
	inline uint64_t* get_address_of_activeOrigin_1() { return &___activeOrigin_1; }
	inline void set_activeOrigin_1(uint64_t value)
	{
		___activeOrigin_1 = value;
	}

	inline static int32_t get_offset_of_x_2() { return static_cast<int32_t>(offsetof(InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C, ___x_2)); }
	inline float get_x_2() const { return ___x_2; }
	inline float* get_address_of_x_2() { return &___x_2; }
	inline void set_x_2(float value)
	{
		___x_2 = value;
	}

	inline static int32_t get_offset_of_y_3() { return static_cast<int32_t>(offsetof(InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C, ___y_3)); }
	inline float get_y_3() const { return ___y_3; }
	inline float* get_address_of_y_3() { return &___y_3; }
	inline void set_y_3(float value)
	{
		___y_3 = value;
	}

	inline static int32_t get_offset_of_z_4() { return static_cast<int32_t>(offsetof(InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C, ___z_4)); }
	inline float get_z_4() const { return ___z_4; }
	inline float* get_address_of_z_4() { return &___z_4; }
	inline void set_z_4(float value)
	{
		___z_4 = value;
	}

	inline static int32_t get_offset_of_deltaX_5() { return static_cast<int32_t>(offsetof(InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C, ___deltaX_5)); }
	inline float get_deltaX_5() const { return ___deltaX_5; }
	inline float* get_address_of_deltaX_5() { return &___deltaX_5; }
	inline void set_deltaX_5(float value)
	{
		___deltaX_5 = value;
	}

	inline static int32_t get_offset_of_deltaY_6() { return static_cast<int32_t>(offsetof(InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C, ___deltaY_6)); }
	inline float get_deltaY_6() const { return ___deltaY_6; }
	inline float* get_address_of_deltaY_6() { return &___deltaY_6; }
	inline void set_deltaY_6(float value)
	{
		___deltaY_6 = value;
	}

	inline static int32_t get_offset_of_deltaZ_7() { return static_cast<int32_t>(offsetof(InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C, ___deltaZ_7)); }
	inline float get_deltaZ_7() const { return ___deltaZ_7; }
	inline float* get_address_of_deltaZ_7() { return &___deltaZ_7; }
	inline void set_deltaZ_7(float value)
	{
		___deltaZ_7 = value;
	}

	inline static int32_t get_offset_of_fUpdateTime_8() { return static_cast<int32_t>(offsetof(InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C, ___fUpdateTime_8)); }
	inline float get_fUpdateTime_8() const { return ___fUpdateTime_8; }
	inline float* get_address_of_fUpdateTime_8() { return &___fUpdateTime_8; }
	inline void set_fUpdateTime_8(float value)
	{
		___fUpdateTime_8 = value;
	}
};


// Valve.VR.InputOriginInfo_t
struct  InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A 
{
public:
	// System.UInt64 Valve.VR.InputOriginInfo_t::devicePath
	uint64_t ___devicePath_0;
	// System.UInt32 Valve.VR.InputOriginInfo_t::trackedDeviceIndex
	uint32_t ___trackedDeviceIndex_1;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName0
	uint8_t ___rchRenderModelComponentName0_2;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName1
	uint8_t ___rchRenderModelComponentName1_3;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName2
	uint8_t ___rchRenderModelComponentName2_4;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName3
	uint8_t ___rchRenderModelComponentName3_5;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName4
	uint8_t ___rchRenderModelComponentName4_6;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName5
	uint8_t ___rchRenderModelComponentName5_7;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName6
	uint8_t ___rchRenderModelComponentName6_8;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName7
	uint8_t ___rchRenderModelComponentName7_9;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName8
	uint8_t ___rchRenderModelComponentName8_10;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName9
	uint8_t ___rchRenderModelComponentName9_11;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName10
	uint8_t ___rchRenderModelComponentName10_12;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName11
	uint8_t ___rchRenderModelComponentName11_13;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName12
	uint8_t ___rchRenderModelComponentName12_14;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName13
	uint8_t ___rchRenderModelComponentName13_15;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName14
	uint8_t ___rchRenderModelComponentName14_16;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName15
	uint8_t ___rchRenderModelComponentName15_17;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName16
	uint8_t ___rchRenderModelComponentName16_18;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName17
	uint8_t ___rchRenderModelComponentName17_19;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName18
	uint8_t ___rchRenderModelComponentName18_20;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName19
	uint8_t ___rchRenderModelComponentName19_21;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName20
	uint8_t ___rchRenderModelComponentName20_22;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName21
	uint8_t ___rchRenderModelComponentName21_23;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName22
	uint8_t ___rchRenderModelComponentName22_24;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName23
	uint8_t ___rchRenderModelComponentName23_25;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName24
	uint8_t ___rchRenderModelComponentName24_26;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName25
	uint8_t ___rchRenderModelComponentName25_27;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName26
	uint8_t ___rchRenderModelComponentName26_28;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName27
	uint8_t ___rchRenderModelComponentName27_29;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName28
	uint8_t ___rchRenderModelComponentName28_30;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName29
	uint8_t ___rchRenderModelComponentName29_31;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName30
	uint8_t ___rchRenderModelComponentName30_32;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName31
	uint8_t ___rchRenderModelComponentName31_33;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName32
	uint8_t ___rchRenderModelComponentName32_34;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName33
	uint8_t ___rchRenderModelComponentName33_35;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName34
	uint8_t ___rchRenderModelComponentName34_36;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName35
	uint8_t ___rchRenderModelComponentName35_37;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName36
	uint8_t ___rchRenderModelComponentName36_38;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName37
	uint8_t ___rchRenderModelComponentName37_39;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName38
	uint8_t ___rchRenderModelComponentName38_40;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName39
	uint8_t ___rchRenderModelComponentName39_41;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName40
	uint8_t ___rchRenderModelComponentName40_42;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName41
	uint8_t ___rchRenderModelComponentName41_43;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName42
	uint8_t ___rchRenderModelComponentName42_44;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName43
	uint8_t ___rchRenderModelComponentName43_45;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName44
	uint8_t ___rchRenderModelComponentName44_46;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName45
	uint8_t ___rchRenderModelComponentName45_47;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName46
	uint8_t ___rchRenderModelComponentName46_48;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName47
	uint8_t ___rchRenderModelComponentName47_49;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName48
	uint8_t ___rchRenderModelComponentName48_50;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName49
	uint8_t ___rchRenderModelComponentName49_51;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName50
	uint8_t ___rchRenderModelComponentName50_52;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName51
	uint8_t ___rchRenderModelComponentName51_53;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName52
	uint8_t ___rchRenderModelComponentName52_54;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName53
	uint8_t ___rchRenderModelComponentName53_55;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName54
	uint8_t ___rchRenderModelComponentName54_56;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName55
	uint8_t ___rchRenderModelComponentName55_57;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName56
	uint8_t ___rchRenderModelComponentName56_58;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName57
	uint8_t ___rchRenderModelComponentName57_59;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName58
	uint8_t ___rchRenderModelComponentName58_60;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName59
	uint8_t ___rchRenderModelComponentName59_61;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName60
	uint8_t ___rchRenderModelComponentName60_62;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName61
	uint8_t ___rchRenderModelComponentName61_63;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName62
	uint8_t ___rchRenderModelComponentName62_64;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName63
	uint8_t ___rchRenderModelComponentName63_65;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName64
	uint8_t ___rchRenderModelComponentName64_66;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName65
	uint8_t ___rchRenderModelComponentName65_67;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName66
	uint8_t ___rchRenderModelComponentName66_68;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName67
	uint8_t ___rchRenderModelComponentName67_69;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName68
	uint8_t ___rchRenderModelComponentName68_70;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName69
	uint8_t ___rchRenderModelComponentName69_71;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName70
	uint8_t ___rchRenderModelComponentName70_72;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName71
	uint8_t ___rchRenderModelComponentName71_73;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName72
	uint8_t ___rchRenderModelComponentName72_74;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName73
	uint8_t ___rchRenderModelComponentName73_75;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName74
	uint8_t ___rchRenderModelComponentName74_76;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName75
	uint8_t ___rchRenderModelComponentName75_77;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName76
	uint8_t ___rchRenderModelComponentName76_78;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName77
	uint8_t ___rchRenderModelComponentName77_79;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName78
	uint8_t ___rchRenderModelComponentName78_80;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName79
	uint8_t ___rchRenderModelComponentName79_81;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName80
	uint8_t ___rchRenderModelComponentName80_82;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName81
	uint8_t ___rchRenderModelComponentName81_83;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName82
	uint8_t ___rchRenderModelComponentName82_84;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName83
	uint8_t ___rchRenderModelComponentName83_85;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName84
	uint8_t ___rchRenderModelComponentName84_86;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName85
	uint8_t ___rchRenderModelComponentName85_87;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName86
	uint8_t ___rchRenderModelComponentName86_88;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName87
	uint8_t ___rchRenderModelComponentName87_89;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName88
	uint8_t ___rchRenderModelComponentName88_90;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName89
	uint8_t ___rchRenderModelComponentName89_91;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName90
	uint8_t ___rchRenderModelComponentName90_92;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName91
	uint8_t ___rchRenderModelComponentName91_93;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName92
	uint8_t ___rchRenderModelComponentName92_94;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName93
	uint8_t ___rchRenderModelComponentName93_95;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName94
	uint8_t ___rchRenderModelComponentName94_96;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName95
	uint8_t ___rchRenderModelComponentName95_97;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName96
	uint8_t ___rchRenderModelComponentName96_98;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName97
	uint8_t ___rchRenderModelComponentName97_99;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName98
	uint8_t ___rchRenderModelComponentName98_100;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName99
	uint8_t ___rchRenderModelComponentName99_101;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName100
	uint8_t ___rchRenderModelComponentName100_102;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName101
	uint8_t ___rchRenderModelComponentName101_103;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName102
	uint8_t ___rchRenderModelComponentName102_104;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName103
	uint8_t ___rchRenderModelComponentName103_105;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName104
	uint8_t ___rchRenderModelComponentName104_106;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName105
	uint8_t ___rchRenderModelComponentName105_107;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName106
	uint8_t ___rchRenderModelComponentName106_108;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName107
	uint8_t ___rchRenderModelComponentName107_109;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName108
	uint8_t ___rchRenderModelComponentName108_110;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName109
	uint8_t ___rchRenderModelComponentName109_111;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName110
	uint8_t ___rchRenderModelComponentName110_112;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName111
	uint8_t ___rchRenderModelComponentName111_113;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName112
	uint8_t ___rchRenderModelComponentName112_114;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName113
	uint8_t ___rchRenderModelComponentName113_115;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName114
	uint8_t ___rchRenderModelComponentName114_116;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName115
	uint8_t ___rchRenderModelComponentName115_117;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName116
	uint8_t ___rchRenderModelComponentName116_118;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName117
	uint8_t ___rchRenderModelComponentName117_119;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName118
	uint8_t ___rchRenderModelComponentName118_120;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName119
	uint8_t ___rchRenderModelComponentName119_121;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName120
	uint8_t ___rchRenderModelComponentName120_122;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName121
	uint8_t ___rchRenderModelComponentName121_123;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName122
	uint8_t ___rchRenderModelComponentName122_124;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName123
	uint8_t ___rchRenderModelComponentName123_125;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName124
	uint8_t ___rchRenderModelComponentName124_126;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName125
	uint8_t ___rchRenderModelComponentName125_127;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName126
	uint8_t ___rchRenderModelComponentName126_128;
	// System.Byte Valve.VR.InputOriginInfo_t::rchRenderModelComponentName127
	uint8_t ___rchRenderModelComponentName127_129;

public:
	inline static int32_t get_offset_of_devicePath_0() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___devicePath_0)); }
	inline uint64_t get_devicePath_0() const { return ___devicePath_0; }
	inline uint64_t* get_address_of_devicePath_0() { return &___devicePath_0; }
	inline void set_devicePath_0(uint64_t value)
	{
		___devicePath_0 = value;
	}

	inline static int32_t get_offset_of_trackedDeviceIndex_1() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___trackedDeviceIndex_1)); }
	inline uint32_t get_trackedDeviceIndex_1() const { return ___trackedDeviceIndex_1; }
	inline uint32_t* get_address_of_trackedDeviceIndex_1() { return &___trackedDeviceIndex_1; }
	inline void set_trackedDeviceIndex_1(uint32_t value)
	{
		___trackedDeviceIndex_1 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName0_2() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName0_2)); }
	inline uint8_t get_rchRenderModelComponentName0_2() const { return ___rchRenderModelComponentName0_2; }
	inline uint8_t* get_address_of_rchRenderModelComponentName0_2() { return &___rchRenderModelComponentName0_2; }
	inline void set_rchRenderModelComponentName0_2(uint8_t value)
	{
		___rchRenderModelComponentName0_2 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName1_3() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName1_3)); }
	inline uint8_t get_rchRenderModelComponentName1_3() const { return ___rchRenderModelComponentName1_3; }
	inline uint8_t* get_address_of_rchRenderModelComponentName1_3() { return &___rchRenderModelComponentName1_3; }
	inline void set_rchRenderModelComponentName1_3(uint8_t value)
	{
		___rchRenderModelComponentName1_3 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName2_4() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName2_4)); }
	inline uint8_t get_rchRenderModelComponentName2_4() const { return ___rchRenderModelComponentName2_4; }
	inline uint8_t* get_address_of_rchRenderModelComponentName2_4() { return &___rchRenderModelComponentName2_4; }
	inline void set_rchRenderModelComponentName2_4(uint8_t value)
	{
		___rchRenderModelComponentName2_4 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName3_5() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName3_5)); }
	inline uint8_t get_rchRenderModelComponentName3_5() const { return ___rchRenderModelComponentName3_5; }
	inline uint8_t* get_address_of_rchRenderModelComponentName3_5() { return &___rchRenderModelComponentName3_5; }
	inline void set_rchRenderModelComponentName3_5(uint8_t value)
	{
		___rchRenderModelComponentName3_5 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName4_6() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName4_6)); }
	inline uint8_t get_rchRenderModelComponentName4_6() const { return ___rchRenderModelComponentName4_6; }
	inline uint8_t* get_address_of_rchRenderModelComponentName4_6() { return &___rchRenderModelComponentName4_6; }
	inline void set_rchRenderModelComponentName4_6(uint8_t value)
	{
		___rchRenderModelComponentName4_6 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName5_7() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName5_7)); }
	inline uint8_t get_rchRenderModelComponentName5_7() const { return ___rchRenderModelComponentName5_7; }
	inline uint8_t* get_address_of_rchRenderModelComponentName5_7() { return &___rchRenderModelComponentName5_7; }
	inline void set_rchRenderModelComponentName5_7(uint8_t value)
	{
		___rchRenderModelComponentName5_7 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName6_8() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName6_8)); }
	inline uint8_t get_rchRenderModelComponentName6_8() const { return ___rchRenderModelComponentName6_8; }
	inline uint8_t* get_address_of_rchRenderModelComponentName6_8() { return &___rchRenderModelComponentName6_8; }
	inline void set_rchRenderModelComponentName6_8(uint8_t value)
	{
		___rchRenderModelComponentName6_8 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName7_9() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName7_9)); }
	inline uint8_t get_rchRenderModelComponentName7_9() const { return ___rchRenderModelComponentName7_9; }
	inline uint8_t* get_address_of_rchRenderModelComponentName7_9() { return &___rchRenderModelComponentName7_9; }
	inline void set_rchRenderModelComponentName7_9(uint8_t value)
	{
		___rchRenderModelComponentName7_9 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName8_10() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName8_10)); }
	inline uint8_t get_rchRenderModelComponentName8_10() const { return ___rchRenderModelComponentName8_10; }
	inline uint8_t* get_address_of_rchRenderModelComponentName8_10() { return &___rchRenderModelComponentName8_10; }
	inline void set_rchRenderModelComponentName8_10(uint8_t value)
	{
		___rchRenderModelComponentName8_10 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName9_11() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName9_11)); }
	inline uint8_t get_rchRenderModelComponentName9_11() const { return ___rchRenderModelComponentName9_11; }
	inline uint8_t* get_address_of_rchRenderModelComponentName9_11() { return &___rchRenderModelComponentName9_11; }
	inline void set_rchRenderModelComponentName9_11(uint8_t value)
	{
		___rchRenderModelComponentName9_11 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName10_12() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName10_12)); }
	inline uint8_t get_rchRenderModelComponentName10_12() const { return ___rchRenderModelComponentName10_12; }
	inline uint8_t* get_address_of_rchRenderModelComponentName10_12() { return &___rchRenderModelComponentName10_12; }
	inline void set_rchRenderModelComponentName10_12(uint8_t value)
	{
		___rchRenderModelComponentName10_12 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName11_13() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName11_13)); }
	inline uint8_t get_rchRenderModelComponentName11_13() const { return ___rchRenderModelComponentName11_13; }
	inline uint8_t* get_address_of_rchRenderModelComponentName11_13() { return &___rchRenderModelComponentName11_13; }
	inline void set_rchRenderModelComponentName11_13(uint8_t value)
	{
		___rchRenderModelComponentName11_13 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName12_14() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName12_14)); }
	inline uint8_t get_rchRenderModelComponentName12_14() const { return ___rchRenderModelComponentName12_14; }
	inline uint8_t* get_address_of_rchRenderModelComponentName12_14() { return &___rchRenderModelComponentName12_14; }
	inline void set_rchRenderModelComponentName12_14(uint8_t value)
	{
		___rchRenderModelComponentName12_14 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName13_15() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName13_15)); }
	inline uint8_t get_rchRenderModelComponentName13_15() const { return ___rchRenderModelComponentName13_15; }
	inline uint8_t* get_address_of_rchRenderModelComponentName13_15() { return &___rchRenderModelComponentName13_15; }
	inline void set_rchRenderModelComponentName13_15(uint8_t value)
	{
		___rchRenderModelComponentName13_15 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName14_16() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName14_16)); }
	inline uint8_t get_rchRenderModelComponentName14_16() const { return ___rchRenderModelComponentName14_16; }
	inline uint8_t* get_address_of_rchRenderModelComponentName14_16() { return &___rchRenderModelComponentName14_16; }
	inline void set_rchRenderModelComponentName14_16(uint8_t value)
	{
		___rchRenderModelComponentName14_16 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName15_17() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName15_17)); }
	inline uint8_t get_rchRenderModelComponentName15_17() const { return ___rchRenderModelComponentName15_17; }
	inline uint8_t* get_address_of_rchRenderModelComponentName15_17() { return &___rchRenderModelComponentName15_17; }
	inline void set_rchRenderModelComponentName15_17(uint8_t value)
	{
		___rchRenderModelComponentName15_17 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName16_18() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName16_18)); }
	inline uint8_t get_rchRenderModelComponentName16_18() const { return ___rchRenderModelComponentName16_18; }
	inline uint8_t* get_address_of_rchRenderModelComponentName16_18() { return &___rchRenderModelComponentName16_18; }
	inline void set_rchRenderModelComponentName16_18(uint8_t value)
	{
		___rchRenderModelComponentName16_18 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName17_19() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName17_19)); }
	inline uint8_t get_rchRenderModelComponentName17_19() const { return ___rchRenderModelComponentName17_19; }
	inline uint8_t* get_address_of_rchRenderModelComponentName17_19() { return &___rchRenderModelComponentName17_19; }
	inline void set_rchRenderModelComponentName17_19(uint8_t value)
	{
		___rchRenderModelComponentName17_19 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName18_20() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName18_20)); }
	inline uint8_t get_rchRenderModelComponentName18_20() const { return ___rchRenderModelComponentName18_20; }
	inline uint8_t* get_address_of_rchRenderModelComponentName18_20() { return &___rchRenderModelComponentName18_20; }
	inline void set_rchRenderModelComponentName18_20(uint8_t value)
	{
		___rchRenderModelComponentName18_20 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName19_21() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName19_21)); }
	inline uint8_t get_rchRenderModelComponentName19_21() const { return ___rchRenderModelComponentName19_21; }
	inline uint8_t* get_address_of_rchRenderModelComponentName19_21() { return &___rchRenderModelComponentName19_21; }
	inline void set_rchRenderModelComponentName19_21(uint8_t value)
	{
		___rchRenderModelComponentName19_21 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName20_22() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName20_22)); }
	inline uint8_t get_rchRenderModelComponentName20_22() const { return ___rchRenderModelComponentName20_22; }
	inline uint8_t* get_address_of_rchRenderModelComponentName20_22() { return &___rchRenderModelComponentName20_22; }
	inline void set_rchRenderModelComponentName20_22(uint8_t value)
	{
		___rchRenderModelComponentName20_22 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName21_23() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName21_23)); }
	inline uint8_t get_rchRenderModelComponentName21_23() const { return ___rchRenderModelComponentName21_23; }
	inline uint8_t* get_address_of_rchRenderModelComponentName21_23() { return &___rchRenderModelComponentName21_23; }
	inline void set_rchRenderModelComponentName21_23(uint8_t value)
	{
		___rchRenderModelComponentName21_23 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName22_24() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName22_24)); }
	inline uint8_t get_rchRenderModelComponentName22_24() const { return ___rchRenderModelComponentName22_24; }
	inline uint8_t* get_address_of_rchRenderModelComponentName22_24() { return &___rchRenderModelComponentName22_24; }
	inline void set_rchRenderModelComponentName22_24(uint8_t value)
	{
		___rchRenderModelComponentName22_24 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName23_25() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName23_25)); }
	inline uint8_t get_rchRenderModelComponentName23_25() const { return ___rchRenderModelComponentName23_25; }
	inline uint8_t* get_address_of_rchRenderModelComponentName23_25() { return &___rchRenderModelComponentName23_25; }
	inline void set_rchRenderModelComponentName23_25(uint8_t value)
	{
		___rchRenderModelComponentName23_25 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName24_26() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName24_26)); }
	inline uint8_t get_rchRenderModelComponentName24_26() const { return ___rchRenderModelComponentName24_26; }
	inline uint8_t* get_address_of_rchRenderModelComponentName24_26() { return &___rchRenderModelComponentName24_26; }
	inline void set_rchRenderModelComponentName24_26(uint8_t value)
	{
		___rchRenderModelComponentName24_26 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName25_27() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName25_27)); }
	inline uint8_t get_rchRenderModelComponentName25_27() const { return ___rchRenderModelComponentName25_27; }
	inline uint8_t* get_address_of_rchRenderModelComponentName25_27() { return &___rchRenderModelComponentName25_27; }
	inline void set_rchRenderModelComponentName25_27(uint8_t value)
	{
		___rchRenderModelComponentName25_27 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName26_28() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName26_28)); }
	inline uint8_t get_rchRenderModelComponentName26_28() const { return ___rchRenderModelComponentName26_28; }
	inline uint8_t* get_address_of_rchRenderModelComponentName26_28() { return &___rchRenderModelComponentName26_28; }
	inline void set_rchRenderModelComponentName26_28(uint8_t value)
	{
		___rchRenderModelComponentName26_28 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName27_29() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName27_29)); }
	inline uint8_t get_rchRenderModelComponentName27_29() const { return ___rchRenderModelComponentName27_29; }
	inline uint8_t* get_address_of_rchRenderModelComponentName27_29() { return &___rchRenderModelComponentName27_29; }
	inline void set_rchRenderModelComponentName27_29(uint8_t value)
	{
		___rchRenderModelComponentName27_29 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName28_30() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName28_30)); }
	inline uint8_t get_rchRenderModelComponentName28_30() const { return ___rchRenderModelComponentName28_30; }
	inline uint8_t* get_address_of_rchRenderModelComponentName28_30() { return &___rchRenderModelComponentName28_30; }
	inline void set_rchRenderModelComponentName28_30(uint8_t value)
	{
		___rchRenderModelComponentName28_30 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName29_31() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName29_31)); }
	inline uint8_t get_rchRenderModelComponentName29_31() const { return ___rchRenderModelComponentName29_31; }
	inline uint8_t* get_address_of_rchRenderModelComponentName29_31() { return &___rchRenderModelComponentName29_31; }
	inline void set_rchRenderModelComponentName29_31(uint8_t value)
	{
		___rchRenderModelComponentName29_31 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName30_32() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName30_32)); }
	inline uint8_t get_rchRenderModelComponentName30_32() const { return ___rchRenderModelComponentName30_32; }
	inline uint8_t* get_address_of_rchRenderModelComponentName30_32() { return &___rchRenderModelComponentName30_32; }
	inline void set_rchRenderModelComponentName30_32(uint8_t value)
	{
		___rchRenderModelComponentName30_32 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName31_33() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName31_33)); }
	inline uint8_t get_rchRenderModelComponentName31_33() const { return ___rchRenderModelComponentName31_33; }
	inline uint8_t* get_address_of_rchRenderModelComponentName31_33() { return &___rchRenderModelComponentName31_33; }
	inline void set_rchRenderModelComponentName31_33(uint8_t value)
	{
		___rchRenderModelComponentName31_33 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName32_34() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName32_34)); }
	inline uint8_t get_rchRenderModelComponentName32_34() const { return ___rchRenderModelComponentName32_34; }
	inline uint8_t* get_address_of_rchRenderModelComponentName32_34() { return &___rchRenderModelComponentName32_34; }
	inline void set_rchRenderModelComponentName32_34(uint8_t value)
	{
		___rchRenderModelComponentName32_34 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName33_35() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName33_35)); }
	inline uint8_t get_rchRenderModelComponentName33_35() const { return ___rchRenderModelComponentName33_35; }
	inline uint8_t* get_address_of_rchRenderModelComponentName33_35() { return &___rchRenderModelComponentName33_35; }
	inline void set_rchRenderModelComponentName33_35(uint8_t value)
	{
		___rchRenderModelComponentName33_35 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName34_36() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName34_36)); }
	inline uint8_t get_rchRenderModelComponentName34_36() const { return ___rchRenderModelComponentName34_36; }
	inline uint8_t* get_address_of_rchRenderModelComponentName34_36() { return &___rchRenderModelComponentName34_36; }
	inline void set_rchRenderModelComponentName34_36(uint8_t value)
	{
		___rchRenderModelComponentName34_36 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName35_37() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName35_37)); }
	inline uint8_t get_rchRenderModelComponentName35_37() const { return ___rchRenderModelComponentName35_37; }
	inline uint8_t* get_address_of_rchRenderModelComponentName35_37() { return &___rchRenderModelComponentName35_37; }
	inline void set_rchRenderModelComponentName35_37(uint8_t value)
	{
		___rchRenderModelComponentName35_37 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName36_38() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName36_38)); }
	inline uint8_t get_rchRenderModelComponentName36_38() const { return ___rchRenderModelComponentName36_38; }
	inline uint8_t* get_address_of_rchRenderModelComponentName36_38() { return &___rchRenderModelComponentName36_38; }
	inline void set_rchRenderModelComponentName36_38(uint8_t value)
	{
		___rchRenderModelComponentName36_38 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName37_39() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName37_39)); }
	inline uint8_t get_rchRenderModelComponentName37_39() const { return ___rchRenderModelComponentName37_39; }
	inline uint8_t* get_address_of_rchRenderModelComponentName37_39() { return &___rchRenderModelComponentName37_39; }
	inline void set_rchRenderModelComponentName37_39(uint8_t value)
	{
		___rchRenderModelComponentName37_39 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName38_40() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName38_40)); }
	inline uint8_t get_rchRenderModelComponentName38_40() const { return ___rchRenderModelComponentName38_40; }
	inline uint8_t* get_address_of_rchRenderModelComponentName38_40() { return &___rchRenderModelComponentName38_40; }
	inline void set_rchRenderModelComponentName38_40(uint8_t value)
	{
		___rchRenderModelComponentName38_40 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName39_41() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName39_41)); }
	inline uint8_t get_rchRenderModelComponentName39_41() const { return ___rchRenderModelComponentName39_41; }
	inline uint8_t* get_address_of_rchRenderModelComponentName39_41() { return &___rchRenderModelComponentName39_41; }
	inline void set_rchRenderModelComponentName39_41(uint8_t value)
	{
		___rchRenderModelComponentName39_41 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName40_42() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName40_42)); }
	inline uint8_t get_rchRenderModelComponentName40_42() const { return ___rchRenderModelComponentName40_42; }
	inline uint8_t* get_address_of_rchRenderModelComponentName40_42() { return &___rchRenderModelComponentName40_42; }
	inline void set_rchRenderModelComponentName40_42(uint8_t value)
	{
		___rchRenderModelComponentName40_42 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName41_43() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName41_43)); }
	inline uint8_t get_rchRenderModelComponentName41_43() const { return ___rchRenderModelComponentName41_43; }
	inline uint8_t* get_address_of_rchRenderModelComponentName41_43() { return &___rchRenderModelComponentName41_43; }
	inline void set_rchRenderModelComponentName41_43(uint8_t value)
	{
		___rchRenderModelComponentName41_43 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName42_44() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName42_44)); }
	inline uint8_t get_rchRenderModelComponentName42_44() const { return ___rchRenderModelComponentName42_44; }
	inline uint8_t* get_address_of_rchRenderModelComponentName42_44() { return &___rchRenderModelComponentName42_44; }
	inline void set_rchRenderModelComponentName42_44(uint8_t value)
	{
		___rchRenderModelComponentName42_44 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName43_45() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName43_45)); }
	inline uint8_t get_rchRenderModelComponentName43_45() const { return ___rchRenderModelComponentName43_45; }
	inline uint8_t* get_address_of_rchRenderModelComponentName43_45() { return &___rchRenderModelComponentName43_45; }
	inline void set_rchRenderModelComponentName43_45(uint8_t value)
	{
		___rchRenderModelComponentName43_45 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName44_46() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName44_46)); }
	inline uint8_t get_rchRenderModelComponentName44_46() const { return ___rchRenderModelComponentName44_46; }
	inline uint8_t* get_address_of_rchRenderModelComponentName44_46() { return &___rchRenderModelComponentName44_46; }
	inline void set_rchRenderModelComponentName44_46(uint8_t value)
	{
		___rchRenderModelComponentName44_46 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName45_47() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName45_47)); }
	inline uint8_t get_rchRenderModelComponentName45_47() const { return ___rchRenderModelComponentName45_47; }
	inline uint8_t* get_address_of_rchRenderModelComponentName45_47() { return &___rchRenderModelComponentName45_47; }
	inline void set_rchRenderModelComponentName45_47(uint8_t value)
	{
		___rchRenderModelComponentName45_47 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName46_48() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName46_48)); }
	inline uint8_t get_rchRenderModelComponentName46_48() const { return ___rchRenderModelComponentName46_48; }
	inline uint8_t* get_address_of_rchRenderModelComponentName46_48() { return &___rchRenderModelComponentName46_48; }
	inline void set_rchRenderModelComponentName46_48(uint8_t value)
	{
		___rchRenderModelComponentName46_48 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName47_49() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName47_49)); }
	inline uint8_t get_rchRenderModelComponentName47_49() const { return ___rchRenderModelComponentName47_49; }
	inline uint8_t* get_address_of_rchRenderModelComponentName47_49() { return &___rchRenderModelComponentName47_49; }
	inline void set_rchRenderModelComponentName47_49(uint8_t value)
	{
		___rchRenderModelComponentName47_49 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName48_50() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName48_50)); }
	inline uint8_t get_rchRenderModelComponentName48_50() const { return ___rchRenderModelComponentName48_50; }
	inline uint8_t* get_address_of_rchRenderModelComponentName48_50() { return &___rchRenderModelComponentName48_50; }
	inline void set_rchRenderModelComponentName48_50(uint8_t value)
	{
		___rchRenderModelComponentName48_50 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName49_51() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName49_51)); }
	inline uint8_t get_rchRenderModelComponentName49_51() const { return ___rchRenderModelComponentName49_51; }
	inline uint8_t* get_address_of_rchRenderModelComponentName49_51() { return &___rchRenderModelComponentName49_51; }
	inline void set_rchRenderModelComponentName49_51(uint8_t value)
	{
		___rchRenderModelComponentName49_51 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName50_52() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName50_52)); }
	inline uint8_t get_rchRenderModelComponentName50_52() const { return ___rchRenderModelComponentName50_52; }
	inline uint8_t* get_address_of_rchRenderModelComponentName50_52() { return &___rchRenderModelComponentName50_52; }
	inline void set_rchRenderModelComponentName50_52(uint8_t value)
	{
		___rchRenderModelComponentName50_52 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName51_53() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName51_53)); }
	inline uint8_t get_rchRenderModelComponentName51_53() const { return ___rchRenderModelComponentName51_53; }
	inline uint8_t* get_address_of_rchRenderModelComponentName51_53() { return &___rchRenderModelComponentName51_53; }
	inline void set_rchRenderModelComponentName51_53(uint8_t value)
	{
		___rchRenderModelComponentName51_53 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName52_54() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName52_54)); }
	inline uint8_t get_rchRenderModelComponentName52_54() const { return ___rchRenderModelComponentName52_54; }
	inline uint8_t* get_address_of_rchRenderModelComponentName52_54() { return &___rchRenderModelComponentName52_54; }
	inline void set_rchRenderModelComponentName52_54(uint8_t value)
	{
		___rchRenderModelComponentName52_54 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName53_55() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName53_55)); }
	inline uint8_t get_rchRenderModelComponentName53_55() const { return ___rchRenderModelComponentName53_55; }
	inline uint8_t* get_address_of_rchRenderModelComponentName53_55() { return &___rchRenderModelComponentName53_55; }
	inline void set_rchRenderModelComponentName53_55(uint8_t value)
	{
		___rchRenderModelComponentName53_55 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName54_56() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName54_56)); }
	inline uint8_t get_rchRenderModelComponentName54_56() const { return ___rchRenderModelComponentName54_56; }
	inline uint8_t* get_address_of_rchRenderModelComponentName54_56() { return &___rchRenderModelComponentName54_56; }
	inline void set_rchRenderModelComponentName54_56(uint8_t value)
	{
		___rchRenderModelComponentName54_56 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName55_57() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName55_57)); }
	inline uint8_t get_rchRenderModelComponentName55_57() const { return ___rchRenderModelComponentName55_57; }
	inline uint8_t* get_address_of_rchRenderModelComponentName55_57() { return &___rchRenderModelComponentName55_57; }
	inline void set_rchRenderModelComponentName55_57(uint8_t value)
	{
		___rchRenderModelComponentName55_57 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName56_58() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName56_58)); }
	inline uint8_t get_rchRenderModelComponentName56_58() const { return ___rchRenderModelComponentName56_58; }
	inline uint8_t* get_address_of_rchRenderModelComponentName56_58() { return &___rchRenderModelComponentName56_58; }
	inline void set_rchRenderModelComponentName56_58(uint8_t value)
	{
		___rchRenderModelComponentName56_58 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName57_59() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName57_59)); }
	inline uint8_t get_rchRenderModelComponentName57_59() const { return ___rchRenderModelComponentName57_59; }
	inline uint8_t* get_address_of_rchRenderModelComponentName57_59() { return &___rchRenderModelComponentName57_59; }
	inline void set_rchRenderModelComponentName57_59(uint8_t value)
	{
		___rchRenderModelComponentName57_59 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName58_60() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName58_60)); }
	inline uint8_t get_rchRenderModelComponentName58_60() const { return ___rchRenderModelComponentName58_60; }
	inline uint8_t* get_address_of_rchRenderModelComponentName58_60() { return &___rchRenderModelComponentName58_60; }
	inline void set_rchRenderModelComponentName58_60(uint8_t value)
	{
		___rchRenderModelComponentName58_60 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName59_61() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName59_61)); }
	inline uint8_t get_rchRenderModelComponentName59_61() const { return ___rchRenderModelComponentName59_61; }
	inline uint8_t* get_address_of_rchRenderModelComponentName59_61() { return &___rchRenderModelComponentName59_61; }
	inline void set_rchRenderModelComponentName59_61(uint8_t value)
	{
		___rchRenderModelComponentName59_61 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName60_62() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName60_62)); }
	inline uint8_t get_rchRenderModelComponentName60_62() const { return ___rchRenderModelComponentName60_62; }
	inline uint8_t* get_address_of_rchRenderModelComponentName60_62() { return &___rchRenderModelComponentName60_62; }
	inline void set_rchRenderModelComponentName60_62(uint8_t value)
	{
		___rchRenderModelComponentName60_62 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName61_63() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName61_63)); }
	inline uint8_t get_rchRenderModelComponentName61_63() const { return ___rchRenderModelComponentName61_63; }
	inline uint8_t* get_address_of_rchRenderModelComponentName61_63() { return &___rchRenderModelComponentName61_63; }
	inline void set_rchRenderModelComponentName61_63(uint8_t value)
	{
		___rchRenderModelComponentName61_63 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName62_64() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName62_64)); }
	inline uint8_t get_rchRenderModelComponentName62_64() const { return ___rchRenderModelComponentName62_64; }
	inline uint8_t* get_address_of_rchRenderModelComponentName62_64() { return &___rchRenderModelComponentName62_64; }
	inline void set_rchRenderModelComponentName62_64(uint8_t value)
	{
		___rchRenderModelComponentName62_64 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName63_65() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName63_65)); }
	inline uint8_t get_rchRenderModelComponentName63_65() const { return ___rchRenderModelComponentName63_65; }
	inline uint8_t* get_address_of_rchRenderModelComponentName63_65() { return &___rchRenderModelComponentName63_65; }
	inline void set_rchRenderModelComponentName63_65(uint8_t value)
	{
		___rchRenderModelComponentName63_65 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName64_66() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName64_66)); }
	inline uint8_t get_rchRenderModelComponentName64_66() const { return ___rchRenderModelComponentName64_66; }
	inline uint8_t* get_address_of_rchRenderModelComponentName64_66() { return &___rchRenderModelComponentName64_66; }
	inline void set_rchRenderModelComponentName64_66(uint8_t value)
	{
		___rchRenderModelComponentName64_66 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName65_67() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName65_67)); }
	inline uint8_t get_rchRenderModelComponentName65_67() const { return ___rchRenderModelComponentName65_67; }
	inline uint8_t* get_address_of_rchRenderModelComponentName65_67() { return &___rchRenderModelComponentName65_67; }
	inline void set_rchRenderModelComponentName65_67(uint8_t value)
	{
		___rchRenderModelComponentName65_67 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName66_68() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName66_68)); }
	inline uint8_t get_rchRenderModelComponentName66_68() const { return ___rchRenderModelComponentName66_68; }
	inline uint8_t* get_address_of_rchRenderModelComponentName66_68() { return &___rchRenderModelComponentName66_68; }
	inline void set_rchRenderModelComponentName66_68(uint8_t value)
	{
		___rchRenderModelComponentName66_68 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName67_69() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName67_69)); }
	inline uint8_t get_rchRenderModelComponentName67_69() const { return ___rchRenderModelComponentName67_69; }
	inline uint8_t* get_address_of_rchRenderModelComponentName67_69() { return &___rchRenderModelComponentName67_69; }
	inline void set_rchRenderModelComponentName67_69(uint8_t value)
	{
		___rchRenderModelComponentName67_69 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName68_70() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName68_70)); }
	inline uint8_t get_rchRenderModelComponentName68_70() const { return ___rchRenderModelComponentName68_70; }
	inline uint8_t* get_address_of_rchRenderModelComponentName68_70() { return &___rchRenderModelComponentName68_70; }
	inline void set_rchRenderModelComponentName68_70(uint8_t value)
	{
		___rchRenderModelComponentName68_70 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName69_71() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName69_71)); }
	inline uint8_t get_rchRenderModelComponentName69_71() const { return ___rchRenderModelComponentName69_71; }
	inline uint8_t* get_address_of_rchRenderModelComponentName69_71() { return &___rchRenderModelComponentName69_71; }
	inline void set_rchRenderModelComponentName69_71(uint8_t value)
	{
		___rchRenderModelComponentName69_71 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName70_72() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName70_72)); }
	inline uint8_t get_rchRenderModelComponentName70_72() const { return ___rchRenderModelComponentName70_72; }
	inline uint8_t* get_address_of_rchRenderModelComponentName70_72() { return &___rchRenderModelComponentName70_72; }
	inline void set_rchRenderModelComponentName70_72(uint8_t value)
	{
		___rchRenderModelComponentName70_72 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName71_73() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName71_73)); }
	inline uint8_t get_rchRenderModelComponentName71_73() const { return ___rchRenderModelComponentName71_73; }
	inline uint8_t* get_address_of_rchRenderModelComponentName71_73() { return &___rchRenderModelComponentName71_73; }
	inline void set_rchRenderModelComponentName71_73(uint8_t value)
	{
		___rchRenderModelComponentName71_73 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName72_74() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName72_74)); }
	inline uint8_t get_rchRenderModelComponentName72_74() const { return ___rchRenderModelComponentName72_74; }
	inline uint8_t* get_address_of_rchRenderModelComponentName72_74() { return &___rchRenderModelComponentName72_74; }
	inline void set_rchRenderModelComponentName72_74(uint8_t value)
	{
		___rchRenderModelComponentName72_74 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName73_75() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName73_75)); }
	inline uint8_t get_rchRenderModelComponentName73_75() const { return ___rchRenderModelComponentName73_75; }
	inline uint8_t* get_address_of_rchRenderModelComponentName73_75() { return &___rchRenderModelComponentName73_75; }
	inline void set_rchRenderModelComponentName73_75(uint8_t value)
	{
		___rchRenderModelComponentName73_75 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName74_76() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName74_76)); }
	inline uint8_t get_rchRenderModelComponentName74_76() const { return ___rchRenderModelComponentName74_76; }
	inline uint8_t* get_address_of_rchRenderModelComponentName74_76() { return &___rchRenderModelComponentName74_76; }
	inline void set_rchRenderModelComponentName74_76(uint8_t value)
	{
		___rchRenderModelComponentName74_76 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName75_77() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName75_77)); }
	inline uint8_t get_rchRenderModelComponentName75_77() const { return ___rchRenderModelComponentName75_77; }
	inline uint8_t* get_address_of_rchRenderModelComponentName75_77() { return &___rchRenderModelComponentName75_77; }
	inline void set_rchRenderModelComponentName75_77(uint8_t value)
	{
		___rchRenderModelComponentName75_77 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName76_78() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName76_78)); }
	inline uint8_t get_rchRenderModelComponentName76_78() const { return ___rchRenderModelComponentName76_78; }
	inline uint8_t* get_address_of_rchRenderModelComponentName76_78() { return &___rchRenderModelComponentName76_78; }
	inline void set_rchRenderModelComponentName76_78(uint8_t value)
	{
		___rchRenderModelComponentName76_78 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName77_79() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName77_79)); }
	inline uint8_t get_rchRenderModelComponentName77_79() const { return ___rchRenderModelComponentName77_79; }
	inline uint8_t* get_address_of_rchRenderModelComponentName77_79() { return &___rchRenderModelComponentName77_79; }
	inline void set_rchRenderModelComponentName77_79(uint8_t value)
	{
		___rchRenderModelComponentName77_79 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName78_80() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName78_80)); }
	inline uint8_t get_rchRenderModelComponentName78_80() const { return ___rchRenderModelComponentName78_80; }
	inline uint8_t* get_address_of_rchRenderModelComponentName78_80() { return &___rchRenderModelComponentName78_80; }
	inline void set_rchRenderModelComponentName78_80(uint8_t value)
	{
		___rchRenderModelComponentName78_80 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName79_81() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName79_81)); }
	inline uint8_t get_rchRenderModelComponentName79_81() const { return ___rchRenderModelComponentName79_81; }
	inline uint8_t* get_address_of_rchRenderModelComponentName79_81() { return &___rchRenderModelComponentName79_81; }
	inline void set_rchRenderModelComponentName79_81(uint8_t value)
	{
		___rchRenderModelComponentName79_81 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName80_82() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName80_82)); }
	inline uint8_t get_rchRenderModelComponentName80_82() const { return ___rchRenderModelComponentName80_82; }
	inline uint8_t* get_address_of_rchRenderModelComponentName80_82() { return &___rchRenderModelComponentName80_82; }
	inline void set_rchRenderModelComponentName80_82(uint8_t value)
	{
		___rchRenderModelComponentName80_82 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName81_83() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName81_83)); }
	inline uint8_t get_rchRenderModelComponentName81_83() const { return ___rchRenderModelComponentName81_83; }
	inline uint8_t* get_address_of_rchRenderModelComponentName81_83() { return &___rchRenderModelComponentName81_83; }
	inline void set_rchRenderModelComponentName81_83(uint8_t value)
	{
		___rchRenderModelComponentName81_83 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName82_84() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName82_84)); }
	inline uint8_t get_rchRenderModelComponentName82_84() const { return ___rchRenderModelComponentName82_84; }
	inline uint8_t* get_address_of_rchRenderModelComponentName82_84() { return &___rchRenderModelComponentName82_84; }
	inline void set_rchRenderModelComponentName82_84(uint8_t value)
	{
		___rchRenderModelComponentName82_84 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName83_85() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName83_85)); }
	inline uint8_t get_rchRenderModelComponentName83_85() const { return ___rchRenderModelComponentName83_85; }
	inline uint8_t* get_address_of_rchRenderModelComponentName83_85() { return &___rchRenderModelComponentName83_85; }
	inline void set_rchRenderModelComponentName83_85(uint8_t value)
	{
		___rchRenderModelComponentName83_85 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName84_86() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName84_86)); }
	inline uint8_t get_rchRenderModelComponentName84_86() const { return ___rchRenderModelComponentName84_86; }
	inline uint8_t* get_address_of_rchRenderModelComponentName84_86() { return &___rchRenderModelComponentName84_86; }
	inline void set_rchRenderModelComponentName84_86(uint8_t value)
	{
		___rchRenderModelComponentName84_86 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName85_87() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName85_87)); }
	inline uint8_t get_rchRenderModelComponentName85_87() const { return ___rchRenderModelComponentName85_87; }
	inline uint8_t* get_address_of_rchRenderModelComponentName85_87() { return &___rchRenderModelComponentName85_87; }
	inline void set_rchRenderModelComponentName85_87(uint8_t value)
	{
		___rchRenderModelComponentName85_87 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName86_88() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName86_88)); }
	inline uint8_t get_rchRenderModelComponentName86_88() const { return ___rchRenderModelComponentName86_88; }
	inline uint8_t* get_address_of_rchRenderModelComponentName86_88() { return &___rchRenderModelComponentName86_88; }
	inline void set_rchRenderModelComponentName86_88(uint8_t value)
	{
		___rchRenderModelComponentName86_88 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName87_89() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName87_89)); }
	inline uint8_t get_rchRenderModelComponentName87_89() const { return ___rchRenderModelComponentName87_89; }
	inline uint8_t* get_address_of_rchRenderModelComponentName87_89() { return &___rchRenderModelComponentName87_89; }
	inline void set_rchRenderModelComponentName87_89(uint8_t value)
	{
		___rchRenderModelComponentName87_89 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName88_90() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName88_90)); }
	inline uint8_t get_rchRenderModelComponentName88_90() const { return ___rchRenderModelComponentName88_90; }
	inline uint8_t* get_address_of_rchRenderModelComponentName88_90() { return &___rchRenderModelComponentName88_90; }
	inline void set_rchRenderModelComponentName88_90(uint8_t value)
	{
		___rchRenderModelComponentName88_90 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName89_91() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName89_91)); }
	inline uint8_t get_rchRenderModelComponentName89_91() const { return ___rchRenderModelComponentName89_91; }
	inline uint8_t* get_address_of_rchRenderModelComponentName89_91() { return &___rchRenderModelComponentName89_91; }
	inline void set_rchRenderModelComponentName89_91(uint8_t value)
	{
		___rchRenderModelComponentName89_91 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName90_92() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName90_92)); }
	inline uint8_t get_rchRenderModelComponentName90_92() const { return ___rchRenderModelComponentName90_92; }
	inline uint8_t* get_address_of_rchRenderModelComponentName90_92() { return &___rchRenderModelComponentName90_92; }
	inline void set_rchRenderModelComponentName90_92(uint8_t value)
	{
		___rchRenderModelComponentName90_92 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName91_93() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName91_93)); }
	inline uint8_t get_rchRenderModelComponentName91_93() const { return ___rchRenderModelComponentName91_93; }
	inline uint8_t* get_address_of_rchRenderModelComponentName91_93() { return &___rchRenderModelComponentName91_93; }
	inline void set_rchRenderModelComponentName91_93(uint8_t value)
	{
		___rchRenderModelComponentName91_93 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName92_94() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName92_94)); }
	inline uint8_t get_rchRenderModelComponentName92_94() const { return ___rchRenderModelComponentName92_94; }
	inline uint8_t* get_address_of_rchRenderModelComponentName92_94() { return &___rchRenderModelComponentName92_94; }
	inline void set_rchRenderModelComponentName92_94(uint8_t value)
	{
		___rchRenderModelComponentName92_94 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName93_95() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName93_95)); }
	inline uint8_t get_rchRenderModelComponentName93_95() const { return ___rchRenderModelComponentName93_95; }
	inline uint8_t* get_address_of_rchRenderModelComponentName93_95() { return &___rchRenderModelComponentName93_95; }
	inline void set_rchRenderModelComponentName93_95(uint8_t value)
	{
		___rchRenderModelComponentName93_95 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName94_96() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName94_96)); }
	inline uint8_t get_rchRenderModelComponentName94_96() const { return ___rchRenderModelComponentName94_96; }
	inline uint8_t* get_address_of_rchRenderModelComponentName94_96() { return &___rchRenderModelComponentName94_96; }
	inline void set_rchRenderModelComponentName94_96(uint8_t value)
	{
		___rchRenderModelComponentName94_96 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName95_97() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName95_97)); }
	inline uint8_t get_rchRenderModelComponentName95_97() const { return ___rchRenderModelComponentName95_97; }
	inline uint8_t* get_address_of_rchRenderModelComponentName95_97() { return &___rchRenderModelComponentName95_97; }
	inline void set_rchRenderModelComponentName95_97(uint8_t value)
	{
		___rchRenderModelComponentName95_97 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName96_98() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName96_98)); }
	inline uint8_t get_rchRenderModelComponentName96_98() const { return ___rchRenderModelComponentName96_98; }
	inline uint8_t* get_address_of_rchRenderModelComponentName96_98() { return &___rchRenderModelComponentName96_98; }
	inline void set_rchRenderModelComponentName96_98(uint8_t value)
	{
		___rchRenderModelComponentName96_98 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName97_99() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName97_99)); }
	inline uint8_t get_rchRenderModelComponentName97_99() const { return ___rchRenderModelComponentName97_99; }
	inline uint8_t* get_address_of_rchRenderModelComponentName97_99() { return &___rchRenderModelComponentName97_99; }
	inline void set_rchRenderModelComponentName97_99(uint8_t value)
	{
		___rchRenderModelComponentName97_99 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName98_100() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName98_100)); }
	inline uint8_t get_rchRenderModelComponentName98_100() const { return ___rchRenderModelComponentName98_100; }
	inline uint8_t* get_address_of_rchRenderModelComponentName98_100() { return &___rchRenderModelComponentName98_100; }
	inline void set_rchRenderModelComponentName98_100(uint8_t value)
	{
		___rchRenderModelComponentName98_100 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName99_101() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName99_101)); }
	inline uint8_t get_rchRenderModelComponentName99_101() const { return ___rchRenderModelComponentName99_101; }
	inline uint8_t* get_address_of_rchRenderModelComponentName99_101() { return &___rchRenderModelComponentName99_101; }
	inline void set_rchRenderModelComponentName99_101(uint8_t value)
	{
		___rchRenderModelComponentName99_101 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName100_102() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName100_102)); }
	inline uint8_t get_rchRenderModelComponentName100_102() const { return ___rchRenderModelComponentName100_102; }
	inline uint8_t* get_address_of_rchRenderModelComponentName100_102() { return &___rchRenderModelComponentName100_102; }
	inline void set_rchRenderModelComponentName100_102(uint8_t value)
	{
		___rchRenderModelComponentName100_102 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName101_103() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName101_103)); }
	inline uint8_t get_rchRenderModelComponentName101_103() const { return ___rchRenderModelComponentName101_103; }
	inline uint8_t* get_address_of_rchRenderModelComponentName101_103() { return &___rchRenderModelComponentName101_103; }
	inline void set_rchRenderModelComponentName101_103(uint8_t value)
	{
		___rchRenderModelComponentName101_103 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName102_104() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName102_104)); }
	inline uint8_t get_rchRenderModelComponentName102_104() const { return ___rchRenderModelComponentName102_104; }
	inline uint8_t* get_address_of_rchRenderModelComponentName102_104() { return &___rchRenderModelComponentName102_104; }
	inline void set_rchRenderModelComponentName102_104(uint8_t value)
	{
		___rchRenderModelComponentName102_104 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName103_105() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName103_105)); }
	inline uint8_t get_rchRenderModelComponentName103_105() const { return ___rchRenderModelComponentName103_105; }
	inline uint8_t* get_address_of_rchRenderModelComponentName103_105() { return &___rchRenderModelComponentName103_105; }
	inline void set_rchRenderModelComponentName103_105(uint8_t value)
	{
		___rchRenderModelComponentName103_105 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName104_106() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName104_106)); }
	inline uint8_t get_rchRenderModelComponentName104_106() const { return ___rchRenderModelComponentName104_106; }
	inline uint8_t* get_address_of_rchRenderModelComponentName104_106() { return &___rchRenderModelComponentName104_106; }
	inline void set_rchRenderModelComponentName104_106(uint8_t value)
	{
		___rchRenderModelComponentName104_106 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName105_107() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName105_107)); }
	inline uint8_t get_rchRenderModelComponentName105_107() const { return ___rchRenderModelComponentName105_107; }
	inline uint8_t* get_address_of_rchRenderModelComponentName105_107() { return &___rchRenderModelComponentName105_107; }
	inline void set_rchRenderModelComponentName105_107(uint8_t value)
	{
		___rchRenderModelComponentName105_107 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName106_108() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName106_108)); }
	inline uint8_t get_rchRenderModelComponentName106_108() const { return ___rchRenderModelComponentName106_108; }
	inline uint8_t* get_address_of_rchRenderModelComponentName106_108() { return &___rchRenderModelComponentName106_108; }
	inline void set_rchRenderModelComponentName106_108(uint8_t value)
	{
		___rchRenderModelComponentName106_108 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName107_109() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName107_109)); }
	inline uint8_t get_rchRenderModelComponentName107_109() const { return ___rchRenderModelComponentName107_109; }
	inline uint8_t* get_address_of_rchRenderModelComponentName107_109() { return &___rchRenderModelComponentName107_109; }
	inline void set_rchRenderModelComponentName107_109(uint8_t value)
	{
		___rchRenderModelComponentName107_109 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName108_110() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName108_110)); }
	inline uint8_t get_rchRenderModelComponentName108_110() const { return ___rchRenderModelComponentName108_110; }
	inline uint8_t* get_address_of_rchRenderModelComponentName108_110() { return &___rchRenderModelComponentName108_110; }
	inline void set_rchRenderModelComponentName108_110(uint8_t value)
	{
		___rchRenderModelComponentName108_110 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName109_111() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName109_111)); }
	inline uint8_t get_rchRenderModelComponentName109_111() const { return ___rchRenderModelComponentName109_111; }
	inline uint8_t* get_address_of_rchRenderModelComponentName109_111() { return &___rchRenderModelComponentName109_111; }
	inline void set_rchRenderModelComponentName109_111(uint8_t value)
	{
		___rchRenderModelComponentName109_111 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName110_112() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName110_112)); }
	inline uint8_t get_rchRenderModelComponentName110_112() const { return ___rchRenderModelComponentName110_112; }
	inline uint8_t* get_address_of_rchRenderModelComponentName110_112() { return &___rchRenderModelComponentName110_112; }
	inline void set_rchRenderModelComponentName110_112(uint8_t value)
	{
		___rchRenderModelComponentName110_112 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName111_113() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName111_113)); }
	inline uint8_t get_rchRenderModelComponentName111_113() const { return ___rchRenderModelComponentName111_113; }
	inline uint8_t* get_address_of_rchRenderModelComponentName111_113() { return &___rchRenderModelComponentName111_113; }
	inline void set_rchRenderModelComponentName111_113(uint8_t value)
	{
		___rchRenderModelComponentName111_113 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName112_114() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName112_114)); }
	inline uint8_t get_rchRenderModelComponentName112_114() const { return ___rchRenderModelComponentName112_114; }
	inline uint8_t* get_address_of_rchRenderModelComponentName112_114() { return &___rchRenderModelComponentName112_114; }
	inline void set_rchRenderModelComponentName112_114(uint8_t value)
	{
		___rchRenderModelComponentName112_114 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName113_115() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName113_115)); }
	inline uint8_t get_rchRenderModelComponentName113_115() const { return ___rchRenderModelComponentName113_115; }
	inline uint8_t* get_address_of_rchRenderModelComponentName113_115() { return &___rchRenderModelComponentName113_115; }
	inline void set_rchRenderModelComponentName113_115(uint8_t value)
	{
		___rchRenderModelComponentName113_115 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName114_116() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName114_116)); }
	inline uint8_t get_rchRenderModelComponentName114_116() const { return ___rchRenderModelComponentName114_116; }
	inline uint8_t* get_address_of_rchRenderModelComponentName114_116() { return &___rchRenderModelComponentName114_116; }
	inline void set_rchRenderModelComponentName114_116(uint8_t value)
	{
		___rchRenderModelComponentName114_116 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName115_117() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName115_117)); }
	inline uint8_t get_rchRenderModelComponentName115_117() const { return ___rchRenderModelComponentName115_117; }
	inline uint8_t* get_address_of_rchRenderModelComponentName115_117() { return &___rchRenderModelComponentName115_117; }
	inline void set_rchRenderModelComponentName115_117(uint8_t value)
	{
		___rchRenderModelComponentName115_117 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName116_118() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName116_118)); }
	inline uint8_t get_rchRenderModelComponentName116_118() const { return ___rchRenderModelComponentName116_118; }
	inline uint8_t* get_address_of_rchRenderModelComponentName116_118() { return &___rchRenderModelComponentName116_118; }
	inline void set_rchRenderModelComponentName116_118(uint8_t value)
	{
		___rchRenderModelComponentName116_118 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName117_119() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName117_119)); }
	inline uint8_t get_rchRenderModelComponentName117_119() const { return ___rchRenderModelComponentName117_119; }
	inline uint8_t* get_address_of_rchRenderModelComponentName117_119() { return &___rchRenderModelComponentName117_119; }
	inline void set_rchRenderModelComponentName117_119(uint8_t value)
	{
		___rchRenderModelComponentName117_119 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName118_120() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName118_120)); }
	inline uint8_t get_rchRenderModelComponentName118_120() const { return ___rchRenderModelComponentName118_120; }
	inline uint8_t* get_address_of_rchRenderModelComponentName118_120() { return &___rchRenderModelComponentName118_120; }
	inline void set_rchRenderModelComponentName118_120(uint8_t value)
	{
		___rchRenderModelComponentName118_120 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName119_121() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName119_121)); }
	inline uint8_t get_rchRenderModelComponentName119_121() const { return ___rchRenderModelComponentName119_121; }
	inline uint8_t* get_address_of_rchRenderModelComponentName119_121() { return &___rchRenderModelComponentName119_121; }
	inline void set_rchRenderModelComponentName119_121(uint8_t value)
	{
		___rchRenderModelComponentName119_121 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName120_122() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName120_122)); }
	inline uint8_t get_rchRenderModelComponentName120_122() const { return ___rchRenderModelComponentName120_122; }
	inline uint8_t* get_address_of_rchRenderModelComponentName120_122() { return &___rchRenderModelComponentName120_122; }
	inline void set_rchRenderModelComponentName120_122(uint8_t value)
	{
		___rchRenderModelComponentName120_122 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName121_123() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName121_123)); }
	inline uint8_t get_rchRenderModelComponentName121_123() const { return ___rchRenderModelComponentName121_123; }
	inline uint8_t* get_address_of_rchRenderModelComponentName121_123() { return &___rchRenderModelComponentName121_123; }
	inline void set_rchRenderModelComponentName121_123(uint8_t value)
	{
		___rchRenderModelComponentName121_123 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName122_124() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName122_124)); }
	inline uint8_t get_rchRenderModelComponentName122_124() const { return ___rchRenderModelComponentName122_124; }
	inline uint8_t* get_address_of_rchRenderModelComponentName122_124() { return &___rchRenderModelComponentName122_124; }
	inline void set_rchRenderModelComponentName122_124(uint8_t value)
	{
		___rchRenderModelComponentName122_124 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName123_125() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName123_125)); }
	inline uint8_t get_rchRenderModelComponentName123_125() const { return ___rchRenderModelComponentName123_125; }
	inline uint8_t* get_address_of_rchRenderModelComponentName123_125() { return &___rchRenderModelComponentName123_125; }
	inline void set_rchRenderModelComponentName123_125(uint8_t value)
	{
		___rchRenderModelComponentName123_125 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName124_126() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName124_126)); }
	inline uint8_t get_rchRenderModelComponentName124_126() const { return ___rchRenderModelComponentName124_126; }
	inline uint8_t* get_address_of_rchRenderModelComponentName124_126() { return &___rchRenderModelComponentName124_126; }
	inline void set_rchRenderModelComponentName124_126(uint8_t value)
	{
		___rchRenderModelComponentName124_126 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName125_127() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName125_127)); }
	inline uint8_t get_rchRenderModelComponentName125_127() const { return ___rchRenderModelComponentName125_127; }
	inline uint8_t* get_address_of_rchRenderModelComponentName125_127() { return &___rchRenderModelComponentName125_127; }
	inline void set_rchRenderModelComponentName125_127(uint8_t value)
	{
		___rchRenderModelComponentName125_127 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName126_128() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName126_128)); }
	inline uint8_t get_rchRenderModelComponentName126_128() const { return ___rchRenderModelComponentName126_128; }
	inline uint8_t* get_address_of_rchRenderModelComponentName126_128() { return &___rchRenderModelComponentName126_128; }
	inline void set_rchRenderModelComponentName126_128(uint8_t value)
	{
		___rchRenderModelComponentName126_128 = value;
	}

	inline static int32_t get_offset_of_rchRenderModelComponentName127_129() { return static_cast<int32_t>(offsetof(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A, ___rchRenderModelComponentName127_129)); }
	inline uint8_t get_rchRenderModelComponentName127_129() const { return ___rchRenderModelComponentName127_129; }
	inline uint8_t* get_address_of_rchRenderModelComponentName127_129() { return &___rchRenderModelComponentName127_129; }
	inline void set_rchRenderModelComponentName127_129(uint8_t value)
	{
		___rchRenderModelComponentName127_129 = value;
	}
};


// Valve.VR.InputSkeletalActionData_t
struct  InputSkeletalActionData_t_tA39C0A0FE4DBB8966D852B4FFC7D3A6D8F887430 
{
public:
	// System.Boolean Valve.VR.InputSkeletalActionData_t::bActive
	bool ___bActive_0;
	// System.UInt64 Valve.VR.InputSkeletalActionData_t::activeOrigin
	uint64_t ___activeOrigin_1;

public:
	inline static int32_t get_offset_of_bActive_0() { return static_cast<int32_t>(offsetof(InputSkeletalActionData_t_tA39C0A0FE4DBB8966D852B4FFC7D3A6D8F887430, ___bActive_0)); }
	inline bool get_bActive_0() const { return ___bActive_0; }
	inline bool* get_address_of_bActive_0() { return &___bActive_0; }
	inline void set_bActive_0(bool value)
	{
		___bActive_0 = value;
	}

	inline static int32_t get_offset_of_activeOrigin_1() { return static_cast<int32_t>(offsetof(InputSkeletalActionData_t_tA39C0A0FE4DBB8966D852B4FFC7D3A6D8F887430, ___activeOrigin_1)); }
	inline uint64_t get_activeOrigin_1() const { return ___activeOrigin_1; }
	inline uint64_t* get_address_of_activeOrigin_1() { return &___activeOrigin_1; }
	inline void set_activeOrigin_1(uint64_t value)
	{
		___activeOrigin_1 = value;
	}
};


// Valve.VR.SteamVR_Action`2<Valve.VR.SteamVR_Action_Skeleton_Source_Map,Valve.VR.SteamVR_Action_Skeleton_Source>
struct  SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D  : public SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734
{
public:
	// SourceMap Valve.VR.SteamVR_Action`2::sourceMap
	SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * ___sourceMap_4;
	// System.Boolean Valve.VR.SteamVR_Action`2::initialized
	bool ___initialized_5;

public:
	inline static int32_t get_offset_of_sourceMap_4() { return static_cast<int32_t>(offsetof(SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D, ___sourceMap_4)); }
	inline SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * get_sourceMap_4() const { return ___sourceMap_4; }
	inline SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB ** get_address_of_sourceMap_4() { return &___sourceMap_4; }
	inline void set_sourceMap_4(SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * value)
	{
		___sourceMap_4 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___sourceMap_4), (void*)value);
	}

	inline static int32_t get_offset_of_initialized_5() { return static_cast<int32_t>(offsetof(SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D, ___initialized_5)); }
	inline bool get_initialized_5() const { return ___initialized_5; }
	inline bool* get_address_of_initialized_5() { return &___initialized_5; }
	inline void set_initialized_5(bool value)
	{
		___initialized_5 = value;
	}
};


// Valve.VR.SteamVR_Action`2<Valve.VR.SteamVR_Action_Vector2_Source_Map,Valve.VR.SteamVR_Action_Vector2_Source>
struct  SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258  : public SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734
{
public:
	// SourceMap Valve.VR.SteamVR_Action`2::sourceMap
	SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * ___sourceMap_4;
	// System.Boolean Valve.VR.SteamVR_Action`2::initialized
	bool ___initialized_5;

public:
	inline static int32_t get_offset_of_sourceMap_4() { return static_cast<int32_t>(offsetof(SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258, ___sourceMap_4)); }
	inline SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * get_sourceMap_4() const { return ___sourceMap_4; }
	inline SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 ** get_address_of_sourceMap_4() { return &___sourceMap_4; }
	inline void set_sourceMap_4(SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * value)
	{
		___sourceMap_4 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___sourceMap_4), (void*)value);
	}

	inline static int32_t get_offset_of_initialized_5() { return static_cast<int32_t>(offsetof(SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258, ___initialized_5)); }
	inline bool get_initialized_5() const { return ___initialized_5; }
	inline bool* get_address_of_initialized_5() { return &___initialized_5; }
	inline void set_initialized_5(bool value)
	{
		___initialized_5 = value;
	}
};


// Valve.VR.SteamVR_Action`2<Valve.VR.SteamVR_Action_Vector3_Source_Map,Valve.VR.SteamVR_Action_Vector3_Source>
struct  SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902  : public SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734
{
public:
	// SourceMap Valve.VR.SteamVR_Action`2::sourceMap
	SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * ___sourceMap_4;
	// System.Boolean Valve.VR.SteamVR_Action`2::initialized
	bool ___initialized_5;

public:
	inline static int32_t get_offset_of_sourceMap_4() { return static_cast<int32_t>(offsetof(SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902, ___sourceMap_4)); }
	inline SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * get_sourceMap_4() const { return ___sourceMap_4; }
	inline SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 ** get_address_of_sourceMap_4() { return &___sourceMap_4; }
	inline void set_sourceMap_4(SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * value)
	{
		___sourceMap_4 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___sourceMap_4), (void*)value);
	}

	inline static int32_t get_offset_of_initialized_5() { return static_cast<int32_t>(offsetof(SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902, ___initialized_5)); }
	inline bool get_initialized_5() const { return ___initialized_5; }
	inline bool* get_address_of_initialized_5() { return &___initialized_5; }
	inline void set_initialized_5(bool value)
	{
		___initialized_5 = value;
	}
};


// Valve.VR.VRSkeletalSummaryData_t
struct  VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831 
{
public:
	// System.Single Valve.VR.VRSkeletalSummaryData_t::flFingerCurl0
	float ___flFingerCurl0_0;
	// System.Single Valve.VR.VRSkeletalSummaryData_t::flFingerCurl1
	float ___flFingerCurl1_1;
	// System.Single Valve.VR.VRSkeletalSummaryData_t::flFingerCurl2
	float ___flFingerCurl2_2;
	// System.Single Valve.VR.VRSkeletalSummaryData_t::flFingerCurl3
	float ___flFingerCurl3_3;
	// System.Single Valve.VR.VRSkeletalSummaryData_t::flFingerCurl4
	float ___flFingerCurl4_4;
	// System.Single Valve.VR.VRSkeletalSummaryData_t::flFingerSplay0
	float ___flFingerSplay0_5;
	// System.Single Valve.VR.VRSkeletalSummaryData_t::flFingerSplay1
	float ___flFingerSplay1_6;
	// System.Single Valve.VR.VRSkeletalSummaryData_t::flFingerSplay2
	float ___flFingerSplay2_7;
	// System.Single Valve.VR.VRSkeletalSummaryData_t::flFingerSplay3
	float ___flFingerSplay3_8;

public:
	inline static int32_t get_offset_of_flFingerCurl0_0() { return static_cast<int32_t>(offsetof(VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831, ___flFingerCurl0_0)); }
	inline float get_flFingerCurl0_0() const { return ___flFingerCurl0_0; }
	inline float* get_address_of_flFingerCurl0_0() { return &___flFingerCurl0_0; }
	inline void set_flFingerCurl0_0(float value)
	{
		___flFingerCurl0_0 = value;
	}

	inline static int32_t get_offset_of_flFingerCurl1_1() { return static_cast<int32_t>(offsetof(VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831, ___flFingerCurl1_1)); }
	inline float get_flFingerCurl1_1() const { return ___flFingerCurl1_1; }
	inline float* get_address_of_flFingerCurl1_1() { return &___flFingerCurl1_1; }
	inline void set_flFingerCurl1_1(float value)
	{
		___flFingerCurl1_1 = value;
	}

	inline static int32_t get_offset_of_flFingerCurl2_2() { return static_cast<int32_t>(offsetof(VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831, ___flFingerCurl2_2)); }
	inline float get_flFingerCurl2_2() const { return ___flFingerCurl2_2; }
	inline float* get_address_of_flFingerCurl2_2() { return &___flFingerCurl2_2; }
	inline void set_flFingerCurl2_2(float value)
	{
		___flFingerCurl2_2 = value;
	}

	inline static int32_t get_offset_of_flFingerCurl3_3() { return static_cast<int32_t>(offsetof(VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831, ___flFingerCurl3_3)); }
	inline float get_flFingerCurl3_3() const { return ___flFingerCurl3_3; }
	inline float* get_address_of_flFingerCurl3_3() { return &___flFingerCurl3_3; }
	inline void set_flFingerCurl3_3(float value)
	{
		___flFingerCurl3_3 = value;
	}

	inline static int32_t get_offset_of_flFingerCurl4_4() { return static_cast<int32_t>(offsetof(VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831, ___flFingerCurl4_4)); }
	inline float get_flFingerCurl4_4() const { return ___flFingerCurl4_4; }
	inline float* get_address_of_flFingerCurl4_4() { return &___flFingerCurl4_4; }
	inline void set_flFingerCurl4_4(float value)
	{
		___flFingerCurl4_4 = value;
	}

	inline static int32_t get_offset_of_flFingerSplay0_5() { return static_cast<int32_t>(offsetof(VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831, ___flFingerSplay0_5)); }
	inline float get_flFingerSplay0_5() const { return ___flFingerSplay0_5; }
	inline float* get_address_of_flFingerSplay0_5() { return &___flFingerSplay0_5; }
	inline void set_flFingerSplay0_5(float value)
	{
		___flFingerSplay0_5 = value;
	}

	inline static int32_t get_offset_of_flFingerSplay1_6() { return static_cast<int32_t>(offsetof(VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831, ___flFingerSplay1_6)); }
	inline float get_flFingerSplay1_6() const { return ___flFingerSplay1_6; }
	inline float* get_address_of_flFingerSplay1_6() { return &___flFingerSplay1_6; }
	inline void set_flFingerSplay1_6(float value)
	{
		___flFingerSplay1_6 = value;
	}

	inline static int32_t get_offset_of_flFingerSplay2_7() { return static_cast<int32_t>(offsetof(VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831, ___flFingerSplay2_7)); }
	inline float get_flFingerSplay2_7() const { return ___flFingerSplay2_7; }
	inline float* get_address_of_flFingerSplay2_7() { return &___flFingerSplay2_7; }
	inline void set_flFingerSplay2_7(float value)
	{
		___flFingerSplay2_7 = value;
	}

	inline static int32_t get_offset_of_flFingerSplay3_8() { return static_cast<int32_t>(offsetof(VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831, ___flFingerSplay3_8)); }
	inline float get_flFingerSplay3_8() const { return ___flFingerSplay3_8; }
	inline float* get_address_of_flFingerSplay3_8() { return &___flFingerSplay3_8; }
	inline void set_flFingerSplay3_8(float value)
	{
		___flFingerSplay3_8 = value;
	}
};


// SteamVR_Utils_RigidTransform
struct  RigidTransform_t0E8A00F7013270B6B2254F29B4FFEAA6783CD905 
{
public:
	// UnityEngine.Vector3 SteamVR_Utils_RigidTransform::pos
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___pos_0;
	// UnityEngine.Quaternion SteamVR_Utils_RigidTransform::rot
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___rot_1;

public:
	inline static int32_t get_offset_of_pos_0() { return static_cast<int32_t>(offsetof(RigidTransform_t0E8A00F7013270B6B2254F29B4FFEAA6783CD905, ___pos_0)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_pos_0() const { return ___pos_0; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_pos_0() { return &___pos_0; }
	inline void set_pos_0(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___pos_0 = value;
	}

	inline static int32_t get_offset_of_rot_1() { return static_cast<int32_t>(offsetof(RigidTransform_t0E8A00F7013270B6B2254F29B4FFEAA6783CD905, ___rot_1)); }
	inline Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  get_rot_1() const { return ___rot_1; }
	inline Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * get_address_of_rot_1() { return &___rot_1; }
	inline void set_rot_1(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  value)
	{
		___rot_1 = value;
	}
};


// System.Delegate
struct  Delegate_t  : public RuntimeObject
{
public:
	// System.IntPtr System.Delegate::method_ptr
	Il2CppMethodPointer ___method_ptr_0;
	// System.IntPtr System.Delegate::invoke_impl
	intptr_t ___invoke_impl_1;
	// System.Object System.Delegate::m_target
	RuntimeObject * ___m_target_2;
	// System.IntPtr System.Delegate::method
	intptr_t ___method_3;
	// System.IntPtr System.Delegate::delegate_trampoline
	intptr_t ___delegate_trampoline_4;
	// System.IntPtr System.Delegate::extra_arg
	intptr_t ___extra_arg_5;
	// System.IntPtr System.Delegate::method_code
	intptr_t ___method_code_6;
	// System.Reflection.MethodInfo System.Delegate::method_info
	MethodInfo_t * ___method_info_7;
	// System.Reflection.MethodInfo System.Delegate::original_method_info
	MethodInfo_t * ___original_method_info_8;
	// System.DelegateData System.Delegate::data
	DelegateData_t1BF9F691B56DAE5F8C28C5E084FDE94F15F27BBE * ___data_9;
	// System.Boolean System.Delegate::method_is_virtual
	bool ___method_is_virtual_10;

public:
	inline static int32_t get_offset_of_method_ptr_0() { return static_cast<int32_t>(offsetof(Delegate_t, ___method_ptr_0)); }
	inline Il2CppMethodPointer get_method_ptr_0() const { return ___method_ptr_0; }
	inline Il2CppMethodPointer* get_address_of_method_ptr_0() { return &___method_ptr_0; }
	inline void set_method_ptr_0(Il2CppMethodPointer value)
	{
		___method_ptr_0 = value;
	}

	inline static int32_t get_offset_of_invoke_impl_1() { return static_cast<int32_t>(offsetof(Delegate_t, ___invoke_impl_1)); }
	inline intptr_t get_invoke_impl_1() const { return ___invoke_impl_1; }
	inline intptr_t* get_address_of_invoke_impl_1() { return &___invoke_impl_1; }
	inline void set_invoke_impl_1(intptr_t value)
	{
		___invoke_impl_1 = value;
	}

	inline static int32_t get_offset_of_m_target_2() { return static_cast<int32_t>(offsetof(Delegate_t, ___m_target_2)); }
	inline RuntimeObject * get_m_target_2() const { return ___m_target_2; }
	inline RuntimeObject ** get_address_of_m_target_2() { return &___m_target_2; }
	inline void set_m_target_2(RuntimeObject * value)
	{
		___m_target_2 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___m_target_2), (void*)value);
	}

	inline static int32_t get_offset_of_method_3() { return static_cast<int32_t>(offsetof(Delegate_t, ___method_3)); }
	inline intptr_t get_method_3() const { return ___method_3; }
	inline intptr_t* get_address_of_method_3() { return &___method_3; }
	inline void set_method_3(intptr_t value)
	{
		___method_3 = value;
	}

	inline static int32_t get_offset_of_delegate_trampoline_4() { return static_cast<int32_t>(offsetof(Delegate_t, ___delegate_trampoline_4)); }
	inline intptr_t get_delegate_trampoline_4() const { return ___delegate_trampoline_4; }
	inline intptr_t* get_address_of_delegate_trampoline_4() { return &___delegate_trampoline_4; }
	inline void set_delegate_trampoline_4(intptr_t value)
	{
		___delegate_trampoline_4 = value;
	}

	inline static int32_t get_offset_of_extra_arg_5() { return static_cast<int32_t>(offsetof(Delegate_t, ___extra_arg_5)); }
	inline intptr_t get_extra_arg_5() const { return ___extra_arg_5; }
	inline intptr_t* get_address_of_extra_arg_5() { return &___extra_arg_5; }
	inline void set_extra_arg_5(intptr_t value)
	{
		___extra_arg_5 = value;
	}

	inline static int32_t get_offset_of_method_code_6() { return static_cast<int32_t>(offsetof(Delegate_t, ___method_code_6)); }
	inline intptr_t get_method_code_6() const { return ___method_code_6; }
	inline intptr_t* get_address_of_method_code_6() { return &___method_code_6; }
	inline void set_method_code_6(intptr_t value)
	{
		___method_code_6 = value;
	}

	inline static int32_t get_offset_of_method_info_7() { return static_cast<int32_t>(offsetof(Delegate_t, ___method_info_7)); }
	inline MethodInfo_t * get_method_info_7() const { return ___method_info_7; }
	inline MethodInfo_t ** get_address_of_method_info_7() { return &___method_info_7; }
	inline void set_method_info_7(MethodInfo_t * value)
	{
		___method_info_7 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___method_info_7), (void*)value);
	}

	inline static int32_t get_offset_of_original_method_info_8() { return static_cast<int32_t>(offsetof(Delegate_t, ___original_method_info_8)); }
	inline MethodInfo_t * get_original_method_info_8() const { return ___original_method_info_8; }
	inline MethodInfo_t ** get_address_of_original_method_info_8() { return &___original_method_info_8; }
	inline void set_original_method_info_8(MethodInfo_t * value)
	{
		___original_method_info_8 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___original_method_info_8), (void*)value);
	}

	inline static int32_t get_offset_of_data_9() { return static_cast<int32_t>(offsetof(Delegate_t, ___data_9)); }
	inline DelegateData_t1BF9F691B56DAE5F8C28C5E084FDE94F15F27BBE * get_data_9() const { return ___data_9; }
	inline DelegateData_t1BF9F691B56DAE5F8C28C5E084FDE94F15F27BBE ** get_address_of_data_9() { return &___data_9; }
	inline void set_data_9(DelegateData_t1BF9F691B56DAE5F8C28C5E084FDE94F15F27BBE * value)
	{
		___data_9 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___data_9), (void*)value);
	}

	inline static int32_t get_offset_of_method_is_virtual_10() { return static_cast<int32_t>(offsetof(Delegate_t, ___method_is_virtual_10)); }
	inline bool get_method_is_virtual_10() const { return ___method_is_virtual_10; }
	inline bool* get_address_of_method_is_virtual_10() { return &___method_is_virtual_10; }
	inline void set_method_is_virtual_10(bool value)
	{
		___method_is_virtual_10 = value;
	}
};

// Native definition for P/Invoke marshalling of System.Delegate
struct Delegate_t_marshaled_pinvoke
{
	intptr_t ___method_ptr_0;
	intptr_t ___invoke_impl_1;
	Il2CppIUnknown* ___m_target_2;
	intptr_t ___method_3;
	intptr_t ___delegate_trampoline_4;
	intptr_t ___extra_arg_5;
	intptr_t ___method_code_6;
	MethodInfo_t * ___method_info_7;
	MethodInfo_t * ___original_method_info_8;
	DelegateData_t1BF9F691B56DAE5F8C28C5E084FDE94F15F27BBE * ___data_9;
	int32_t ___method_is_virtual_10;
};
// Native definition for COM marshalling of System.Delegate
struct Delegate_t_marshaled_com
{
	intptr_t ___method_ptr_0;
	intptr_t ___invoke_impl_1;
	Il2CppIUnknown* ___m_target_2;
	intptr_t ___method_3;
	intptr_t ___delegate_trampoline_4;
	intptr_t ___extra_arg_5;
	intptr_t ___method_code_6;
	MethodInfo_t * ___method_info_7;
	MethodInfo_t * ___original_method_info_8;
	DelegateData_t1BF9F691B56DAE5F8C28C5E084FDE94F15F27BBE * ___data_9;
	int32_t ___method_is_virtual_10;
};

// System.Reflection.BindingFlags
struct  BindingFlags_tE35C91D046E63A1B92BB9AB909FCF9DA84379ED0 
{
public:
	// System.Int32 System.Reflection.BindingFlags::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(BindingFlags_tE35C91D046E63A1B92BB9AB909FCF9DA84379ED0, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// System.RuntimeTypeHandle
struct  RuntimeTypeHandle_t7B542280A22F0EC4EAC2061C29178845847A8B2D 
{
public:
	// System.IntPtr System.RuntimeTypeHandle::value
	intptr_t ___value_0;

public:
	inline static int32_t get_offset_of_value_0() { return static_cast<int32_t>(offsetof(RuntimeTypeHandle_t7B542280A22F0EC4EAC2061C29178845847A8B2D, ___value_0)); }
	inline intptr_t get_value_0() const { return ___value_0; }
	inline intptr_t* get_address_of_value_0() { return &___value_0; }
	inline void set_value_0(intptr_t value)
	{
		___value_0 = value;
	}
};


// UnityEngine.Object
struct  Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0  : public RuntimeObject
{
public:
	// System.IntPtr UnityEngine.Object::m_CachedPtr
	intptr_t ___m_CachedPtr_0;

public:
	inline static int32_t get_offset_of_m_CachedPtr_0() { return static_cast<int32_t>(offsetof(Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0, ___m_CachedPtr_0)); }
	inline intptr_t get_m_CachedPtr_0() const { return ___m_CachedPtr_0; }
	inline intptr_t* get_address_of_m_CachedPtr_0() { return &___m_CachedPtr_0; }
	inline void set_m_CachedPtr_0(intptr_t value)
	{
		___m_CachedPtr_0 = value;
	}
};

struct Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0_StaticFields
{
public:
	// System.Int32 UnityEngine.Object::OffsetOfInstanceIDInCPlusPlusObject
	int32_t ___OffsetOfInstanceIDInCPlusPlusObject_1;

public:
	inline static int32_t get_offset_of_OffsetOfInstanceIDInCPlusPlusObject_1() { return static_cast<int32_t>(offsetof(Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0_StaticFields, ___OffsetOfInstanceIDInCPlusPlusObject_1)); }
	inline int32_t get_OffsetOfInstanceIDInCPlusPlusObject_1() const { return ___OffsetOfInstanceIDInCPlusPlusObject_1; }
	inline int32_t* get_address_of_OffsetOfInstanceIDInCPlusPlusObject_1() { return &___OffsetOfInstanceIDInCPlusPlusObject_1; }
	inline void set_OffsetOfInstanceIDInCPlusPlusObject_1(int32_t value)
	{
		___OffsetOfInstanceIDInCPlusPlusObject_1 = value;
	}
};

// Native definition for P/Invoke marshalling of UnityEngine.Object
struct Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0_marshaled_pinvoke
{
	intptr_t ___m_CachedPtr_0;
};
// Native definition for COM marshalling of UnityEngine.Object
struct Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0_marshaled_com
{
	intptr_t ___m_CachedPtr_0;
};

// Valve.VR.CVRInput
struct  CVRInput_t2BE4417A3C1EA0C6CF647B0706BF37F886CE599B  : public RuntimeObject
{
public:
	// Valve.VR.IVRInput Valve.VR.CVRInput::FnTable
	IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78  ___FnTable_0;

public:
	inline static int32_t get_offset_of_FnTable_0() { return static_cast<int32_t>(offsetof(CVRInput_t2BE4417A3C1EA0C6CF647B0706BF37F886CE599B, ___FnTable_0)); }
	inline IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78  get_FnTable_0() const { return ___FnTable_0; }
	inline IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78 * get_address_of_FnTable_0() { return &___FnTable_0; }
	inline void set_FnTable_0(IVRInput_t5FB3A8D55A037DD0328F7BCEA3856E841BC4BC78  value)
	{
		___FnTable_0 = value;
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___SetActionManifestPath_0), (void*)NULL);
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___GetActionSetHandle_1), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___GetActionHandle_2), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___GetInputSourceHandle_3), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___UpdateActionState_4), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___GetDigitalActionData_5), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___GetAnalogActionData_6), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___GetPoseActionDataRelativeToNow_7), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___GetPoseActionDataForNextFrame_8), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___GetSkeletalActionData_9), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___GetDominantHand_10), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___SetDominantHand_11), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___GetBoneCount_12), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___GetBoneHierarchy_13), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___GetBoneName_14), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___GetSkeletalReferenceTransforms_15), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___GetSkeletalTrackingLevel_16), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___GetSkeletalBoneData_17), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___GetSkeletalSummaryData_18), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___GetSkeletalBoneDataCompressed_19), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___DecompressSkeletalBoneData_20), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___TriggerHapticVibrationAction_21), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___GetActionOrigins_22), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___GetOriginLocalizedName_23), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___GetOriginTrackedDeviceInfo_24), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___GetActionBindingInfo_25), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___ShowActionOrigins_26), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___ShowBindingsForActionSet_27), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___GetComponentStateForBinding_28), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___IsUsingLegacyInput_29), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___OpenBindingUI_30), (void*)NULL);
		#endif
		#if IL2CPP_ENABLE_STRICT_WRITE_BARRIERS
		Il2CppCodeGenWriteBarrier((void**)&(((&___FnTable_0))->___GetBindingVariant_31), (void*)NULL);
		#endif
	}
};


// Valve.VR.ETrackingResult
struct  ETrackingResult_t989C2212A7DBCBBF86EA2C1E776BC60223B3126E 
{
public:
	// System.Int32 Valve.VR.ETrackingResult::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(ETrackingResult_t989C2212A7DBCBBF86EA2C1E776BC60223B3126E, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Valve.VR.ETrackingUniverseOrigin
struct  ETrackingUniverseOrigin_t3002504453445C01FD1564845C065DDDEE23937B 
{
public:
	// System.Int32 Valve.VR.ETrackingUniverseOrigin::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(ETrackingUniverseOrigin_t3002504453445C01FD1564845C065DDDEE23937B, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Valve.VR.EVRInputError
struct  EVRInputError_tC8741BE3044407E8FA26F282526B259D93DBF22F 
{
public:
	// System.Int32 Valve.VR.EVRInputError::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(EVRInputError_tC8741BE3044407E8FA26F282526B259D93DBF22F, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Valve.VR.EVRInputStringBits
struct  EVRInputStringBits_t6D50955CC5A3AB1CC794A0582C59C3AC98F60E60 
{
public:
	// System.Int32 Valve.VR.EVRInputStringBits::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(EVRInputStringBits_t6D50955CC5A3AB1CC794A0582C59C3AC98F60E60, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Valve.VR.EVRSkeletalMotionRange
struct  EVRSkeletalMotionRange_t7B3CF169090271D1030B7DBCB36A9F6B9B5833F5 
{
public:
	// System.Int32 Valve.VR.EVRSkeletalMotionRange::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(EVRSkeletalMotionRange_t7B3CF169090271D1030B7DBCB36A9F6B9B5833F5, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Valve.VR.EVRSkeletalReferencePose
struct  EVRSkeletalReferencePose_t9735ED60A5D110A7B9569A57B78D9B212143077F 
{
public:
	// System.Int32 Valve.VR.EVRSkeletalReferencePose::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(EVRSkeletalReferencePose_t9735ED60A5D110A7B9569A57B78D9B212143077F, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Valve.VR.EVRSkeletalTrackingLevel
struct  EVRSkeletalTrackingLevel_tDFEFEB2A62597359105A66DDF2A00CC5B7B8F1AD 
{
public:
	// System.Int32 Valve.VR.EVRSkeletalTrackingLevel::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(EVRSkeletalTrackingLevel_tDFEFEB2A62597359105A66DDF2A00CC5B7B8F1AD, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Valve.VR.EVRSkeletalTransformSpace
struct  EVRSkeletalTransformSpace_t42634E33BB67FB63D23667D5C12E7DCC6C4B90BB 
{
public:
	// System.Int32 Valve.VR.EVRSkeletalTransformSpace::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(EVRSkeletalTransformSpace_t42634E33BB67FB63D23667D5C12E7DCC6C4B90BB, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Valve.VR.EVRSummaryType
struct  EVRSummaryType_t3633B56EEC68A4E79555876B8E7B5C0CE387BF09 
{
public:
	// System.Int32 Valve.VR.EVRSummaryType::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(EVRSummaryType_t3633B56EEC68A4E79555876B8E7B5C0CE387BF09, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Valve.VR.SteamVR_ActionDirections
struct  SteamVR_ActionDirections_tC7760C9A471565840E2F1D11A61E44735571D8B1 
{
public:
	// System.Int32 Valve.VR.SteamVR_ActionDirections::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(SteamVR_ActionDirections_tC7760C9A471565840E2F1D11A61E44735571D8B1, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Valve.VR.SteamVR_Action_In`2<Valve.VR.SteamVR_Action_Skeleton_Source_Map,Valve.VR.SteamVR_Action_Skeleton_Source>
struct  SteamVR_Action_In_2_t648DCC49A164ED0184532F0961391833D01917D6  : public SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D
{
public:

public:
};


// Valve.VR.SteamVR_Action_In`2<Valve.VR.SteamVR_Action_Vector2_Source_Map,Valve.VR.SteamVR_Action_Vector2_Source>
struct  SteamVR_Action_In_2_t4260173E99094920C69878272DE55CE93D5D5A9C  : public SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258
{
public:

public:
};


// Valve.VR.SteamVR_Action_In`2<Valve.VR.SteamVR_Action_Vector3_Source_Map,Valve.VR.SteamVR_Action_Vector3_Source>
struct  SteamVR_Action_In_2_tFC1FB3FBCB26CEB814D8547C997DDFD01A8A0FB2  : public SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902
{
public:

public:
};


// Valve.VR.SteamVR_Input_Sources
struct  SteamVR_Input_Sources_tCE41AA589FB3B9516BDE0DFABDCB4AAEA29528F7 
{
public:
	// System.Int32 Valve.VR.SteamVR_Input_Sources::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(SteamVR_Input_Sources_tCE41AA589FB3B9516BDE0DFABDCB4AAEA29528F7, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Valve.VR.SteamVR_Skeleton_FingerIndexEnum
struct  SteamVR_Skeleton_FingerIndexEnum_t94461F3230EE21117A33A97E423D48FDF7CBF56F 
{
public:
	// System.Int32 Valve.VR.SteamVR_Skeleton_FingerIndexEnum::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(SteamVR_Skeleton_FingerIndexEnum_t94461F3230EE21117A33A97E423D48FDF7CBF56F, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Valve.VR.SteamVR_Skeleton_FingerSplayIndexEnum
struct  SteamVR_Skeleton_FingerSplayIndexEnum_t1117AEF9CE95E514D70A171E86825E39E04D7578 
{
public:
	// System.Int32 Valve.VR.SteamVR_Skeleton_FingerSplayIndexEnum::value__
	int32_t ___value___2;

public:
	inline static int32_t get_offset_of_value___2() { return static_cast<int32_t>(offsetof(SteamVR_Skeleton_FingerSplayIndexEnum_t1117AEF9CE95E514D70A171E86825E39E04D7578, ___value___2)); }
	inline int32_t get_value___2() const { return ___value___2; }
	inline int32_t* get_address_of_value___2() { return &___value___2; }
	inline void set_value___2(int32_t value)
	{
		___value___2 = value;
	}
};


// Valve.VR.VRBoneTransform_t
struct  VRBoneTransform_t_t27C47AE5EA1D078A6DAC070DD9155EEC35F95AD9 
{
public:
	// Valve.VR.HmdVector4_t Valve.VR.VRBoneTransform_t::position
	HmdVector4_t_t97F0B9E146F0A0E38B243B3317E4B1095A8DD0C9  ___position_0;
	// Valve.VR.HmdQuaternionf_t Valve.VR.VRBoneTransform_t::orientation
	HmdQuaternionf_t_t83752025A54692367798FA15BDC82F30F4D97C11  ___orientation_1;

public:
	inline static int32_t get_offset_of_position_0() { return static_cast<int32_t>(offsetof(VRBoneTransform_t_t27C47AE5EA1D078A6DAC070DD9155EEC35F95AD9, ___position_0)); }
	inline HmdVector4_t_t97F0B9E146F0A0E38B243B3317E4B1095A8DD0C9  get_position_0() const { return ___position_0; }
	inline HmdVector4_t_t97F0B9E146F0A0E38B243B3317E4B1095A8DD0C9 * get_address_of_position_0() { return &___position_0; }
	inline void set_position_0(HmdVector4_t_t97F0B9E146F0A0E38B243B3317E4B1095A8DD0C9  value)
	{
		___position_0 = value;
	}

	inline static int32_t get_offset_of_orientation_1() { return static_cast<int32_t>(offsetof(VRBoneTransform_t_t27C47AE5EA1D078A6DAC070DD9155EEC35F95AD9, ___orientation_1)); }
	inline HmdQuaternionf_t_t83752025A54692367798FA15BDC82F30F4D97C11  get_orientation_1() const { return ___orientation_1; }
	inline HmdQuaternionf_t_t83752025A54692367798FA15BDC82F30F4D97C11 * get_address_of_orientation_1() { return &___orientation_1; }
	inline void set_orientation_1(HmdQuaternionf_t_t83752025A54692367798FA15BDC82F30F4D97C11  value)
	{
		___orientation_1 = value;
	}
};


// System.MulticastDelegate
struct  MulticastDelegate_t  : public Delegate_t
{
public:
	// System.Delegate[] System.MulticastDelegate::delegates
	DelegateU5BU5D_tDFCDEE2A6322F96C0FE49AF47E9ADB8C4B294E86* ___delegates_11;

public:
	inline static int32_t get_offset_of_delegates_11() { return static_cast<int32_t>(offsetof(MulticastDelegate_t, ___delegates_11)); }
	inline DelegateU5BU5D_tDFCDEE2A6322F96C0FE49AF47E9ADB8C4B294E86* get_delegates_11() const { return ___delegates_11; }
	inline DelegateU5BU5D_tDFCDEE2A6322F96C0FE49AF47E9ADB8C4B294E86** get_address_of_delegates_11() { return &___delegates_11; }
	inline void set_delegates_11(DelegateU5BU5D_tDFCDEE2A6322F96C0FE49AF47E9ADB8C4B294E86* value)
	{
		___delegates_11 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___delegates_11), (void*)value);
	}
};

// Native definition for P/Invoke marshalling of System.MulticastDelegate
struct MulticastDelegate_t_marshaled_pinvoke : public Delegate_t_marshaled_pinvoke
{
	Delegate_t_marshaled_pinvoke** ___delegates_11;
};
// Native definition for COM marshalling of System.MulticastDelegate
struct MulticastDelegate_t_marshaled_com : public Delegate_t_marshaled_com
{
	Delegate_t_marshaled_com** ___delegates_11;
};

// System.Type
struct  Type_t  : public MemberInfo_t
{
public:
	// System.RuntimeTypeHandle System.Type::_impl
	RuntimeTypeHandle_t7B542280A22F0EC4EAC2061C29178845847A8B2D  ____impl_9;

public:
	inline static int32_t get_offset_of__impl_9() { return static_cast<int32_t>(offsetof(Type_t, ____impl_9)); }
	inline RuntimeTypeHandle_t7B542280A22F0EC4EAC2061C29178845847A8B2D  get__impl_9() const { return ____impl_9; }
	inline RuntimeTypeHandle_t7B542280A22F0EC4EAC2061C29178845847A8B2D * get_address_of__impl_9() { return &____impl_9; }
	inline void set__impl_9(RuntimeTypeHandle_t7B542280A22F0EC4EAC2061C29178845847A8B2D  value)
	{
		____impl_9 = value;
	}
};

struct Type_t_StaticFields
{
public:
	// System.Reflection.MemberFilter System.Type::FilterAttribute
	MemberFilter_t25C1BD92C42BE94426E300787C13C452CB89B381 * ___FilterAttribute_0;
	// System.Reflection.MemberFilter System.Type::FilterName
	MemberFilter_t25C1BD92C42BE94426E300787C13C452CB89B381 * ___FilterName_1;
	// System.Reflection.MemberFilter System.Type::FilterNameIgnoreCase
	MemberFilter_t25C1BD92C42BE94426E300787C13C452CB89B381 * ___FilterNameIgnoreCase_2;
	// System.Object System.Type::Missing
	RuntimeObject * ___Missing_3;
	// System.Char System.Type::Delimiter
	Il2CppChar ___Delimiter_4;
	// System.Type[] System.Type::EmptyTypes
	TypeU5BU5D_t7FE623A666B49176DE123306221193E888A12F5F* ___EmptyTypes_5;
	// System.Reflection.Binder System.Type::defaultBinder
	Binder_t4D5CB06963501D32847C057B57157D6DC49CA759 * ___defaultBinder_6;

public:
	inline static int32_t get_offset_of_FilterAttribute_0() { return static_cast<int32_t>(offsetof(Type_t_StaticFields, ___FilterAttribute_0)); }
	inline MemberFilter_t25C1BD92C42BE94426E300787C13C452CB89B381 * get_FilterAttribute_0() const { return ___FilterAttribute_0; }
	inline MemberFilter_t25C1BD92C42BE94426E300787C13C452CB89B381 ** get_address_of_FilterAttribute_0() { return &___FilterAttribute_0; }
	inline void set_FilterAttribute_0(MemberFilter_t25C1BD92C42BE94426E300787C13C452CB89B381 * value)
	{
		___FilterAttribute_0 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___FilterAttribute_0), (void*)value);
	}

	inline static int32_t get_offset_of_FilterName_1() { return static_cast<int32_t>(offsetof(Type_t_StaticFields, ___FilterName_1)); }
	inline MemberFilter_t25C1BD92C42BE94426E300787C13C452CB89B381 * get_FilterName_1() const { return ___FilterName_1; }
	inline MemberFilter_t25C1BD92C42BE94426E300787C13C452CB89B381 ** get_address_of_FilterName_1() { return &___FilterName_1; }
	inline void set_FilterName_1(MemberFilter_t25C1BD92C42BE94426E300787C13C452CB89B381 * value)
	{
		___FilterName_1 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___FilterName_1), (void*)value);
	}

	inline static int32_t get_offset_of_FilterNameIgnoreCase_2() { return static_cast<int32_t>(offsetof(Type_t_StaticFields, ___FilterNameIgnoreCase_2)); }
	inline MemberFilter_t25C1BD92C42BE94426E300787C13C452CB89B381 * get_FilterNameIgnoreCase_2() const { return ___FilterNameIgnoreCase_2; }
	inline MemberFilter_t25C1BD92C42BE94426E300787C13C452CB89B381 ** get_address_of_FilterNameIgnoreCase_2() { return &___FilterNameIgnoreCase_2; }
	inline void set_FilterNameIgnoreCase_2(MemberFilter_t25C1BD92C42BE94426E300787C13C452CB89B381 * value)
	{
		___FilterNameIgnoreCase_2 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___FilterNameIgnoreCase_2), (void*)value);
	}

	inline static int32_t get_offset_of_Missing_3() { return static_cast<int32_t>(offsetof(Type_t_StaticFields, ___Missing_3)); }
	inline RuntimeObject * get_Missing_3() const { return ___Missing_3; }
	inline RuntimeObject ** get_address_of_Missing_3() { return &___Missing_3; }
	inline void set_Missing_3(RuntimeObject * value)
	{
		___Missing_3 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___Missing_3), (void*)value);
	}

	inline static int32_t get_offset_of_Delimiter_4() { return static_cast<int32_t>(offsetof(Type_t_StaticFields, ___Delimiter_4)); }
	inline Il2CppChar get_Delimiter_4() const { return ___Delimiter_4; }
	inline Il2CppChar* get_address_of_Delimiter_4() { return &___Delimiter_4; }
	inline void set_Delimiter_4(Il2CppChar value)
	{
		___Delimiter_4 = value;
	}

	inline static int32_t get_offset_of_EmptyTypes_5() { return static_cast<int32_t>(offsetof(Type_t_StaticFields, ___EmptyTypes_5)); }
	inline TypeU5BU5D_t7FE623A666B49176DE123306221193E888A12F5F* get_EmptyTypes_5() const { return ___EmptyTypes_5; }
	inline TypeU5BU5D_t7FE623A666B49176DE123306221193E888A12F5F** get_address_of_EmptyTypes_5() { return &___EmptyTypes_5; }
	inline void set_EmptyTypes_5(TypeU5BU5D_t7FE623A666B49176DE123306221193E888A12F5F* value)
	{
		___EmptyTypes_5 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___EmptyTypes_5), (void*)value);
	}

	inline static int32_t get_offset_of_defaultBinder_6() { return static_cast<int32_t>(offsetof(Type_t_StaticFields, ___defaultBinder_6)); }
	inline Binder_t4D5CB06963501D32847C057B57157D6DC49CA759 * get_defaultBinder_6() const { return ___defaultBinder_6; }
	inline Binder_t4D5CB06963501D32847C057B57157D6DC49CA759 ** get_address_of_defaultBinder_6() { return &___defaultBinder_6; }
	inline void set_defaultBinder_6(Binder_t4D5CB06963501D32847C057B57157D6DC49CA759 * value)
	{
		___defaultBinder_6 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___defaultBinder_6), (void*)value);
	}
};


// UnityEngine.Component
struct  Component_t05064EF382ABCAF4B8C94F8A350EA85184C26621  : public Object_tAE11E5E46CD5C37C9F3E8950C00CD8B45666A2D0
{
public:

public:
};


// Valve.VR.SteamVR_Action_Pose_Base`2<Valve.VR.SteamVR_Action_Skeleton_Source_Map,Valve.VR.SteamVR_Action_Skeleton_Source>
struct  SteamVR_Action_Pose_Base_2_tCF260D4E08F45DC042B3B5B7B7A2F6B84880C2C2  : public SteamVR_Action_In_2_t648DCC49A164ED0184532F0961391833D01917D6
{
public:

public:
};


// Valve.VR.SteamVR_Action_Source
struct  SteamVR_Action_Source_t9D7428CDE39924074518EE6233D9A4FAB0C33CB0  : public RuntimeObject
{
public:
	// Valve.VR.SteamVR_Input_Sources Valve.VR.SteamVR_Action_Source::<inputSource>k__BackingField
	int32_t ___U3CinputSourceU3Ek__BackingField_0;
	// System.UInt64 Valve.VR.SteamVR_Action_Source::inputSourceHandle
	uint64_t ___inputSourceHandle_1;
	// Valve.VR.SteamVR_Action Valve.VR.SteamVR_Action_Source::action
	SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 * ___action_2;

public:
	inline static int32_t get_offset_of_U3CinputSourceU3Ek__BackingField_0() { return static_cast<int32_t>(offsetof(SteamVR_Action_Source_t9D7428CDE39924074518EE6233D9A4FAB0C33CB0, ___U3CinputSourceU3Ek__BackingField_0)); }
	inline int32_t get_U3CinputSourceU3Ek__BackingField_0() const { return ___U3CinputSourceU3Ek__BackingField_0; }
	inline int32_t* get_address_of_U3CinputSourceU3Ek__BackingField_0() { return &___U3CinputSourceU3Ek__BackingField_0; }
	inline void set_U3CinputSourceU3Ek__BackingField_0(int32_t value)
	{
		___U3CinputSourceU3Ek__BackingField_0 = value;
	}

	inline static int32_t get_offset_of_inputSourceHandle_1() { return static_cast<int32_t>(offsetof(SteamVR_Action_Source_t9D7428CDE39924074518EE6233D9A4FAB0C33CB0, ___inputSourceHandle_1)); }
	inline uint64_t get_inputSourceHandle_1() const { return ___inputSourceHandle_1; }
	inline uint64_t* get_address_of_inputSourceHandle_1() { return &___inputSourceHandle_1; }
	inline void set_inputSourceHandle_1(uint64_t value)
	{
		___inputSourceHandle_1 = value;
	}

	inline static int32_t get_offset_of_action_2() { return static_cast<int32_t>(offsetof(SteamVR_Action_Source_t9D7428CDE39924074518EE6233D9A4FAB0C33CB0, ___action_2)); }
	inline SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 * get_action_2() const { return ___action_2; }
	inline SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 ** get_address_of_action_2() { return &___action_2; }
	inline void set_action_2(SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 * value)
	{
		___action_2 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___action_2), (void*)value);
	}
};


// Valve.VR.SteamVR_Action_Source_Map
struct  SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17  : public RuntimeObject
{
public:
	// System.String Valve.VR.SteamVR_Action_Source_Map::<fullPath>k__BackingField
	String_t* ___U3CfullPathU3Ek__BackingField_0;
	// System.UInt64 Valve.VR.SteamVR_Action_Source_Map::<handle>k__BackingField
	uint64_t ___U3ChandleU3Ek__BackingField_1;
	// Valve.VR.SteamVR_ActionSet Valve.VR.SteamVR_Action_Source_Map::<actionSet>k__BackingField
	SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6 * ___U3CactionSetU3Ek__BackingField_2;
	// Valve.VR.SteamVR_ActionDirections Valve.VR.SteamVR_Action_Source_Map::<direction>k__BackingField
	int32_t ___U3CdirectionU3Ek__BackingField_3;
	// Valve.VR.SteamVR_Action Valve.VR.SteamVR_Action_Source_Map::action
	SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 * ___action_4;

public:
	inline static int32_t get_offset_of_U3CfullPathU3Ek__BackingField_0() { return static_cast<int32_t>(offsetof(SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17, ___U3CfullPathU3Ek__BackingField_0)); }
	inline String_t* get_U3CfullPathU3Ek__BackingField_0() const { return ___U3CfullPathU3Ek__BackingField_0; }
	inline String_t** get_address_of_U3CfullPathU3Ek__BackingField_0() { return &___U3CfullPathU3Ek__BackingField_0; }
	inline void set_U3CfullPathU3Ek__BackingField_0(String_t* value)
	{
		___U3CfullPathU3Ek__BackingField_0 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___U3CfullPathU3Ek__BackingField_0), (void*)value);
	}

	inline static int32_t get_offset_of_U3ChandleU3Ek__BackingField_1() { return static_cast<int32_t>(offsetof(SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17, ___U3ChandleU3Ek__BackingField_1)); }
	inline uint64_t get_U3ChandleU3Ek__BackingField_1() const { return ___U3ChandleU3Ek__BackingField_1; }
	inline uint64_t* get_address_of_U3ChandleU3Ek__BackingField_1() { return &___U3ChandleU3Ek__BackingField_1; }
	inline void set_U3ChandleU3Ek__BackingField_1(uint64_t value)
	{
		___U3ChandleU3Ek__BackingField_1 = value;
	}

	inline static int32_t get_offset_of_U3CactionSetU3Ek__BackingField_2() { return static_cast<int32_t>(offsetof(SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17, ___U3CactionSetU3Ek__BackingField_2)); }
	inline SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6 * get_U3CactionSetU3Ek__BackingField_2() const { return ___U3CactionSetU3Ek__BackingField_2; }
	inline SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6 ** get_address_of_U3CactionSetU3Ek__BackingField_2() { return &___U3CactionSetU3Ek__BackingField_2; }
	inline void set_U3CactionSetU3Ek__BackingField_2(SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6 * value)
	{
		___U3CactionSetU3Ek__BackingField_2 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___U3CactionSetU3Ek__BackingField_2), (void*)value);
	}

	inline static int32_t get_offset_of_U3CdirectionU3Ek__BackingField_3() { return static_cast<int32_t>(offsetof(SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17, ___U3CdirectionU3Ek__BackingField_3)); }
	inline int32_t get_U3CdirectionU3Ek__BackingField_3() const { return ___U3CdirectionU3Ek__BackingField_3; }
	inline int32_t* get_address_of_U3CdirectionU3Ek__BackingField_3() { return &___U3CdirectionU3Ek__BackingField_3; }
	inline void set_U3CdirectionU3Ek__BackingField_3(int32_t value)
	{
		___U3CdirectionU3Ek__BackingField_3 = value;
	}

	inline static int32_t get_offset_of_action_4() { return static_cast<int32_t>(offsetof(SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17, ___action_4)); }
	inline SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 * get_action_4() const { return ___action_4; }
	inline SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 ** get_address_of_action_4() { return &___action_4; }
	inline void set_action_4(SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 * value)
	{
		___action_4 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___action_4), (void*)value);
	}
};

struct SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17_StaticFields
{
public:
	// System.String Valve.VR.SteamVR_Action_Source_Map::inLowered
	String_t* ___inLowered_5;
	// System.String Valve.VR.SteamVR_Action_Source_Map::outLowered
	String_t* ___outLowered_6;

public:
	inline static int32_t get_offset_of_inLowered_5() { return static_cast<int32_t>(offsetof(SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17_StaticFields, ___inLowered_5)); }
	inline String_t* get_inLowered_5() const { return ___inLowered_5; }
	inline String_t** get_address_of_inLowered_5() { return &___inLowered_5; }
	inline void set_inLowered_5(String_t* value)
	{
		___inLowered_5 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___inLowered_5), (void*)value);
	}

	inline static int32_t get_offset_of_outLowered_6() { return static_cast<int32_t>(offsetof(SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17_StaticFields, ___outLowered_6)); }
	inline String_t* get_outLowered_6() const { return ___outLowered_6; }
	inline String_t** get_address_of_outLowered_6() { return &___outLowered_6; }
	inline void set_outLowered_6(String_t* value)
	{
		___outLowered_6 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___outLowered_6), (void*)value);
	}
};


// Valve.VR.SteamVR_Action_Vector2
struct  SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37  : public SteamVR_Action_In_2_t4260173E99094920C69878272DE55CE93D5D5A9C
{
public:

public:
};


// Valve.VR.SteamVR_Action_Vector3
struct  SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9  : public SteamVR_Action_In_2_tFC1FB3FBCB26CEB814D8547C997DDFD01A8A0FB2
{
public:

public:
};


// Valve.VR.TrackedDevicePose_t
struct  TrackedDevicePose_t_t0028622C5DF863D4DC12877439D4A679A0D46365 
{
public:
	// Valve.VR.HmdMatrix34_t Valve.VR.TrackedDevicePose_t::mDeviceToAbsoluteTracking
	HmdMatrix34_t_t69CC0A858D1EBF95773929B6228EE953DE612669  ___mDeviceToAbsoluteTracking_0;
	// Valve.VR.HmdVector3_t Valve.VR.TrackedDevicePose_t::vVelocity
	HmdVector3_t_t62AE508B69C04959DCD5633927536E28C2E6113A  ___vVelocity_1;
	// Valve.VR.HmdVector3_t Valve.VR.TrackedDevicePose_t::vAngularVelocity
	HmdVector3_t_t62AE508B69C04959DCD5633927536E28C2E6113A  ___vAngularVelocity_2;
	// Valve.VR.ETrackingResult Valve.VR.TrackedDevicePose_t::eTrackingResult
	int32_t ___eTrackingResult_3;
	// System.Boolean Valve.VR.TrackedDevicePose_t::bPoseIsValid
	bool ___bPoseIsValid_4;
	// System.Boolean Valve.VR.TrackedDevicePose_t::bDeviceIsConnected
	bool ___bDeviceIsConnected_5;

public:
	inline static int32_t get_offset_of_mDeviceToAbsoluteTracking_0() { return static_cast<int32_t>(offsetof(TrackedDevicePose_t_t0028622C5DF863D4DC12877439D4A679A0D46365, ___mDeviceToAbsoluteTracking_0)); }
	inline HmdMatrix34_t_t69CC0A858D1EBF95773929B6228EE953DE612669  get_mDeviceToAbsoluteTracking_0() const { return ___mDeviceToAbsoluteTracking_0; }
	inline HmdMatrix34_t_t69CC0A858D1EBF95773929B6228EE953DE612669 * get_address_of_mDeviceToAbsoluteTracking_0() { return &___mDeviceToAbsoluteTracking_0; }
	inline void set_mDeviceToAbsoluteTracking_0(HmdMatrix34_t_t69CC0A858D1EBF95773929B6228EE953DE612669  value)
	{
		___mDeviceToAbsoluteTracking_0 = value;
	}

	inline static int32_t get_offset_of_vVelocity_1() { return static_cast<int32_t>(offsetof(TrackedDevicePose_t_t0028622C5DF863D4DC12877439D4A679A0D46365, ___vVelocity_1)); }
	inline HmdVector3_t_t62AE508B69C04959DCD5633927536E28C2E6113A  get_vVelocity_1() const { return ___vVelocity_1; }
	inline HmdVector3_t_t62AE508B69C04959DCD5633927536E28C2E6113A * get_address_of_vVelocity_1() { return &___vVelocity_1; }
	inline void set_vVelocity_1(HmdVector3_t_t62AE508B69C04959DCD5633927536E28C2E6113A  value)
	{
		___vVelocity_1 = value;
	}

	inline static int32_t get_offset_of_vAngularVelocity_2() { return static_cast<int32_t>(offsetof(TrackedDevicePose_t_t0028622C5DF863D4DC12877439D4A679A0D46365, ___vAngularVelocity_2)); }
	inline HmdVector3_t_t62AE508B69C04959DCD5633927536E28C2E6113A  get_vAngularVelocity_2() const { return ___vAngularVelocity_2; }
	inline HmdVector3_t_t62AE508B69C04959DCD5633927536E28C2E6113A * get_address_of_vAngularVelocity_2() { return &___vAngularVelocity_2; }
	inline void set_vAngularVelocity_2(HmdVector3_t_t62AE508B69C04959DCD5633927536E28C2E6113A  value)
	{
		___vAngularVelocity_2 = value;
	}

	inline static int32_t get_offset_of_eTrackingResult_3() { return static_cast<int32_t>(offsetof(TrackedDevicePose_t_t0028622C5DF863D4DC12877439D4A679A0D46365, ___eTrackingResult_3)); }
	inline int32_t get_eTrackingResult_3() const { return ___eTrackingResult_3; }
	inline int32_t* get_address_of_eTrackingResult_3() { return &___eTrackingResult_3; }
	inline void set_eTrackingResult_3(int32_t value)
	{
		___eTrackingResult_3 = value;
	}

	inline static int32_t get_offset_of_bPoseIsValid_4() { return static_cast<int32_t>(offsetof(TrackedDevicePose_t_t0028622C5DF863D4DC12877439D4A679A0D46365, ___bPoseIsValid_4)); }
	inline bool get_bPoseIsValid_4() const { return ___bPoseIsValid_4; }
	inline bool* get_address_of_bPoseIsValid_4() { return &___bPoseIsValid_4; }
	inline void set_bPoseIsValid_4(bool value)
	{
		___bPoseIsValid_4 = value;
	}

	inline static int32_t get_offset_of_bDeviceIsConnected_5() { return static_cast<int32_t>(offsetof(TrackedDevicePose_t_t0028622C5DF863D4DC12877439D4A679A0D46365, ___bDeviceIsConnected_5)); }
	inline bool get_bDeviceIsConnected_5() const { return ___bDeviceIsConnected_5; }
	inline bool* get_address_of_bDeviceIsConnected_5() { return &___bDeviceIsConnected_5; }
	inline void set_bDeviceIsConnected_5(bool value)
	{
		___bDeviceIsConnected_5 = value;
	}
};


// System.AsyncCallback
struct  AsyncCallback_t3F3DA3BEDAEE81DD1D24125DF8EB30E85EE14DA4  : public MulticastDelegate_t
{
public:

public:
};


// UnityEngine.Transform
struct  Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA  : public Component_t05064EF382ABCAF4B8C94F8A350EA85184C26621
{
public:

public:
};


// Valve.VR.InputPoseActionData_t
struct  InputPoseActionData_t_t6F2C776E0AA5528E702E6079C156B7747182C607 
{
public:
	// System.Boolean Valve.VR.InputPoseActionData_t::bActive
	bool ___bActive_0;
	// System.UInt64 Valve.VR.InputPoseActionData_t::activeOrigin
	uint64_t ___activeOrigin_1;
	// Valve.VR.TrackedDevicePose_t Valve.VR.InputPoseActionData_t::pose
	TrackedDevicePose_t_t0028622C5DF863D4DC12877439D4A679A0D46365  ___pose_2;

public:
	inline static int32_t get_offset_of_bActive_0() { return static_cast<int32_t>(offsetof(InputPoseActionData_t_t6F2C776E0AA5528E702E6079C156B7747182C607, ___bActive_0)); }
	inline bool get_bActive_0() const { return ___bActive_0; }
	inline bool* get_address_of_bActive_0() { return &___bActive_0; }
	inline void set_bActive_0(bool value)
	{
		___bActive_0 = value;
	}

	inline static int32_t get_offset_of_activeOrigin_1() { return static_cast<int32_t>(offsetof(InputPoseActionData_t_t6F2C776E0AA5528E702E6079C156B7747182C607, ___activeOrigin_1)); }
	inline uint64_t get_activeOrigin_1() const { return ___activeOrigin_1; }
	inline uint64_t* get_address_of_activeOrigin_1() { return &___activeOrigin_1; }
	inline void set_activeOrigin_1(uint64_t value)
	{
		___activeOrigin_1 = value;
	}

	inline static int32_t get_offset_of_pose_2() { return static_cast<int32_t>(offsetof(InputPoseActionData_t_t6F2C776E0AA5528E702E6079C156B7747182C607, ___pose_2)); }
	inline TrackedDevicePose_t_t0028622C5DF863D4DC12877439D4A679A0D46365  get_pose_2() const { return ___pose_2; }
	inline TrackedDevicePose_t_t0028622C5DF863D4DC12877439D4A679A0D46365 * get_address_of_pose_2() { return &___pose_2; }
	inline void set_pose_2(TrackedDevicePose_t_t0028622C5DF863D4DC12877439D4A679A0D46365  value)
	{
		___pose_2 = value;
	}
};


// Valve.VR.SteamVR_Action_In_Source
struct  SteamVR_Action_In_Source_t6C3FA81DC7F53D302E49E09F5791E612AC7832AB  : public SteamVR_Action_Source_t9D7428CDE39924074518EE6233D9A4FAB0C33CB0
{
public:
	// System.Boolean Valve.VR.SteamVR_Action_In_Source::<isUpdating>k__BackingField
	bool ___U3CisUpdatingU3Ek__BackingField_4;
	// System.Single Valve.VR.SteamVR_Action_In_Source::<updateTime>k__BackingField
	float ___U3CupdateTimeU3Ek__BackingField_5;
	// System.Single Valve.VR.SteamVR_Action_In_Source::<changedTime>k__BackingField
	float ___U3CchangedTimeU3Ek__BackingField_6;
	// System.Int32 Valve.VR.SteamVR_Action_In_Source::<lastOriginGetFrame>k__BackingField
	int32_t ___U3ClastOriginGetFrameU3Ek__BackingField_7;
	// Valve.VR.InputOriginInfo_t Valve.VR.SteamVR_Action_In_Source::inputOriginInfo
	InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A  ___inputOriginInfo_8;
	// Valve.VR.InputOriginInfo_t Valve.VR.SteamVR_Action_In_Source::lastInputOriginInfo
	InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A  ___lastInputOriginInfo_9;

public:
	inline static int32_t get_offset_of_U3CisUpdatingU3Ek__BackingField_4() { return static_cast<int32_t>(offsetof(SteamVR_Action_In_Source_t6C3FA81DC7F53D302E49E09F5791E612AC7832AB, ___U3CisUpdatingU3Ek__BackingField_4)); }
	inline bool get_U3CisUpdatingU3Ek__BackingField_4() const { return ___U3CisUpdatingU3Ek__BackingField_4; }
	inline bool* get_address_of_U3CisUpdatingU3Ek__BackingField_4() { return &___U3CisUpdatingU3Ek__BackingField_4; }
	inline void set_U3CisUpdatingU3Ek__BackingField_4(bool value)
	{
		___U3CisUpdatingU3Ek__BackingField_4 = value;
	}

	inline static int32_t get_offset_of_U3CupdateTimeU3Ek__BackingField_5() { return static_cast<int32_t>(offsetof(SteamVR_Action_In_Source_t6C3FA81DC7F53D302E49E09F5791E612AC7832AB, ___U3CupdateTimeU3Ek__BackingField_5)); }
	inline float get_U3CupdateTimeU3Ek__BackingField_5() const { return ___U3CupdateTimeU3Ek__BackingField_5; }
	inline float* get_address_of_U3CupdateTimeU3Ek__BackingField_5() { return &___U3CupdateTimeU3Ek__BackingField_5; }
	inline void set_U3CupdateTimeU3Ek__BackingField_5(float value)
	{
		___U3CupdateTimeU3Ek__BackingField_5 = value;
	}

	inline static int32_t get_offset_of_U3CchangedTimeU3Ek__BackingField_6() { return static_cast<int32_t>(offsetof(SteamVR_Action_In_Source_t6C3FA81DC7F53D302E49E09F5791E612AC7832AB, ___U3CchangedTimeU3Ek__BackingField_6)); }
	inline float get_U3CchangedTimeU3Ek__BackingField_6() const { return ___U3CchangedTimeU3Ek__BackingField_6; }
	inline float* get_address_of_U3CchangedTimeU3Ek__BackingField_6() { return &___U3CchangedTimeU3Ek__BackingField_6; }
	inline void set_U3CchangedTimeU3Ek__BackingField_6(float value)
	{
		___U3CchangedTimeU3Ek__BackingField_6 = value;
	}

	inline static int32_t get_offset_of_U3ClastOriginGetFrameU3Ek__BackingField_7() { return static_cast<int32_t>(offsetof(SteamVR_Action_In_Source_t6C3FA81DC7F53D302E49E09F5791E612AC7832AB, ___U3ClastOriginGetFrameU3Ek__BackingField_7)); }
	inline int32_t get_U3ClastOriginGetFrameU3Ek__BackingField_7() const { return ___U3ClastOriginGetFrameU3Ek__BackingField_7; }
	inline int32_t* get_address_of_U3ClastOriginGetFrameU3Ek__BackingField_7() { return &___U3ClastOriginGetFrameU3Ek__BackingField_7; }
	inline void set_U3ClastOriginGetFrameU3Ek__BackingField_7(int32_t value)
	{
		___U3ClastOriginGetFrameU3Ek__BackingField_7 = value;
	}

	inline static int32_t get_offset_of_inputOriginInfo_8() { return static_cast<int32_t>(offsetof(SteamVR_Action_In_Source_t6C3FA81DC7F53D302E49E09F5791E612AC7832AB, ___inputOriginInfo_8)); }
	inline InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A  get_inputOriginInfo_8() const { return ___inputOriginInfo_8; }
	inline InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A * get_address_of_inputOriginInfo_8() { return &___inputOriginInfo_8; }
	inline void set_inputOriginInfo_8(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A  value)
	{
		___inputOriginInfo_8 = value;
	}

	inline static int32_t get_offset_of_lastInputOriginInfo_9() { return static_cast<int32_t>(offsetof(SteamVR_Action_In_Source_t6C3FA81DC7F53D302E49E09F5791E612AC7832AB, ___lastInputOriginInfo_9)); }
	inline InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A  get_lastInputOriginInfo_9() const { return ___lastInputOriginInfo_9; }
	inline InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A * get_address_of_lastInputOriginInfo_9() { return &___lastInputOriginInfo_9; }
	inline void set_lastInputOriginInfo_9(InputOriginInfo_t_t3705CF3B58A0333E5B99988AEC0CF03B79777C3A  value)
	{
		___lastInputOriginInfo_9 = value;
	}
};

struct SteamVR_Action_In_Source_t6C3FA81DC7F53D302E49E09F5791E612AC7832AB_StaticFields
{
public:
	// System.UInt32 Valve.VR.SteamVR_Action_In_Source::inputOriginInfo_size
	uint32_t ___inputOriginInfo_size_3;

public:
	inline static int32_t get_offset_of_inputOriginInfo_size_3() { return static_cast<int32_t>(offsetof(SteamVR_Action_In_Source_t6C3FA81DC7F53D302E49E09F5791E612AC7832AB_StaticFields, ___inputOriginInfo_size_3)); }
	inline uint32_t get_inputOriginInfo_size_3() const { return ___inputOriginInfo_size_3; }
	inline uint32_t* get_address_of_inputOriginInfo_size_3() { return &___inputOriginInfo_size_3; }
	inline void set_inputOriginInfo_size_3(uint32_t value)
	{
		___inputOriginInfo_size_3 = value;
	}
};


// Valve.VR.SteamVR_Action_Skeleton
struct  SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504  : public SteamVR_Action_Pose_Base_2_tCF260D4E08F45DC042B3B5B7B7A2F6B84880C2C2
{
public:

public:
};

struct SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504_StaticFields
{
public:
	// UnityEngine.Quaternion Valve.VR.SteamVR_Action_Skeleton::steamVRFixUpRotation
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___steamVRFixUpRotation_7;

public:
	inline static int32_t get_offset_of_steamVRFixUpRotation_7() { return static_cast<int32_t>(offsetof(SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504_StaticFields, ___steamVRFixUpRotation_7)); }
	inline Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  get_steamVRFixUpRotation_7() const { return ___steamVRFixUpRotation_7; }
	inline Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * get_address_of_steamVRFixUpRotation_7() { return &___steamVRFixUpRotation_7; }
	inline void set_steamVRFixUpRotation_7(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  value)
	{
		___steamVRFixUpRotation_7 = value;
	}
};


// Valve.VR.SteamVR_Action_Skeleton_ActiveChangeHandler
struct  ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4  : public MulticastDelegate_t
{
public:

public:
};


// Valve.VR.SteamVR_Action_Skeleton_ChangeHandler
struct  ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7  : public MulticastDelegate_t
{
public:

public:
};


// Valve.VR.SteamVR_Action_Skeleton_DeviceConnectedChangeHandler
struct  DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592  : public MulticastDelegate_t
{
public:

public:
};


// Valve.VR.SteamVR_Action_Skeleton_TrackingChangeHandler
struct  TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4  : public MulticastDelegate_t
{
public:

public:
};


// Valve.VR.SteamVR_Action_Skeleton_UpdateHandler
struct  UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046  : public MulticastDelegate_t
{
public:

public:
};


// Valve.VR.SteamVR_Action_Skeleton_ValidPoseChangeHandler
struct  ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7  : public MulticastDelegate_t
{
public:

public:
};


// Valve.VR.SteamVR_Action_Source_Map`1<Valve.VR.SteamVR_Action_Single_Source>
struct  SteamVR_Action_Source_Map_1_t35C427C8B75EF289976D4DB641CA212F073FB0A1  : public SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17
{
public:
	// SourceElement[] Valve.VR.SteamVR_Action_Source_Map`1::sources
	SteamVR_Action_Single_SourceU5BU5D_t5C412D6C07F76DC7C2B627B5C442ED002CDEB277* ___sources_7;

public:
	inline static int32_t get_offset_of_sources_7() { return static_cast<int32_t>(offsetof(SteamVR_Action_Source_Map_1_t35C427C8B75EF289976D4DB641CA212F073FB0A1, ___sources_7)); }
	inline SteamVR_Action_Single_SourceU5BU5D_t5C412D6C07F76DC7C2B627B5C442ED002CDEB277* get_sources_7() const { return ___sources_7; }
	inline SteamVR_Action_Single_SourceU5BU5D_t5C412D6C07F76DC7C2B627B5C442ED002CDEB277** get_address_of_sources_7() { return &___sources_7; }
	inline void set_sources_7(SteamVR_Action_Single_SourceU5BU5D_t5C412D6C07F76DC7C2B627B5C442ED002CDEB277* value)
	{
		___sources_7 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___sources_7), (void*)value);
	}
};


// Valve.VR.SteamVR_Action_Source_Map`1<Valve.VR.SteamVR_Action_Skeleton_Source>
struct  SteamVR_Action_Source_Map_1_t27BBF2BA23BB14D6B7B203EF8ABFEF3D68E13AB1  : public SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17
{
public:
	// SourceElement[] Valve.VR.SteamVR_Action_Source_Map`1::sources
	SteamVR_Action_Skeleton_SourceU5BU5D_tD7F80DE17D413EA1E866B222C9A63AEBFF0CE5D4* ___sources_7;

public:
	inline static int32_t get_offset_of_sources_7() { return static_cast<int32_t>(offsetof(SteamVR_Action_Source_Map_1_t27BBF2BA23BB14D6B7B203EF8ABFEF3D68E13AB1, ___sources_7)); }
	inline SteamVR_Action_Skeleton_SourceU5BU5D_tD7F80DE17D413EA1E866B222C9A63AEBFF0CE5D4* get_sources_7() const { return ___sources_7; }
	inline SteamVR_Action_Skeleton_SourceU5BU5D_tD7F80DE17D413EA1E866B222C9A63AEBFF0CE5D4** get_address_of_sources_7() { return &___sources_7; }
	inline void set_sources_7(SteamVR_Action_Skeleton_SourceU5BU5D_tD7F80DE17D413EA1E866B222C9A63AEBFF0CE5D4* value)
	{
		___sources_7 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___sources_7), (void*)value);
	}
};


// Valve.VR.SteamVR_Action_Source_Map`1<Valve.VR.SteamVR_Action_Vector2_Source>
struct  SteamVR_Action_Source_Map_1_tE12722D4173E7C4230CAF8EE7E30368AA130B899  : public SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17
{
public:
	// SourceElement[] Valve.VR.SteamVR_Action_Source_Map`1::sources
	SteamVR_Action_Vector2_SourceU5BU5D_t7FCBB6318B7E6C02575D1D2F50CA74FE49CCB359* ___sources_7;

public:
	inline static int32_t get_offset_of_sources_7() { return static_cast<int32_t>(offsetof(SteamVR_Action_Source_Map_1_tE12722D4173E7C4230CAF8EE7E30368AA130B899, ___sources_7)); }
	inline SteamVR_Action_Vector2_SourceU5BU5D_t7FCBB6318B7E6C02575D1D2F50CA74FE49CCB359* get_sources_7() const { return ___sources_7; }
	inline SteamVR_Action_Vector2_SourceU5BU5D_t7FCBB6318B7E6C02575D1D2F50CA74FE49CCB359** get_address_of_sources_7() { return &___sources_7; }
	inline void set_sources_7(SteamVR_Action_Vector2_SourceU5BU5D_t7FCBB6318B7E6C02575D1D2F50CA74FE49CCB359* value)
	{
		___sources_7 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___sources_7), (void*)value);
	}
};


// Valve.VR.SteamVR_Action_Source_Map`1<Valve.VR.SteamVR_Action_Vector3_Source>
struct  SteamVR_Action_Source_Map_1_tAA298402BDA6A553A0C30790E7129D18A7682C1F  : public SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17
{
public:
	// SourceElement[] Valve.VR.SteamVR_Action_Source_Map`1::sources
	SteamVR_Action_Vector3_SourceU5BU5D_t3786953EC7D2DDE18FE5D1A5C158FE06D1C3E8BF* ___sources_7;

public:
	inline static int32_t get_offset_of_sources_7() { return static_cast<int32_t>(offsetof(SteamVR_Action_Source_Map_1_tAA298402BDA6A553A0C30790E7129D18A7682C1F, ___sources_7)); }
	inline SteamVR_Action_Vector3_SourceU5BU5D_t3786953EC7D2DDE18FE5D1A5C158FE06D1C3E8BF* get_sources_7() const { return ___sources_7; }
	inline SteamVR_Action_Vector3_SourceU5BU5D_t3786953EC7D2DDE18FE5D1A5C158FE06D1C3E8BF** get_address_of_sources_7() { return &___sources_7; }
	inline void set_sources_7(SteamVR_Action_Vector3_SourceU5BU5D_t3786953EC7D2DDE18FE5D1A5C158FE06D1C3E8BF* value)
	{
		___sources_7 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___sources_7), (void*)value);
	}
};


// Valve.VR.SteamVR_Action_Vector2_ActiveChangeHandler
struct  ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2  : public MulticastDelegate_t
{
public:

public:
};


// Valve.VR.SteamVR_Action_Vector2_AxisHandler
struct  AxisHandler_t97FB692AF5465040A2929AB663941933E3567689  : public MulticastDelegate_t
{
public:

public:
};


// Valve.VR.SteamVR_Action_Vector2_ChangeHandler
struct  ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6  : public MulticastDelegate_t
{
public:

public:
};


// Valve.VR.SteamVR_Action_Vector2_UpdateHandler
struct  UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177  : public MulticastDelegate_t
{
public:

public:
};


// Valve.VR.SteamVR_Action_Vector3_ActiveChangeHandler
struct  ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652  : public MulticastDelegate_t
{
public:

public:
};


// Valve.VR.SteamVR_Action_Vector3_AxisHandler
struct  AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779  : public MulticastDelegate_t
{
public:

public:
};


// Valve.VR.SteamVR_Action_Vector3_ChangeHandler
struct  ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B  : public MulticastDelegate_t
{
public:

public:
};


// Valve.VR.SteamVR_Action_Vector3_UpdateHandler
struct  UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75  : public MulticastDelegate_t
{
public:

public:
};


// Valve.VR.SteamVR_Action_In_Source_Map`1<Valve.VR.SteamVR_Action_Single_Source>
struct  SteamVR_Action_In_Source_Map_1_t2C53C7DDA5E7BECE6E12D3EE7BFAB2ADF8781741  : public SteamVR_Action_Source_Map_1_t35C427C8B75EF289976D4DB641CA212F073FB0A1
{
public:
	// System.Collections.Generic.List`1<System.Int32> Valve.VR.SteamVR_Action_In_Source_Map`1::updatingSources
	List_1_tE1526161A558A17A39A8B69D8EEF3801393B6226 * ___updatingSources_8;

public:
	inline static int32_t get_offset_of_updatingSources_8() { return static_cast<int32_t>(offsetof(SteamVR_Action_In_Source_Map_1_t2C53C7DDA5E7BECE6E12D3EE7BFAB2ADF8781741, ___updatingSources_8)); }
	inline List_1_tE1526161A558A17A39A8B69D8EEF3801393B6226 * get_updatingSources_8() const { return ___updatingSources_8; }
	inline List_1_tE1526161A558A17A39A8B69D8EEF3801393B6226 ** get_address_of_updatingSources_8() { return &___updatingSources_8; }
	inline void set_updatingSources_8(List_1_tE1526161A558A17A39A8B69D8EEF3801393B6226 * value)
	{
		___updatingSources_8 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___updatingSources_8), (void*)value);
	}
};


// Valve.VR.SteamVR_Action_In_Source_Map`1<Valve.VR.SteamVR_Action_Skeleton_Source>
struct  SteamVR_Action_In_Source_Map_1_t65B6CC75798A38C0D5EA4E4B15FB9C8DE87145B4  : public SteamVR_Action_Source_Map_1_t27BBF2BA23BB14D6B7B203EF8ABFEF3D68E13AB1
{
public:
	// System.Collections.Generic.List`1<System.Int32> Valve.VR.SteamVR_Action_In_Source_Map`1::updatingSources
	List_1_tE1526161A558A17A39A8B69D8EEF3801393B6226 * ___updatingSources_8;

public:
	inline static int32_t get_offset_of_updatingSources_8() { return static_cast<int32_t>(offsetof(SteamVR_Action_In_Source_Map_1_t65B6CC75798A38C0D5EA4E4B15FB9C8DE87145B4, ___updatingSources_8)); }
	inline List_1_tE1526161A558A17A39A8B69D8EEF3801393B6226 * get_updatingSources_8() const { return ___updatingSources_8; }
	inline List_1_tE1526161A558A17A39A8B69D8EEF3801393B6226 ** get_address_of_updatingSources_8() { return &___updatingSources_8; }
	inline void set_updatingSources_8(List_1_tE1526161A558A17A39A8B69D8EEF3801393B6226 * value)
	{
		___updatingSources_8 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___updatingSources_8), (void*)value);
	}
};


// Valve.VR.SteamVR_Action_In_Source_Map`1<Valve.VR.SteamVR_Action_Vector2_Source>
struct  SteamVR_Action_In_Source_Map_1_tE08712080E22D9A4BAF4C436860AA6226B5FC72D  : public SteamVR_Action_Source_Map_1_tE12722D4173E7C4230CAF8EE7E30368AA130B899
{
public:
	// System.Collections.Generic.List`1<System.Int32> Valve.VR.SteamVR_Action_In_Source_Map`1::updatingSources
	List_1_tE1526161A558A17A39A8B69D8EEF3801393B6226 * ___updatingSources_8;

public:
	inline static int32_t get_offset_of_updatingSources_8() { return static_cast<int32_t>(offsetof(SteamVR_Action_In_Source_Map_1_tE08712080E22D9A4BAF4C436860AA6226B5FC72D, ___updatingSources_8)); }
	inline List_1_tE1526161A558A17A39A8B69D8EEF3801393B6226 * get_updatingSources_8() const { return ___updatingSources_8; }
	inline List_1_tE1526161A558A17A39A8B69D8EEF3801393B6226 ** get_address_of_updatingSources_8() { return &___updatingSources_8; }
	inline void set_updatingSources_8(List_1_tE1526161A558A17A39A8B69D8EEF3801393B6226 * value)
	{
		___updatingSources_8 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___updatingSources_8), (void*)value);
	}
};


// Valve.VR.SteamVR_Action_In_Source_Map`1<Valve.VR.SteamVR_Action_Vector3_Source>
struct  SteamVR_Action_In_Source_Map_1_t462A1CF8307E7E62DA57F8FA49B7405C51117253  : public SteamVR_Action_Source_Map_1_tAA298402BDA6A553A0C30790E7129D18A7682C1F
{
public:
	// System.Collections.Generic.List`1<System.Int32> Valve.VR.SteamVR_Action_In_Source_Map`1::updatingSources
	List_1_tE1526161A558A17A39A8B69D8EEF3801393B6226 * ___updatingSources_8;

public:
	inline static int32_t get_offset_of_updatingSources_8() { return static_cast<int32_t>(offsetof(SteamVR_Action_In_Source_Map_1_t462A1CF8307E7E62DA57F8FA49B7405C51117253, ___updatingSources_8)); }
	inline List_1_tE1526161A558A17A39A8B69D8EEF3801393B6226 * get_updatingSources_8() const { return ___updatingSources_8; }
	inline List_1_tE1526161A558A17A39A8B69D8EEF3801393B6226 ** get_address_of_updatingSources_8() { return &___updatingSources_8; }
	inline void set_updatingSources_8(List_1_tE1526161A558A17A39A8B69D8EEF3801393B6226 * value)
	{
		___updatingSources_8 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___updatingSources_8), (void*)value);
	}
};


// Valve.VR.SteamVR_Action_Pose_Source
struct  SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27  : public SteamVR_Action_In_Source_t6C3FA81DC7F53D302E49E09F5791E612AC7832AB
{
public:
	// Valve.VR.ETrackingUniverseOrigin Valve.VR.SteamVR_Action_Pose_Source::universeOrigin
	int32_t ___universeOrigin_10;
	// System.Single Valve.VR.SteamVR_Action_Pose_Source::changeTolerance
	float ___changeTolerance_12;
	// Valve.VR.SteamVR_Action_Pose_ActiveChangeHandler Valve.VR.SteamVR_Action_Pose_Source::onActiveChange
	ActiveChangeHandler_t2BD02546A8103AFCEA506FDB4C84A21F0218D36E * ___onActiveChange_13;
	// Valve.VR.SteamVR_Action_Pose_ActiveChangeHandler Valve.VR.SteamVR_Action_Pose_Source::onActiveBindingChange
	ActiveChangeHandler_t2BD02546A8103AFCEA506FDB4C84A21F0218D36E * ___onActiveBindingChange_14;
	// Valve.VR.SteamVR_Action_Pose_ChangeHandler Valve.VR.SteamVR_Action_Pose_Source::onChange
	ChangeHandler_tBB749BC376815901B6E13DF03202383F3302BFBE * ___onChange_15;
	// Valve.VR.SteamVR_Action_Pose_UpdateHandler Valve.VR.SteamVR_Action_Pose_Source::onUpdate
	UpdateHandler_t4F6AB1825F5E5CE6A7BBCD6C84541B3DF13C2AA1 * ___onUpdate_16;
	// Valve.VR.SteamVR_Action_Pose_TrackingChangeHandler Valve.VR.SteamVR_Action_Pose_Source::onTrackingChanged
	TrackingChangeHandler_t1CC1FD6A7111B86684B749C4E751B1F5237D2914 * ___onTrackingChanged_17;
	// Valve.VR.SteamVR_Action_Pose_ValidPoseChangeHandler Valve.VR.SteamVR_Action_Pose_Source::onValidPoseChanged
	ValidPoseChangeHandler_t1D487A0B0E2FB0D02C72EF5365E81BCD3E33B41A * ___onValidPoseChanged_18;
	// Valve.VR.SteamVR_Action_Pose_DeviceConnectedChangeHandler Valve.VR.SteamVR_Action_Pose_Source::onDeviceConnectedChanged
	DeviceConnectedChangeHandler_t4AC124A9A94D668A0FB45EA8FC718729CEA3D0D9 * ___onDeviceConnectedChanged_19;
	// System.Boolean Valve.VR.SteamVR_Action_Pose_Source::<changed>k__BackingField
	bool ___U3CchangedU3Ek__BackingField_20;
	// System.Boolean Valve.VR.SteamVR_Action_Pose_Source::<lastChanged>k__BackingField
	bool ___U3ClastChangedU3Ek__BackingField_21;
	// System.Boolean Valve.VR.SteamVR_Action_Pose_Source::<lastActive>k__BackingField
	bool ___U3ClastActiveU3Ek__BackingField_22;
	// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Pose_Source::<localPosition>k__BackingField
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___U3ClocalPositionU3Ek__BackingField_23;
	// UnityEngine.Quaternion Valve.VR.SteamVR_Action_Pose_Source::<localRotation>k__BackingField
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___U3ClocalRotationU3Ek__BackingField_24;
	// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Pose_Source::<lastLocalPosition>k__BackingField
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___U3ClastLocalPositionU3Ek__BackingField_25;
	// UnityEngine.Quaternion Valve.VR.SteamVR_Action_Pose_Source::<lastLocalRotation>k__BackingField
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___U3ClastLocalRotationU3Ek__BackingField_26;
	// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Pose_Source::<velocity>k__BackingField
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___U3CvelocityU3Ek__BackingField_27;
	// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Pose_Source::<lastVelocity>k__BackingField
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___U3ClastVelocityU3Ek__BackingField_28;
	// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Pose_Source::<angularVelocity>k__BackingField
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___U3CangularVelocityU3Ek__BackingField_29;
	// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Pose_Source::<lastAngularVelocity>k__BackingField
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___U3ClastAngularVelocityU3Ek__BackingField_30;
	// Valve.VR.InputPoseActionData_t Valve.VR.SteamVR_Action_Pose_Source::poseActionData
	InputPoseActionData_t_t6F2C776E0AA5528E702E6079C156B7747182C607  ___poseActionData_31;
	// Valve.VR.InputPoseActionData_t Valve.VR.SteamVR_Action_Pose_Source::lastPoseActionData
	InputPoseActionData_t_t6F2C776E0AA5528E702E6079C156B7747182C607  ___lastPoseActionData_32;
	// Valve.VR.InputPoseActionData_t Valve.VR.SteamVR_Action_Pose_Source::tempPoseActionData
	InputPoseActionData_t_t6F2C776E0AA5528E702E6079C156B7747182C607  ___tempPoseActionData_33;
	// Valve.VR.SteamVR_Action_Pose Valve.VR.SteamVR_Action_Pose_Source::poseAction
	SteamVR_Action_Pose_tC80CDCF5892F57737ABFCFF1E7BD7DC52951846C * ___poseAction_34;

public:
	inline static int32_t get_offset_of_universeOrigin_10() { return static_cast<int32_t>(offsetof(SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27, ___universeOrigin_10)); }
	inline int32_t get_universeOrigin_10() const { return ___universeOrigin_10; }
	inline int32_t* get_address_of_universeOrigin_10() { return &___universeOrigin_10; }
	inline void set_universeOrigin_10(int32_t value)
	{
		___universeOrigin_10 = value;
	}

	inline static int32_t get_offset_of_changeTolerance_12() { return static_cast<int32_t>(offsetof(SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27, ___changeTolerance_12)); }
	inline float get_changeTolerance_12() const { return ___changeTolerance_12; }
	inline float* get_address_of_changeTolerance_12() { return &___changeTolerance_12; }
	inline void set_changeTolerance_12(float value)
	{
		___changeTolerance_12 = value;
	}

	inline static int32_t get_offset_of_onActiveChange_13() { return static_cast<int32_t>(offsetof(SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27, ___onActiveChange_13)); }
	inline ActiveChangeHandler_t2BD02546A8103AFCEA506FDB4C84A21F0218D36E * get_onActiveChange_13() const { return ___onActiveChange_13; }
	inline ActiveChangeHandler_t2BD02546A8103AFCEA506FDB4C84A21F0218D36E ** get_address_of_onActiveChange_13() { return &___onActiveChange_13; }
	inline void set_onActiveChange_13(ActiveChangeHandler_t2BD02546A8103AFCEA506FDB4C84A21F0218D36E * value)
	{
		___onActiveChange_13 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onActiveChange_13), (void*)value);
	}

	inline static int32_t get_offset_of_onActiveBindingChange_14() { return static_cast<int32_t>(offsetof(SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27, ___onActiveBindingChange_14)); }
	inline ActiveChangeHandler_t2BD02546A8103AFCEA506FDB4C84A21F0218D36E * get_onActiveBindingChange_14() const { return ___onActiveBindingChange_14; }
	inline ActiveChangeHandler_t2BD02546A8103AFCEA506FDB4C84A21F0218D36E ** get_address_of_onActiveBindingChange_14() { return &___onActiveBindingChange_14; }
	inline void set_onActiveBindingChange_14(ActiveChangeHandler_t2BD02546A8103AFCEA506FDB4C84A21F0218D36E * value)
	{
		___onActiveBindingChange_14 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onActiveBindingChange_14), (void*)value);
	}

	inline static int32_t get_offset_of_onChange_15() { return static_cast<int32_t>(offsetof(SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27, ___onChange_15)); }
	inline ChangeHandler_tBB749BC376815901B6E13DF03202383F3302BFBE * get_onChange_15() const { return ___onChange_15; }
	inline ChangeHandler_tBB749BC376815901B6E13DF03202383F3302BFBE ** get_address_of_onChange_15() { return &___onChange_15; }
	inline void set_onChange_15(ChangeHandler_tBB749BC376815901B6E13DF03202383F3302BFBE * value)
	{
		___onChange_15 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onChange_15), (void*)value);
	}

	inline static int32_t get_offset_of_onUpdate_16() { return static_cast<int32_t>(offsetof(SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27, ___onUpdate_16)); }
	inline UpdateHandler_t4F6AB1825F5E5CE6A7BBCD6C84541B3DF13C2AA1 * get_onUpdate_16() const { return ___onUpdate_16; }
	inline UpdateHandler_t4F6AB1825F5E5CE6A7BBCD6C84541B3DF13C2AA1 ** get_address_of_onUpdate_16() { return &___onUpdate_16; }
	inline void set_onUpdate_16(UpdateHandler_t4F6AB1825F5E5CE6A7BBCD6C84541B3DF13C2AA1 * value)
	{
		___onUpdate_16 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onUpdate_16), (void*)value);
	}

	inline static int32_t get_offset_of_onTrackingChanged_17() { return static_cast<int32_t>(offsetof(SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27, ___onTrackingChanged_17)); }
	inline TrackingChangeHandler_t1CC1FD6A7111B86684B749C4E751B1F5237D2914 * get_onTrackingChanged_17() const { return ___onTrackingChanged_17; }
	inline TrackingChangeHandler_t1CC1FD6A7111B86684B749C4E751B1F5237D2914 ** get_address_of_onTrackingChanged_17() { return &___onTrackingChanged_17; }
	inline void set_onTrackingChanged_17(TrackingChangeHandler_t1CC1FD6A7111B86684B749C4E751B1F5237D2914 * value)
	{
		___onTrackingChanged_17 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onTrackingChanged_17), (void*)value);
	}

	inline static int32_t get_offset_of_onValidPoseChanged_18() { return static_cast<int32_t>(offsetof(SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27, ___onValidPoseChanged_18)); }
	inline ValidPoseChangeHandler_t1D487A0B0E2FB0D02C72EF5365E81BCD3E33B41A * get_onValidPoseChanged_18() const { return ___onValidPoseChanged_18; }
	inline ValidPoseChangeHandler_t1D487A0B0E2FB0D02C72EF5365E81BCD3E33B41A ** get_address_of_onValidPoseChanged_18() { return &___onValidPoseChanged_18; }
	inline void set_onValidPoseChanged_18(ValidPoseChangeHandler_t1D487A0B0E2FB0D02C72EF5365E81BCD3E33B41A * value)
	{
		___onValidPoseChanged_18 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onValidPoseChanged_18), (void*)value);
	}

	inline static int32_t get_offset_of_onDeviceConnectedChanged_19() { return static_cast<int32_t>(offsetof(SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27, ___onDeviceConnectedChanged_19)); }
	inline DeviceConnectedChangeHandler_t4AC124A9A94D668A0FB45EA8FC718729CEA3D0D9 * get_onDeviceConnectedChanged_19() const { return ___onDeviceConnectedChanged_19; }
	inline DeviceConnectedChangeHandler_t4AC124A9A94D668A0FB45EA8FC718729CEA3D0D9 ** get_address_of_onDeviceConnectedChanged_19() { return &___onDeviceConnectedChanged_19; }
	inline void set_onDeviceConnectedChanged_19(DeviceConnectedChangeHandler_t4AC124A9A94D668A0FB45EA8FC718729CEA3D0D9 * value)
	{
		___onDeviceConnectedChanged_19 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onDeviceConnectedChanged_19), (void*)value);
	}

	inline static int32_t get_offset_of_U3CchangedU3Ek__BackingField_20() { return static_cast<int32_t>(offsetof(SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27, ___U3CchangedU3Ek__BackingField_20)); }
	inline bool get_U3CchangedU3Ek__BackingField_20() const { return ___U3CchangedU3Ek__BackingField_20; }
	inline bool* get_address_of_U3CchangedU3Ek__BackingField_20() { return &___U3CchangedU3Ek__BackingField_20; }
	inline void set_U3CchangedU3Ek__BackingField_20(bool value)
	{
		___U3CchangedU3Ek__BackingField_20 = value;
	}

	inline static int32_t get_offset_of_U3ClastChangedU3Ek__BackingField_21() { return static_cast<int32_t>(offsetof(SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27, ___U3ClastChangedU3Ek__BackingField_21)); }
	inline bool get_U3ClastChangedU3Ek__BackingField_21() const { return ___U3ClastChangedU3Ek__BackingField_21; }
	inline bool* get_address_of_U3ClastChangedU3Ek__BackingField_21() { return &___U3ClastChangedU3Ek__BackingField_21; }
	inline void set_U3ClastChangedU3Ek__BackingField_21(bool value)
	{
		___U3ClastChangedU3Ek__BackingField_21 = value;
	}

	inline static int32_t get_offset_of_U3ClastActiveU3Ek__BackingField_22() { return static_cast<int32_t>(offsetof(SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27, ___U3ClastActiveU3Ek__BackingField_22)); }
	inline bool get_U3ClastActiveU3Ek__BackingField_22() const { return ___U3ClastActiveU3Ek__BackingField_22; }
	inline bool* get_address_of_U3ClastActiveU3Ek__BackingField_22() { return &___U3ClastActiveU3Ek__BackingField_22; }
	inline void set_U3ClastActiveU3Ek__BackingField_22(bool value)
	{
		___U3ClastActiveU3Ek__BackingField_22 = value;
	}

	inline static int32_t get_offset_of_U3ClocalPositionU3Ek__BackingField_23() { return static_cast<int32_t>(offsetof(SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27, ___U3ClocalPositionU3Ek__BackingField_23)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_U3ClocalPositionU3Ek__BackingField_23() const { return ___U3ClocalPositionU3Ek__BackingField_23; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_U3ClocalPositionU3Ek__BackingField_23() { return &___U3ClocalPositionU3Ek__BackingField_23; }
	inline void set_U3ClocalPositionU3Ek__BackingField_23(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___U3ClocalPositionU3Ek__BackingField_23 = value;
	}

	inline static int32_t get_offset_of_U3ClocalRotationU3Ek__BackingField_24() { return static_cast<int32_t>(offsetof(SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27, ___U3ClocalRotationU3Ek__BackingField_24)); }
	inline Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  get_U3ClocalRotationU3Ek__BackingField_24() const { return ___U3ClocalRotationU3Ek__BackingField_24; }
	inline Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * get_address_of_U3ClocalRotationU3Ek__BackingField_24() { return &___U3ClocalRotationU3Ek__BackingField_24; }
	inline void set_U3ClocalRotationU3Ek__BackingField_24(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  value)
	{
		___U3ClocalRotationU3Ek__BackingField_24 = value;
	}

	inline static int32_t get_offset_of_U3ClastLocalPositionU3Ek__BackingField_25() { return static_cast<int32_t>(offsetof(SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27, ___U3ClastLocalPositionU3Ek__BackingField_25)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_U3ClastLocalPositionU3Ek__BackingField_25() const { return ___U3ClastLocalPositionU3Ek__BackingField_25; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_U3ClastLocalPositionU3Ek__BackingField_25() { return &___U3ClastLocalPositionU3Ek__BackingField_25; }
	inline void set_U3ClastLocalPositionU3Ek__BackingField_25(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___U3ClastLocalPositionU3Ek__BackingField_25 = value;
	}

	inline static int32_t get_offset_of_U3ClastLocalRotationU3Ek__BackingField_26() { return static_cast<int32_t>(offsetof(SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27, ___U3ClastLocalRotationU3Ek__BackingField_26)); }
	inline Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  get_U3ClastLocalRotationU3Ek__BackingField_26() const { return ___U3ClastLocalRotationU3Ek__BackingField_26; }
	inline Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * get_address_of_U3ClastLocalRotationU3Ek__BackingField_26() { return &___U3ClastLocalRotationU3Ek__BackingField_26; }
	inline void set_U3ClastLocalRotationU3Ek__BackingField_26(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  value)
	{
		___U3ClastLocalRotationU3Ek__BackingField_26 = value;
	}

	inline static int32_t get_offset_of_U3CvelocityU3Ek__BackingField_27() { return static_cast<int32_t>(offsetof(SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27, ___U3CvelocityU3Ek__BackingField_27)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_U3CvelocityU3Ek__BackingField_27() const { return ___U3CvelocityU3Ek__BackingField_27; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_U3CvelocityU3Ek__BackingField_27() { return &___U3CvelocityU3Ek__BackingField_27; }
	inline void set_U3CvelocityU3Ek__BackingField_27(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___U3CvelocityU3Ek__BackingField_27 = value;
	}

	inline static int32_t get_offset_of_U3ClastVelocityU3Ek__BackingField_28() { return static_cast<int32_t>(offsetof(SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27, ___U3ClastVelocityU3Ek__BackingField_28)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_U3ClastVelocityU3Ek__BackingField_28() const { return ___U3ClastVelocityU3Ek__BackingField_28; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_U3ClastVelocityU3Ek__BackingField_28() { return &___U3ClastVelocityU3Ek__BackingField_28; }
	inline void set_U3ClastVelocityU3Ek__BackingField_28(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___U3ClastVelocityU3Ek__BackingField_28 = value;
	}

	inline static int32_t get_offset_of_U3CangularVelocityU3Ek__BackingField_29() { return static_cast<int32_t>(offsetof(SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27, ___U3CangularVelocityU3Ek__BackingField_29)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_U3CangularVelocityU3Ek__BackingField_29() const { return ___U3CangularVelocityU3Ek__BackingField_29; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_U3CangularVelocityU3Ek__BackingField_29() { return &___U3CangularVelocityU3Ek__BackingField_29; }
	inline void set_U3CangularVelocityU3Ek__BackingField_29(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___U3CangularVelocityU3Ek__BackingField_29 = value;
	}

	inline static int32_t get_offset_of_U3ClastAngularVelocityU3Ek__BackingField_30() { return static_cast<int32_t>(offsetof(SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27, ___U3ClastAngularVelocityU3Ek__BackingField_30)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_U3ClastAngularVelocityU3Ek__BackingField_30() const { return ___U3ClastAngularVelocityU3Ek__BackingField_30; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_U3ClastAngularVelocityU3Ek__BackingField_30() { return &___U3ClastAngularVelocityU3Ek__BackingField_30; }
	inline void set_U3ClastAngularVelocityU3Ek__BackingField_30(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___U3ClastAngularVelocityU3Ek__BackingField_30 = value;
	}

	inline static int32_t get_offset_of_poseActionData_31() { return static_cast<int32_t>(offsetof(SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27, ___poseActionData_31)); }
	inline InputPoseActionData_t_t6F2C776E0AA5528E702E6079C156B7747182C607  get_poseActionData_31() const { return ___poseActionData_31; }
	inline InputPoseActionData_t_t6F2C776E0AA5528E702E6079C156B7747182C607 * get_address_of_poseActionData_31() { return &___poseActionData_31; }
	inline void set_poseActionData_31(InputPoseActionData_t_t6F2C776E0AA5528E702E6079C156B7747182C607  value)
	{
		___poseActionData_31 = value;
	}

	inline static int32_t get_offset_of_lastPoseActionData_32() { return static_cast<int32_t>(offsetof(SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27, ___lastPoseActionData_32)); }
	inline InputPoseActionData_t_t6F2C776E0AA5528E702E6079C156B7747182C607  get_lastPoseActionData_32() const { return ___lastPoseActionData_32; }
	inline InputPoseActionData_t_t6F2C776E0AA5528E702E6079C156B7747182C607 * get_address_of_lastPoseActionData_32() { return &___lastPoseActionData_32; }
	inline void set_lastPoseActionData_32(InputPoseActionData_t_t6F2C776E0AA5528E702E6079C156B7747182C607  value)
	{
		___lastPoseActionData_32 = value;
	}

	inline static int32_t get_offset_of_tempPoseActionData_33() { return static_cast<int32_t>(offsetof(SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27, ___tempPoseActionData_33)); }
	inline InputPoseActionData_t_t6F2C776E0AA5528E702E6079C156B7747182C607  get_tempPoseActionData_33() const { return ___tempPoseActionData_33; }
	inline InputPoseActionData_t_t6F2C776E0AA5528E702E6079C156B7747182C607 * get_address_of_tempPoseActionData_33() { return &___tempPoseActionData_33; }
	inline void set_tempPoseActionData_33(InputPoseActionData_t_t6F2C776E0AA5528E702E6079C156B7747182C607  value)
	{
		___tempPoseActionData_33 = value;
	}

	inline static int32_t get_offset_of_poseAction_34() { return static_cast<int32_t>(offsetof(SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27, ___poseAction_34)); }
	inline SteamVR_Action_Pose_tC80CDCF5892F57737ABFCFF1E7BD7DC52951846C * get_poseAction_34() const { return ___poseAction_34; }
	inline SteamVR_Action_Pose_tC80CDCF5892F57737ABFCFF1E7BD7DC52951846C ** get_address_of_poseAction_34() { return &___poseAction_34; }
	inline void set_poseAction_34(SteamVR_Action_Pose_tC80CDCF5892F57737ABFCFF1E7BD7DC52951846C * value)
	{
		___poseAction_34 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___poseAction_34), (void*)value);
	}
};

struct SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27_StaticFields
{
public:
	// System.UInt32 Valve.VR.SteamVR_Action_Pose_Source::poseActionData_size
	uint32_t ___poseActionData_size_11;
	// System.Single Valve.VR.SteamVR_Action_Pose_Source::framesAhead
	float ___framesAhead_35;

public:
	inline static int32_t get_offset_of_poseActionData_size_11() { return static_cast<int32_t>(offsetof(SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27_StaticFields, ___poseActionData_size_11)); }
	inline uint32_t get_poseActionData_size_11() const { return ___poseActionData_size_11; }
	inline uint32_t* get_address_of_poseActionData_size_11() { return &___poseActionData_size_11; }
	inline void set_poseActionData_size_11(uint32_t value)
	{
		___poseActionData_size_11 = value;
	}

	inline static int32_t get_offset_of_framesAhead_35() { return static_cast<int32_t>(offsetof(SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27_StaticFields, ___framesAhead_35)); }
	inline float get_framesAhead_35() const { return ___framesAhead_35; }
	inline float* get_address_of_framesAhead_35() { return &___framesAhead_35; }
	inline void set_framesAhead_35(float value)
	{
		___framesAhead_35 = value;
	}
};


// Valve.VR.SteamVR_Action_Vector2_Source
struct  SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1  : public SteamVR_Action_In_Source_t6C3FA81DC7F53D302E49E09F5791E612AC7832AB
{
public:
	// System.Single Valve.VR.SteamVR_Action_Vector2_Source::changeTolerance
	float ___changeTolerance_11;
	// Valve.VR.SteamVR_Action_Vector2_AxisHandler Valve.VR.SteamVR_Action_Vector2_Source::onAxis
	AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * ___onAxis_12;
	// Valve.VR.SteamVR_Action_Vector2_ActiveChangeHandler Valve.VR.SteamVR_Action_Vector2_Source::onActiveChange
	ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * ___onActiveChange_13;
	// Valve.VR.SteamVR_Action_Vector2_ActiveChangeHandler Valve.VR.SteamVR_Action_Vector2_Source::onActiveBindingChange
	ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * ___onActiveBindingChange_14;
	// Valve.VR.SteamVR_Action_Vector2_ChangeHandler Valve.VR.SteamVR_Action_Vector2_Source::onChange
	ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * ___onChange_15;
	// Valve.VR.SteamVR_Action_Vector2_UpdateHandler Valve.VR.SteamVR_Action_Vector2_Source::onUpdate
	UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * ___onUpdate_16;
	// UnityEngine.Vector2 Valve.VR.SteamVR_Action_Vector2_Source::<axis>k__BackingField
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___U3CaxisU3Ek__BackingField_17;
	// UnityEngine.Vector2 Valve.VR.SteamVR_Action_Vector2_Source::<lastAxis>k__BackingField
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___U3ClastAxisU3Ek__BackingField_18;
	// UnityEngine.Vector2 Valve.VR.SteamVR_Action_Vector2_Source::<delta>k__BackingField
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___U3CdeltaU3Ek__BackingField_19;
	// UnityEngine.Vector2 Valve.VR.SteamVR_Action_Vector2_Source::<lastDelta>k__BackingField
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___U3ClastDeltaU3Ek__BackingField_20;
	// System.Boolean Valve.VR.SteamVR_Action_Vector2_Source::<changed>k__BackingField
	bool ___U3CchangedU3Ek__BackingField_21;
	// System.Boolean Valve.VR.SteamVR_Action_Vector2_Source::<lastChanged>k__BackingField
	bool ___U3ClastChangedU3Ek__BackingField_22;
	// System.Boolean Valve.VR.SteamVR_Action_Vector2_Source::<lastActive>k__BackingField
	bool ___U3ClastActiveU3Ek__BackingField_23;
	// Valve.VR.InputAnalogActionData_t Valve.VR.SteamVR_Action_Vector2_Source::actionData
	InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C  ___actionData_24;
	// Valve.VR.InputAnalogActionData_t Valve.VR.SteamVR_Action_Vector2_Source::lastActionData
	InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C  ___lastActionData_25;
	// Valve.VR.SteamVR_Action_Vector2 Valve.VR.SteamVR_Action_Vector2_Source::vector2Action
	SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * ___vector2Action_26;

public:
	inline static int32_t get_offset_of_changeTolerance_11() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1, ___changeTolerance_11)); }
	inline float get_changeTolerance_11() const { return ___changeTolerance_11; }
	inline float* get_address_of_changeTolerance_11() { return &___changeTolerance_11; }
	inline void set_changeTolerance_11(float value)
	{
		___changeTolerance_11 = value;
	}

	inline static int32_t get_offset_of_onAxis_12() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1, ___onAxis_12)); }
	inline AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * get_onAxis_12() const { return ___onAxis_12; }
	inline AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 ** get_address_of_onAxis_12() { return &___onAxis_12; }
	inline void set_onAxis_12(AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * value)
	{
		___onAxis_12 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onAxis_12), (void*)value);
	}

	inline static int32_t get_offset_of_onActiveChange_13() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1, ___onActiveChange_13)); }
	inline ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * get_onActiveChange_13() const { return ___onActiveChange_13; }
	inline ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 ** get_address_of_onActiveChange_13() { return &___onActiveChange_13; }
	inline void set_onActiveChange_13(ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * value)
	{
		___onActiveChange_13 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onActiveChange_13), (void*)value);
	}

	inline static int32_t get_offset_of_onActiveBindingChange_14() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1, ___onActiveBindingChange_14)); }
	inline ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * get_onActiveBindingChange_14() const { return ___onActiveBindingChange_14; }
	inline ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 ** get_address_of_onActiveBindingChange_14() { return &___onActiveBindingChange_14; }
	inline void set_onActiveBindingChange_14(ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * value)
	{
		___onActiveBindingChange_14 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onActiveBindingChange_14), (void*)value);
	}

	inline static int32_t get_offset_of_onChange_15() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1, ___onChange_15)); }
	inline ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * get_onChange_15() const { return ___onChange_15; }
	inline ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 ** get_address_of_onChange_15() { return &___onChange_15; }
	inline void set_onChange_15(ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * value)
	{
		___onChange_15 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onChange_15), (void*)value);
	}

	inline static int32_t get_offset_of_onUpdate_16() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1, ___onUpdate_16)); }
	inline UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * get_onUpdate_16() const { return ___onUpdate_16; }
	inline UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 ** get_address_of_onUpdate_16() { return &___onUpdate_16; }
	inline void set_onUpdate_16(UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * value)
	{
		___onUpdate_16 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onUpdate_16), (void*)value);
	}

	inline static int32_t get_offset_of_U3CaxisU3Ek__BackingField_17() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1, ___U3CaxisU3Ek__BackingField_17)); }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  get_U3CaxisU3Ek__BackingField_17() const { return ___U3CaxisU3Ek__BackingField_17; }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * get_address_of_U3CaxisU3Ek__BackingField_17() { return &___U3CaxisU3Ek__BackingField_17; }
	inline void set_U3CaxisU3Ek__BackingField_17(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  value)
	{
		___U3CaxisU3Ek__BackingField_17 = value;
	}

	inline static int32_t get_offset_of_U3ClastAxisU3Ek__BackingField_18() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1, ___U3ClastAxisU3Ek__BackingField_18)); }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  get_U3ClastAxisU3Ek__BackingField_18() const { return ___U3ClastAxisU3Ek__BackingField_18; }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * get_address_of_U3ClastAxisU3Ek__BackingField_18() { return &___U3ClastAxisU3Ek__BackingField_18; }
	inline void set_U3ClastAxisU3Ek__BackingField_18(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  value)
	{
		___U3ClastAxisU3Ek__BackingField_18 = value;
	}

	inline static int32_t get_offset_of_U3CdeltaU3Ek__BackingField_19() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1, ___U3CdeltaU3Ek__BackingField_19)); }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  get_U3CdeltaU3Ek__BackingField_19() const { return ___U3CdeltaU3Ek__BackingField_19; }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * get_address_of_U3CdeltaU3Ek__BackingField_19() { return &___U3CdeltaU3Ek__BackingField_19; }
	inline void set_U3CdeltaU3Ek__BackingField_19(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  value)
	{
		___U3CdeltaU3Ek__BackingField_19 = value;
	}

	inline static int32_t get_offset_of_U3ClastDeltaU3Ek__BackingField_20() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1, ___U3ClastDeltaU3Ek__BackingField_20)); }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  get_U3ClastDeltaU3Ek__BackingField_20() const { return ___U3ClastDeltaU3Ek__BackingField_20; }
	inline Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * get_address_of_U3ClastDeltaU3Ek__BackingField_20() { return &___U3ClastDeltaU3Ek__BackingField_20; }
	inline void set_U3ClastDeltaU3Ek__BackingField_20(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  value)
	{
		___U3ClastDeltaU3Ek__BackingField_20 = value;
	}

	inline static int32_t get_offset_of_U3CchangedU3Ek__BackingField_21() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1, ___U3CchangedU3Ek__BackingField_21)); }
	inline bool get_U3CchangedU3Ek__BackingField_21() const { return ___U3CchangedU3Ek__BackingField_21; }
	inline bool* get_address_of_U3CchangedU3Ek__BackingField_21() { return &___U3CchangedU3Ek__BackingField_21; }
	inline void set_U3CchangedU3Ek__BackingField_21(bool value)
	{
		___U3CchangedU3Ek__BackingField_21 = value;
	}

	inline static int32_t get_offset_of_U3ClastChangedU3Ek__BackingField_22() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1, ___U3ClastChangedU3Ek__BackingField_22)); }
	inline bool get_U3ClastChangedU3Ek__BackingField_22() const { return ___U3ClastChangedU3Ek__BackingField_22; }
	inline bool* get_address_of_U3ClastChangedU3Ek__BackingField_22() { return &___U3ClastChangedU3Ek__BackingField_22; }
	inline void set_U3ClastChangedU3Ek__BackingField_22(bool value)
	{
		___U3ClastChangedU3Ek__BackingField_22 = value;
	}

	inline static int32_t get_offset_of_U3ClastActiveU3Ek__BackingField_23() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1, ___U3ClastActiveU3Ek__BackingField_23)); }
	inline bool get_U3ClastActiveU3Ek__BackingField_23() const { return ___U3ClastActiveU3Ek__BackingField_23; }
	inline bool* get_address_of_U3ClastActiveU3Ek__BackingField_23() { return &___U3ClastActiveU3Ek__BackingField_23; }
	inline void set_U3ClastActiveU3Ek__BackingField_23(bool value)
	{
		___U3ClastActiveU3Ek__BackingField_23 = value;
	}

	inline static int32_t get_offset_of_actionData_24() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1, ___actionData_24)); }
	inline InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C  get_actionData_24() const { return ___actionData_24; }
	inline InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * get_address_of_actionData_24() { return &___actionData_24; }
	inline void set_actionData_24(InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C  value)
	{
		___actionData_24 = value;
	}

	inline static int32_t get_offset_of_lastActionData_25() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1, ___lastActionData_25)); }
	inline InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C  get_lastActionData_25() const { return ___lastActionData_25; }
	inline InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * get_address_of_lastActionData_25() { return &___lastActionData_25; }
	inline void set_lastActionData_25(InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C  value)
	{
		___lastActionData_25 = value;
	}

	inline static int32_t get_offset_of_vector2Action_26() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1, ___vector2Action_26)); }
	inline SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * get_vector2Action_26() const { return ___vector2Action_26; }
	inline SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 ** get_address_of_vector2Action_26() { return &___vector2Action_26; }
	inline void set_vector2Action_26(SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * value)
	{
		___vector2Action_26 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___vector2Action_26), (void*)value);
	}
};

struct SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1_StaticFields
{
public:
	// System.UInt32 Valve.VR.SteamVR_Action_Vector2_Source::actionData_size
	uint32_t ___actionData_size_10;

public:
	inline static int32_t get_offset_of_actionData_size_10() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1_StaticFields, ___actionData_size_10)); }
	inline uint32_t get_actionData_size_10() const { return ___actionData_size_10; }
	inline uint32_t* get_address_of_actionData_size_10() { return &___actionData_size_10; }
	inline void set_actionData_size_10(uint32_t value)
	{
		___actionData_size_10 = value;
	}
};


// Valve.VR.SteamVR_Action_Vector3_Source
struct  SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90  : public SteamVR_Action_In_Source_t6C3FA81DC7F53D302E49E09F5791E612AC7832AB
{
public:
	// System.Single Valve.VR.SteamVR_Action_Vector3_Source::changeTolerance
	float ___changeTolerance_11;
	// Valve.VR.SteamVR_Action_Vector3_AxisHandler Valve.VR.SteamVR_Action_Vector3_Source::onAxis
	AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * ___onAxis_12;
	// Valve.VR.SteamVR_Action_Vector3_ActiveChangeHandler Valve.VR.SteamVR_Action_Vector3_Source::onActiveChange
	ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * ___onActiveChange_13;
	// Valve.VR.SteamVR_Action_Vector3_ActiveChangeHandler Valve.VR.SteamVR_Action_Vector3_Source::onActiveBindingChange
	ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * ___onActiveBindingChange_14;
	// Valve.VR.SteamVR_Action_Vector3_ChangeHandler Valve.VR.SteamVR_Action_Vector3_Source::onChange
	ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * ___onChange_15;
	// Valve.VR.SteamVR_Action_Vector3_UpdateHandler Valve.VR.SteamVR_Action_Vector3_Source::onUpdate
	UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * ___onUpdate_16;
	// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Vector3_Source::<axis>k__BackingField
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___U3CaxisU3Ek__BackingField_17;
	// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Vector3_Source::<lastAxis>k__BackingField
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___U3ClastAxisU3Ek__BackingField_18;
	// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Vector3_Source::<delta>k__BackingField
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___U3CdeltaU3Ek__BackingField_19;
	// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Vector3_Source::<lastDelta>k__BackingField
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___U3ClastDeltaU3Ek__BackingField_20;
	// System.Boolean Valve.VR.SteamVR_Action_Vector3_Source::<changed>k__BackingField
	bool ___U3CchangedU3Ek__BackingField_21;
	// System.Boolean Valve.VR.SteamVR_Action_Vector3_Source::<lastChanged>k__BackingField
	bool ___U3ClastChangedU3Ek__BackingField_22;
	// System.Boolean Valve.VR.SteamVR_Action_Vector3_Source::<lastActive>k__BackingField
	bool ___U3ClastActiveU3Ek__BackingField_23;
	// Valve.VR.InputAnalogActionData_t Valve.VR.SteamVR_Action_Vector3_Source::actionData
	InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C  ___actionData_24;
	// Valve.VR.InputAnalogActionData_t Valve.VR.SteamVR_Action_Vector3_Source::lastActionData
	InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C  ___lastActionData_25;
	// Valve.VR.SteamVR_Action_Vector3 Valve.VR.SteamVR_Action_Vector3_Source::vector3Action
	SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * ___vector3Action_26;

public:
	inline static int32_t get_offset_of_changeTolerance_11() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90, ___changeTolerance_11)); }
	inline float get_changeTolerance_11() const { return ___changeTolerance_11; }
	inline float* get_address_of_changeTolerance_11() { return &___changeTolerance_11; }
	inline void set_changeTolerance_11(float value)
	{
		___changeTolerance_11 = value;
	}

	inline static int32_t get_offset_of_onAxis_12() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90, ___onAxis_12)); }
	inline AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * get_onAxis_12() const { return ___onAxis_12; }
	inline AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 ** get_address_of_onAxis_12() { return &___onAxis_12; }
	inline void set_onAxis_12(AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * value)
	{
		___onAxis_12 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onAxis_12), (void*)value);
	}

	inline static int32_t get_offset_of_onActiveChange_13() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90, ___onActiveChange_13)); }
	inline ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * get_onActiveChange_13() const { return ___onActiveChange_13; }
	inline ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 ** get_address_of_onActiveChange_13() { return &___onActiveChange_13; }
	inline void set_onActiveChange_13(ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * value)
	{
		___onActiveChange_13 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onActiveChange_13), (void*)value);
	}

	inline static int32_t get_offset_of_onActiveBindingChange_14() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90, ___onActiveBindingChange_14)); }
	inline ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * get_onActiveBindingChange_14() const { return ___onActiveBindingChange_14; }
	inline ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 ** get_address_of_onActiveBindingChange_14() { return &___onActiveBindingChange_14; }
	inline void set_onActiveBindingChange_14(ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * value)
	{
		___onActiveBindingChange_14 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onActiveBindingChange_14), (void*)value);
	}

	inline static int32_t get_offset_of_onChange_15() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90, ___onChange_15)); }
	inline ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * get_onChange_15() const { return ___onChange_15; }
	inline ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B ** get_address_of_onChange_15() { return &___onChange_15; }
	inline void set_onChange_15(ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * value)
	{
		___onChange_15 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onChange_15), (void*)value);
	}

	inline static int32_t get_offset_of_onUpdate_16() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90, ___onUpdate_16)); }
	inline UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * get_onUpdate_16() const { return ___onUpdate_16; }
	inline UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 ** get_address_of_onUpdate_16() { return &___onUpdate_16; }
	inline void set_onUpdate_16(UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * value)
	{
		___onUpdate_16 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onUpdate_16), (void*)value);
	}

	inline static int32_t get_offset_of_U3CaxisU3Ek__BackingField_17() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90, ___U3CaxisU3Ek__BackingField_17)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_U3CaxisU3Ek__BackingField_17() const { return ___U3CaxisU3Ek__BackingField_17; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_U3CaxisU3Ek__BackingField_17() { return &___U3CaxisU3Ek__BackingField_17; }
	inline void set_U3CaxisU3Ek__BackingField_17(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___U3CaxisU3Ek__BackingField_17 = value;
	}

	inline static int32_t get_offset_of_U3ClastAxisU3Ek__BackingField_18() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90, ___U3ClastAxisU3Ek__BackingField_18)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_U3ClastAxisU3Ek__BackingField_18() const { return ___U3ClastAxisU3Ek__BackingField_18; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_U3ClastAxisU3Ek__BackingField_18() { return &___U3ClastAxisU3Ek__BackingField_18; }
	inline void set_U3ClastAxisU3Ek__BackingField_18(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___U3ClastAxisU3Ek__BackingField_18 = value;
	}

	inline static int32_t get_offset_of_U3CdeltaU3Ek__BackingField_19() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90, ___U3CdeltaU3Ek__BackingField_19)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_U3CdeltaU3Ek__BackingField_19() const { return ___U3CdeltaU3Ek__BackingField_19; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_U3CdeltaU3Ek__BackingField_19() { return &___U3CdeltaU3Ek__BackingField_19; }
	inline void set_U3CdeltaU3Ek__BackingField_19(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___U3CdeltaU3Ek__BackingField_19 = value;
	}

	inline static int32_t get_offset_of_U3ClastDeltaU3Ek__BackingField_20() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90, ___U3ClastDeltaU3Ek__BackingField_20)); }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  get_U3ClastDeltaU3Ek__BackingField_20() const { return ___U3ClastDeltaU3Ek__BackingField_20; }
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * get_address_of_U3ClastDeltaU3Ek__BackingField_20() { return &___U3ClastDeltaU3Ek__BackingField_20; }
	inline void set_U3ClastDeltaU3Ek__BackingField_20(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		___U3ClastDeltaU3Ek__BackingField_20 = value;
	}

	inline static int32_t get_offset_of_U3CchangedU3Ek__BackingField_21() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90, ___U3CchangedU3Ek__BackingField_21)); }
	inline bool get_U3CchangedU3Ek__BackingField_21() const { return ___U3CchangedU3Ek__BackingField_21; }
	inline bool* get_address_of_U3CchangedU3Ek__BackingField_21() { return &___U3CchangedU3Ek__BackingField_21; }
	inline void set_U3CchangedU3Ek__BackingField_21(bool value)
	{
		___U3CchangedU3Ek__BackingField_21 = value;
	}

	inline static int32_t get_offset_of_U3ClastChangedU3Ek__BackingField_22() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90, ___U3ClastChangedU3Ek__BackingField_22)); }
	inline bool get_U3ClastChangedU3Ek__BackingField_22() const { return ___U3ClastChangedU3Ek__BackingField_22; }
	inline bool* get_address_of_U3ClastChangedU3Ek__BackingField_22() { return &___U3ClastChangedU3Ek__BackingField_22; }
	inline void set_U3ClastChangedU3Ek__BackingField_22(bool value)
	{
		___U3ClastChangedU3Ek__BackingField_22 = value;
	}

	inline static int32_t get_offset_of_U3ClastActiveU3Ek__BackingField_23() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90, ___U3ClastActiveU3Ek__BackingField_23)); }
	inline bool get_U3ClastActiveU3Ek__BackingField_23() const { return ___U3ClastActiveU3Ek__BackingField_23; }
	inline bool* get_address_of_U3ClastActiveU3Ek__BackingField_23() { return &___U3ClastActiveU3Ek__BackingField_23; }
	inline void set_U3ClastActiveU3Ek__BackingField_23(bool value)
	{
		___U3ClastActiveU3Ek__BackingField_23 = value;
	}

	inline static int32_t get_offset_of_actionData_24() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90, ___actionData_24)); }
	inline InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C  get_actionData_24() const { return ___actionData_24; }
	inline InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * get_address_of_actionData_24() { return &___actionData_24; }
	inline void set_actionData_24(InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C  value)
	{
		___actionData_24 = value;
	}

	inline static int32_t get_offset_of_lastActionData_25() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90, ___lastActionData_25)); }
	inline InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C  get_lastActionData_25() const { return ___lastActionData_25; }
	inline InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * get_address_of_lastActionData_25() { return &___lastActionData_25; }
	inline void set_lastActionData_25(InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C  value)
	{
		___lastActionData_25 = value;
	}

	inline static int32_t get_offset_of_vector3Action_26() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90, ___vector3Action_26)); }
	inline SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * get_vector3Action_26() const { return ___vector3Action_26; }
	inline SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 ** get_address_of_vector3Action_26() { return &___vector3Action_26; }
	inline void set_vector3Action_26(SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * value)
	{
		___vector3Action_26 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___vector3Action_26), (void*)value);
	}
};

struct SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90_StaticFields
{
public:
	// System.UInt32 Valve.VR.SteamVR_Action_Vector3_Source::actionData_size
	uint32_t ___actionData_size_10;

public:
	inline static int32_t get_offset_of_actionData_size_10() { return static_cast<int32_t>(offsetof(SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90_StaticFields, ___actionData_size_10)); }
	inline uint32_t get_actionData_size_10() const { return ___actionData_size_10; }
	inline uint32_t* get_address_of_actionData_size_10() { return &___actionData_size_10; }
	inline void set_actionData_size_10(uint32_t value)
	{
		___actionData_size_10 = value;
	}
};


// Valve.VR.SteamVR_Action_Pose_Source_Map`1<Valve.VR.SteamVR_Action_Skeleton_Source>
struct  SteamVR_Action_Pose_Source_Map_1_t62FCD50EDE24217AD6FAFADAC23DA65555B7A125  : public SteamVR_Action_In_Source_Map_1_t65B6CC75798A38C0D5EA4E4B15FB9C8DE87145B4
{
public:

public:
};


// Valve.VR.SteamVR_Action_Single_Source_Map
struct  SteamVR_Action_Single_Source_Map_tBD46D15F4FCB5A4B6BDA2B1FE96035D4DDBDBA37  : public SteamVR_Action_In_Source_Map_1_t2C53C7DDA5E7BECE6E12D3EE7BFAB2ADF8781741
{
public:

public:
};


// Valve.VR.SteamVR_Action_Skeleton_Source
struct  SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72  : public SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27
{
public:
	// Valve.VR.SteamVR_Action_Skeleton_ActiveChangeHandler Valve.VR.SteamVR_Action_Skeleton_Source::onActiveChange
	ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * ___onActiveChange_37;
	// Valve.VR.SteamVR_Action_Skeleton_ActiveChangeHandler Valve.VR.SteamVR_Action_Skeleton_Source::onActiveBindingChange
	ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * ___onActiveBindingChange_38;
	// Valve.VR.SteamVR_Action_Skeleton_ChangeHandler Valve.VR.SteamVR_Action_Skeleton_Source::onChange
	ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * ___onChange_39;
	// Valve.VR.SteamVR_Action_Skeleton_UpdateHandler Valve.VR.SteamVR_Action_Skeleton_Source::onUpdate
	UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * ___onUpdate_40;
	// Valve.VR.SteamVR_Action_Skeleton_TrackingChangeHandler Valve.VR.SteamVR_Action_Skeleton_Source::onTrackingChanged
	TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * ___onTrackingChanged_41;
	// Valve.VR.SteamVR_Action_Skeleton_ValidPoseChangeHandler Valve.VR.SteamVR_Action_Skeleton_Source::onValidPoseChanged
	ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * ___onValidPoseChanged_42;
	// Valve.VR.SteamVR_Action_Skeleton_DeviceConnectedChangeHandler Valve.VR.SteamVR_Action_Skeleton_Source::onDeviceConnectedChanged
	DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * ___onDeviceConnectedChanged_43;
	// UnityEngine.Vector3[] Valve.VR.SteamVR_Action_Skeleton_Source::<bonePositions>k__BackingField
	Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* ___U3CbonePositionsU3Ek__BackingField_44;
	// UnityEngine.Quaternion[] Valve.VR.SteamVR_Action_Skeleton_Source::<boneRotations>k__BackingField
	QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* ___U3CboneRotationsU3Ek__BackingField_45;
	// UnityEngine.Vector3[] Valve.VR.SteamVR_Action_Skeleton_Source::<lastBonePositions>k__BackingField
	Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* ___U3ClastBonePositionsU3Ek__BackingField_46;
	// UnityEngine.Quaternion[] Valve.VR.SteamVR_Action_Skeleton_Source::<lastBoneRotations>k__BackingField
	QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* ___U3ClastBoneRotationsU3Ek__BackingField_47;
	// Valve.VR.EVRSkeletalMotionRange Valve.VR.SteamVR_Action_Skeleton_Source::<rangeOfMotion>k__BackingField
	int32_t ___U3CrangeOfMotionU3Ek__BackingField_48;
	// Valve.VR.EVRSkeletalTransformSpace Valve.VR.SteamVR_Action_Skeleton_Source::<skeletalTransformSpace>k__BackingField
	int32_t ___U3CskeletalTransformSpaceU3Ek__BackingField_49;
	// Valve.VR.EVRSummaryType Valve.VR.SteamVR_Action_Skeleton_Source::<summaryDataType>k__BackingField
	int32_t ___U3CsummaryDataTypeU3Ek__BackingField_50;
	// System.Single[] Valve.VR.SteamVR_Action_Skeleton_Source::<fingerCurls>k__BackingField
	SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* ___U3CfingerCurlsU3Ek__BackingField_51;
	// System.Single[] Valve.VR.SteamVR_Action_Skeleton_Source::<fingerSplays>k__BackingField
	SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* ___U3CfingerSplaysU3Ek__BackingField_52;
	// System.Single[] Valve.VR.SteamVR_Action_Skeleton_Source::<lastFingerCurls>k__BackingField
	SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* ___U3ClastFingerCurlsU3Ek__BackingField_53;
	// System.Single[] Valve.VR.SteamVR_Action_Skeleton_Source::<lastFingerSplays>k__BackingField
	SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* ___U3ClastFingerSplaysU3Ek__BackingField_54;
	// System.Boolean Valve.VR.SteamVR_Action_Skeleton_Source::<poseChanged>k__BackingField
	bool ___U3CposeChangedU3Ek__BackingField_55;
	// System.Boolean Valve.VR.SteamVR_Action_Skeleton_Source::<onlyUpdateSummaryData>k__BackingField
	bool ___U3ConlyUpdateSummaryDataU3Ek__BackingField_56;
	// Valve.VR.VRSkeletalSummaryData_t Valve.VR.SteamVR_Action_Skeleton_Source::skeletalSummaryData
	VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831  ___skeletalSummaryData_57;
	// Valve.VR.VRSkeletalSummaryData_t Valve.VR.SteamVR_Action_Skeleton_Source::lastSkeletalSummaryData
	VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831  ___lastSkeletalSummaryData_58;
	// Valve.VR.SteamVR_Action_Skeleton Valve.VR.SteamVR_Action_Skeleton_Source::skeletonAction
	SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * ___skeletonAction_59;
	// Valve.VR.VRBoneTransform_t[] Valve.VR.SteamVR_Action_Skeleton_Source::tempBoneTransforms
	VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B* ___tempBoneTransforms_60;
	// Valve.VR.InputSkeletalActionData_t Valve.VR.SteamVR_Action_Skeleton_Source::skeletonActionData
	InputSkeletalActionData_t_tA39C0A0FE4DBB8966D852B4FFC7D3A6D8F887430  ___skeletonActionData_61;
	// Valve.VR.InputSkeletalActionData_t Valve.VR.SteamVR_Action_Skeleton_Source::lastSkeletonActionData
	InputSkeletalActionData_t_tA39C0A0FE4DBB8966D852B4FFC7D3A6D8F887430  ___lastSkeletonActionData_62;
	// Valve.VR.InputSkeletalActionData_t Valve.VR.SteamVR_Action_Skeleton_Source::tempSkeletonActionData
	InputSkeletalActionData_t_tA39C0A0FE4DBB8966D852B4FFC7D3A6D8F887430  ___tempSkeletonActionData_63;

public:
	inline static int32_t get_offset_of_onActiveChange_37() { return static_cast<int32_t>(offsetof(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72, ___onActiveChange_37)); }
	inline ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * get_onActiveChange_37() const { return ___onActiveChange_37; }
	inline ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 ** get_address_of_onActiveChange_37() { return &___onActiveChange_37; }
	inline void set_onActiveChange_37(ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * value)
	{
		___onActiveChange_37 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onActiveChange_37), (void*)value);
	}

	inline static int32_t get_offset_of_onActiveBindingChange_38() { return static_cast<int32_t>(offsetof(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72, ___onActiveBindingChange_38)); }
	inline ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * get_onActiveBindingChange_38() const { return ___onActiveBindingChange_38; }
	inline ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 ** get_address_of_onActiveBindingChange_38() { return &___onActiveBindingChange_38; }
	inline void set_onActiveBindingChange_38(ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * value)
	{
		___onActiveBindingChange_38 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onActiveBindingChange_38), (void*)value);
	}

	inline static int32_t get_offset_of_onChange_39() { return static_cast<int32_t>(offsetof(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72, ___onChange_39)); }
	inline ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * get_onChange_39() const { return ___onChange_39; }
	inline ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 ** get_address_of_onChange_39() { return &___onChange_39; }
	inline void set_onChange_39(ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * value)
	{
		___onChange_39 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onChange_39), (void*)value);
	}

	inline static int32_t get_offset_of_onUpdate_40() { return static_cast<int32_t>(offsetof(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72, ___onUpdate_40)); }
	inline UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * get_onUpdate_40() const { return ___onUpdate_40; }
	inline UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 ** get_address_of_onUpdate_40() { return &___onUpdate_40; }
	inline void set_onUpdate_40(UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * value)
	{
		___onUpdate_40 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onUpdate_40), (void*)value);
	}

	inline static int32_t get_offset_of_onTrackingChanged_41() { return static_cast<int32_t>(offsetof(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72, ___onTrackingChanged_41)); }
	inline TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * get_onTrackingChanged_41() const { return ___onTrackingChanged_41; }
	inline TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 ** get_address_of_onTrackingChanged_41() { return &___onTrackingChanged_41; }
	inline void set_onTrackingChanged_41(TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * value)
	{
		___onTrackingChanged_41 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onTrackingChanged_41), (void*)value);
	}

	inline static int32_t get_offset_of_onValidPoseChanged_42() { return static_cast<int32_t>(offsetof(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72, ___onValidPoseChanged_42)); }
	inline ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * get_onValidPoseChanged_42() const { return ___onValidPoseChanged_42; }
	inline ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 ** get_address_of_onValidPoseChanged_42() { return &___onValidPoseChanged_42; }
	inline void set_onValidPoseChanged_42(ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * value)
	{
		___onValidPoseChanged_42 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onValidPoseChanged_42), (void*)value);
	}

	inline static int32_t get_offset_of_onDeviceConnectedChanged_43() { return static_cast<int32_t>(offsetof(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72, ___onDeviceConnectedChanged_43)); }
	inline DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * get_onDeviceConnectedChanged_43() const { return ___onDeviceConnectedChanged_43; }
	inline DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 ** get_address_of_onDeviceConnectedChanged_43() { return &___onDeviceConnectedChanged_43; }
	inline void set_onDeviceConnectedChanged_43(DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * value)
	{
		___onDeviceConnectedChanged_43 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___onDeviceConnectedChanged_43), (void*)value);
	}

	inline static int32_t get_offset_of_U3CbonePositionsU3Ek__BackingField_44() { return static_cast<int32_t>(offsetof(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72, ___U3CbonePositionsU3Ek__BackingField_44)); }
	inline Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* get_U3CbonePositionsU3Ek__BackingField_44() const { return ___U3CbonePositionsU3Ek__BackingField_44; }
	inline Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28** get_address_of_U3CbonePositionsU3Ek__BackingField_44() { return &___U3CbonePositionsU3Ek__BackingField_44; }
	inline void set_U3CbonePositionsU3Ek__BackingField_44(Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* value)
	{
		___U3CbonePositionsU3Ek__BackingField_44 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___U3CbonePositionsU3Ek__BackingField_44), (void*)value);
	}

	inline static int32_t get_offset_of_U3CboneRotationsU3Ek__BackingField_45() { return static_cast<int32_t>(offsetof(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72, ___U3CboneRotationsU3Ek__BackingField_45)); }
	inline QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* get_U3CboneRotationsU3Ek__BackingField_45() const { return ___U3CboneRotationsU3Ek__BackingField_45; }
	inline QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3** get_address_of_U3CboneRotationsU3Ek__BackingField_45() { return &___U3CboneRotationsU3Ek__BackingField_45; }
	inline void set_U3CboneRotationsU3Ek__BackingField_45(QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* value)
	{
		___U3CboneRotationsU3Ek__BackingField_45 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___U3CboneRotationsU3Ek__BackingField_45), (void*)value);
	}

	inline static int32_t get_offset_of_U3ClastBonePositionsU3Ek__BackingField_46() { return static_cast<int32_t>(offsetof(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72, ___U3ClastBonePositionsU3Ek__BackingField_46)); }
	inline Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* get_U3ClastBonePositionsU3Ek__BackingField_46() const { return ___U3ClastBonePositionsU3Ek__BackingField_46; }
	inline Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28** get_address_of_U3ClastBonePositionsU3Ek__BackingField_46() { return &___U3ClastBonePositionsU3Ek__BackingField_46; }
	inline void set_U3ClastBonePositionsU3Ek__BackingField_46(Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* value)
	{
		___U3ClastBonePositionsU3Ek__BackingField_46 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___U3ClastBonePositionsU3Ek__BackingField_46), (void*)value);
	}

	inline static int32_t get_offset_of_U3ClastBoneRotationsU3Ek__BackingField_47() { return static_cast<int32_t>(offsetof(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72, ___U3ClastBoneRotationsU3Ek__BackingField_47)); }
	inline QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* get_U3ClastBoneRotationsU3Ek__BackingField_47() const { return ___U3ClastBoneRotationsU3Ek__BackingField_47; }
	inline QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3** get_address_of_U3ClastBoneRotationsU3Ek__BackingField_47() { return &___U3ClastBoneRotationsU3Ek__BackingField_47; }
	inline void set_U3ClastBoneRotationsU3Ek__BackingField_47(QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* value)
	{
		___U3ClastBoneRotationsU3Ek__BackingField_47 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___U3ClastBoneRotationsU3Ek__BackingField_47), (void*)value);
	}

	inline static int32_t get_offset_of_U3CrangeOfMotionU3Ek__BackingField_48() { return static_cast<int32_t>(offsetof(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72, ___U3CrangeOfMotionU3Ek__BackingField_48)); }
	inline int32_t get_U3CrangeOfMotionU3Ek__BackingField_48() const { return ___U3CrangeOfMotionU3Ek__BackingField_48; }
	inline int32_t* get_address_of_U3CrangeOfMotionU3Ek__BackingField_48() { return &___U3CrangeOfMotionU3Ek__BackingField_48; }
	inline void set_U3CrangeOfMotionU3Ek__BackingField_48(int32_t value)
	{
		___U3CrangeOfMotionU3Ek__BackingField_48 = value;
	}

	inline static int32_t get_offset_of_U3CskeletalTransformSpaceU3Ek__BackingField_49() { return static_cast<int32_t>(offsetof(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72, ___U3CskeletalTransformSpaceU3Ek__BackingField_49)); }
	inline int32_t get_U3CskeletalTransformSpaceU3Ek__BackingField_49() const { return ___U3CskeletalTransformSpaceU3Ek__BackingField_49; }
	inline int32_t* get_address_of_U3CskeletalTransformSpaceU3Ek__BackingField_49() { return &___U3CskeletalTransformSpaceU3Ek__BackingField_49; }
	inline void set_U3CskeletalTransformSpaceU3Ek__BackingField_49(int32_t value)
	{
		___U3CskeletalTransformSpaceU3Ek__BackingField_49 = value;
	}

	inline static int32_t get_offset_of_U3CsummaryDataTypeU3Ek__BackingField_50() { return static_cast<int32_t>(offsetof(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72, ___U3CsummaryDataTypeU3Ek__BackingField_50)); }
	inline int32_t get_U3CsummaryDataTypeU3Ek__BackingField_50() const { return ___U3CsummaryDataTypeU3Ek__BackingField_50; }
	inline int32_t* get_address_of_U3CsummaryDataTypeU3Ek__BackingField_50() { return &___U3CsummaryDataTypeU3Ek__BackingField_50; }
	inline void set_U3CsummaryDataTypeU3Ek__BackingField_50(int32_t value)
	{
		___U3CsummaryDataTypeU3Ek__BackingField_50 = value;
	}

	inline static int32_t get_offset_of_U3CfingerCurlsU3Ek__BackingField_51() { return static_cast<int32_t>(offsetof(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72, ___U3CfingerCurlsU3Ek__BackingField_51)); }
	inline SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* get_U3CfingerCurlsU3Ek__BackingField_51() const { return ___U3CfingerCurlsU3Ek__BackingField_51; }
	inline SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5** get_address_of_U3CfingerCurlsU3Ek__BackingField_51() { return &___U3CfingerCurlsU3Ek__BackingField_51; }
	inline void set_U3CfingerCurlsU3Ek__BackingField_51(SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* value)
	{
		___U3CfingerCurlsU3Ek__BackingField_51 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___U3CfingerCurlsU3Ek__BackingField_51), (void*)value);
	}

	inline static int32_t get_offset_of_U3CfingerSplaysU3Ek__BackingField_52() { return static_cast<int32_t>(offsetof(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72, ___U3CfingerSplaysU3Ek__BackingField_52)); }
	inline SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* get_U3CfingerSplaysU3Ek__BackingField_52() const { return ___U3CfingerSplaysU3Ek__BackingField_52; }
	inline SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5** get_address_of_U3CfingerSplaysU3Ek__BackingField_52() { return &___U3CfingerSplaysU3Ek__BackingField_52; }
	inline void set_U3CfingerSplaysU3Ek__BackingField_52(SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* value)
	{
		___U3CfingerSplaysU3Ek__BackingField_52 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___U3CfingerSplaysU3Ek__BackingField_52), (void*)value);
	}

	inline static int32_t get_offset_of_U3ClastFingerCurlsU3Ek__BackingField_53() { return static_cast<int32_t>(offsetof(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72, ___U3ClastFingerCurlsU3Ek__BackingField_53)); }
	inline SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* get_U3ClastFingerCurlsU3Ek__BackingField_53() const { return ___U3ClastFingerCurlsU3Ek__BackingField_53; }
	inline SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5** get_address_of_U3ClastFingerCurlsU3Ek__BackingField_53() { return &___U3ClastFingerCurlsU3Ek__BackingField_53; }
	inline void set_U3ClastFingerCurlsU3Ek__BackingField_53(SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* value)
	{
		___U3ClastFingerCurlsU3Ek__BackingField_53 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___U3ClastFingerCurlsU3Ek__BackingField_53), (void*)value);
	}

	inline static int32_t get_offset_of_U3ClastFingerSplaysU3Ek__BackingField_54() { return static_cast<int32_t>(offsetof(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72, ___U3ClastFingerSplaysU3Ek__BackingField_54)); }
	inline SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* get_U3ClastFingerSplaysU3Ek__BackingField_54() const { return ___U3ClastFingerSplaysU3Ek__BackingField_54; }
	inline SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5** get_address_of_U3ClastFingerSplaysU3Ek__BackingField_54() { return &___U3ClastFingerSplaysU3Ek__BackingField_54; }
	inline void set_U3ClastFingerSplaysU3Ek__BackingField_54(SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* value)
	{
		___U3ClastFingerSplaysU3Ek__BackingField_54 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___U3ClastFingerSplaysU3Ek__BackingField_54), (void*)value);
	}

	inline static int32_t get_offset_of_U3CposeChangedU3Ek__BackingField_55() { return static_cast<int32_t>(offsetof(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72, ___U3CposeChangedU3Ek__BackingField_55)); }
	inline bool get_U3CposeChangedU3Ek__BackingField_55() const { return ___U3CposeChangedU3Ek__BackingField_55; }
	inline bool* get_address_of_U3CposeChangedU3Ek__BackingField_55() { return &___U3CposeChangedU3Ek__BackingField_55; }
	inline void set_U3CposeChangedU3Ek__BackingField_55(bool value)
	{
		___U3CposeChangedU3Ek__BackingField_55 = value;
	}

	inline static int32_t get_offset_of_U3ConlyUpdateSummaryDataU3Ek__BackingField_56() { return static_cast<int32_t>(offsetof(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72, ___U3ConlyUpdateSummaryDataU3Ek__BackingField_56)); }
	inline bool get_U3ConlyUpdateSummaryDataU3Ek__BackingField_56() const { return ___U3ConlyUpdateSummaryDataU3Ek__BackingField_56; }
	inline bool* get_address_of_U3ConlyUpdateSummaryDataU3Ek__BackingField_56() { return &___U3ConlyUpdateSummaryDataU3Ek__BackingField_56; }
	inline void set_U3ConlyUpdateSummaryDataU3Ek__BackingField_56(bool value)
	{
		___U3ConlyUpdateSummaryDataU3Ek__BackingField_56 = value;
	}

	inline static int32_t get_offset_of_skeletalSummaryData_57() { return static_cast<int32_t>(offsetof(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72, ___skeletalSummaryData_57)); }
	inline VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831  get_skeletalSummaryData_57() const { return ___skeletalSummaryData_57; }
	inline VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831 * get_address_of_skeletalSummaryData_57() { return &___skeletalSummaryData_57; }
	inline void set_skeletalSummaryData_57(VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831  value)
	{
		___skeletalSummaryData_57 = value;
	}

	inline static int32_t get_offset_of_lastSkeletalSummaryData_58() { return static_cast<int32_t>(offsetof(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72, ___lastSkeletalSummaryData_58)); }
	inline VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831  get_lastSkeletalSummaryData_58() const { return ___lastSkeletalSummaryData_58; }
	inline VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831 * get_address_of_lastSkeletalSummaryData_58() { return &___lastSkeletalSummaryData_58; }
	inline void set_lastSkeletalSummaryData_58(VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831  value)
	{
		___lastSkeletalSummaryData_58 = value;
	}

	inline static int32_t get_offset_of_skeletonAction_59() { return static_cast<int32_t>(offsetof(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72, ___skeletonAction_59)); }
	inline SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * get_skeletonAction_59() const { return ___skeletonAction_59; }
	inline SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 ** get_address_of_skeletonAction_59() { return &___skeletonAction_59; }
	inline void set_skeletonAction_59(SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * value)
	{
		___skeletonAction_59 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___skeletonAction_59), (void*)value);
	}

	inline static int32_t get_offset_of_tempBoneTransforms_60() { return static_cast<int32_t>(offsetof(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72, ___tempBoneTransforms_60)); }
	inline VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B* get_tempBoneTransforms_60() const { return ___tempBoneTransforms_60; }
	inline VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B** get_address_of_tempBoneTransforms_60() { return &___tempBoneTransforms_60; }
	inline void set_tempBoneTransforms_60(VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B* value)
	{
		___tempBoneTransforms_60 = value;
		Il2CppCodeGenWriteBarrier((void**)(&___tempBoneTransforms_60), (void*)value);
	}

	inline static int32_t get_offset_of_skeletonActionData_61() { return static_cast<int32_t>(offsetof(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72, ___skeletonActionData_61)); }
	inline InputSkeletalActionData_t_tA39C0A0FE4DBB8966D852B4FFC7D3A6D8F887430  get_skeletonActionData_61() const { return ___skeletonActionData_61; }
	inline InputSkeletalActionData_t_tA39C0A0FE4DBB8966D852B4FFC7D3A6D8F887430 * get_address_of_skeletonActionData_61() { return &___skeletonActionData_61; }
	inline void set_skeletonActionData_61(InputSkeletalActionData_t_tA39C0A0FE4DBB8966D852B4FFC7D3A6D8F887430  value)
	{
		___skeletonActionData_61 = value;
	}

	inline static int32_t get_offset_of_lastSkeletonActionData_62() { return static_cast<int32_t>(offsetof(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72, ___lastSkeletonActionData_62)); }
	inline InputSkeletalActionData_t_tA39C0A0FE4DBB8966D852B4FFC7D3A6D8F887430  get_lastSkeletonActionData_62() const { return ___lastSkeletonActionData_62; }
	inline InputSkeletalActionData_t_tA39C0A0FE4DBB8966D852B4FFC7D3A6D8F887430 * get_address_of_lastSkeletonActionData_62() { return &___lastSkeletonActionData_62; }
	inline void set_lastSkeletonActionData_62(InputSkeletalActionData_t_tA39C0A0FE4DBB8966D852B4FFC7D3A6D8F887430  value)
	{
		___lastSkeletonActionData_62 = value;
	}

	inline static int32_t get_offset_of_tempSkeletonActionData_63() { return static_cast<int32_t>(offsetof(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72, ___tempSkeletonActionData_63)); }
	inline InputSkeletalActionData_t_tA39C0A0FE4DBB8966D852B4FFC7D3A6D8F887430  get_tempSkeletonActionData_63() const { return ___tempSkeletonActionData_63; }
	inline InputSkeletalActionData_t_tA39C0A0FE4DBB8966D852B4FFC7D3A6D8F887430 * get_address_of_tempSkeletonActionData_63() { return &___tempSkeletonActionData_63; }
	inline void set_tempSkeletonActionData_63(InputSkeletalActionData_t_tA39C0A0FE4DBB8966D852B4FFC7D3A6D8F887430  value)
	{
		___tempSkeletonActionData_63 = value;
	}
};

struct SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72_StaticFields
{
public:
	// System.UInt32 Valve.VR.SteamVR_Action_Skeleton_Source::skeletonActionData_size
	uint32_t ___skeletonActionData_size_36;

public:
	inline static int32_t get_offset_of_skeletonActionData_size_36() { return static_cast<int32_t>(offsetof(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72_StaticFields, ___skeletonActionData_size_36)); }
	inline uint32_t get_skeletonActionData_size_36() const { return ___skeletonActionData_size_36; }
	inline uint32_t* get_address_of_skeletonActionData_size_36() { return &___skeletonActionData_size_36; }
	inline void set_skeletonActionData_size_36(uint32_t value)
	{
		___skeletonActionData_size_36 = value;
	}
};


// Valve.VR.SteamVR_Action_Vector2_Source_Map
struct  SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3  : public SteamVR_Action_In_Source_Map_1_tE08712080E22D9A4BAF4C436860AA6226B5FC72D
{
public:

public:
};


// Valve.VR.SteamVR_Action_Vector3_Source_Map
struct  SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95  : public SteamVR_Action_In_Source_Map_1_t462A1CF8307E7E62DA57F8FA49B7405C51117253
{
public:

public:
};


// Valve.VR.SteamVR_Action_Skeleton_Source_Map
struct  SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB  : public SteamVR_Action_Pose_Source_Map_1_t62FCD50EDE24217AD6FAFADAC23DA65555B7A125
{
public:

public:
};

#ifdef __clang__
#pragma clang diagnostic pop
#endif
// UnityEngine.Vector3[]
struct Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28  : public RuntimeArray
{
public:
	ALIGN_FIELD (8) Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  m_Items[1];

public:
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  GetAt(il2cpp_array_size_t index) const
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items[index];
	}
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * GetAddressAt(il2cpp_array_size_t index)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items + index;
	}
	inline void SetAt(il2cpp_array_size_t index, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		m_Items[index] = value;
	}
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  GetAtUnchecked(il2cpp_array_size_t index) const
	{
		return m_Items[index];
	}
	inline Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * GetAddressAtUnchecked(il2cpp_array_size_t index)
	{
		return m_Items + index;
	}
	inline void SetAtUnchecked(il2cpp_array_size_t index, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  value)
	{
		m_Items[index] = value;
	}
};
// UnityEngine.Quaternion[]
struct QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3  : public RuntimeArray
{
public:
	ALIGN_FIELD (8) Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  m_Items[1];

public:
	inline Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  GetAt(il2cpp_array_size_t index) const
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items[index];
	}
	inline Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * GetAddressAt(il2cpp_array_size_t index)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items + index;
	}
	inline void SetAt(il2cpp_array_size_t index, Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  value)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		m_Items[index] = value;
	}
	inline Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  GetAtUnchecked(il2cpp_array_size_t index) const
	{
		return m_Items[index];
	}
	inline Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * GetAddressAtUnchecked(il2cpp_array_size_t index)
	{
		return m_Items + index;
	}
	inline void SetAtUnchecked(il2cpp_array_size_t index, Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  value)
	{
		m_Items[index] = value;
	}
};
// System.Single[]
struct SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5  : public RuntimeArray
{
public:
	ALIGN_FIELD (8) float m_Items[1];

public:
	inline float GetAt(il2cpp_array_size_t index) const
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items[index];
	}
	inline float* GetAddressAt(il2cpp_array_size_t index)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items + index;
	}
	inline void SetAt(il2cpp_array_size_t index, float value)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		m_Items[index] = value;
	}
	inline float GetAtUnchecked(il2cpp_array_size_t index) const
	{
		return m_Items[index];
	}
	inline float* GetAddressAtUnchecked(il2cpp_array_size_t index)
	{
		return m_Items + index;
	}
	inline void SetAtUnchecked(il2cpp_array_size_t index, float value)
	{
		m_Items[index] = value;
	}
};
// System.Int32[]
struct Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83  : public RuntimeArray
{
public:
	ALIGN_FIELD (8) int32_t m_Items[1];

public:
	inline int32_t GetAt(il2cpp_array_size_t index) const
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items[index];
	}
	inline int32_t* GetAddressAt(il2cpp_array_size_t index)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items + index;
	}
	inline void SetAt(il2cpp_array_size_t index, int32_t value)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		m_Items[index] = value;
	}
	inline int32_t GetAtUnchecked(il2cpp_array_size_t index) const
	{
		return m_Items[index];
	}
	inline int32_t* GetAddressAtUnchecked(il2cpp_array_size_t index)
	{
		return m_Items + index;
	}
	inline void SetAtUnchecked(il2cpp_array_size_t index, int32_t value)
	{
		m_Items[index] = value;
	}
};
// SteamVR_Utils_RigidTransform[]
struct RigidTransformU5BU5D_tC98EB3576009E5D825D0D43671A65D32A2449ECC  : public RuntimeArray
{
public:
	ALIGN_FIELD (8) RigidTransform_t0E8A00F7013270B6B2254F29B4FFEAA6783CD905  m_Items[1];

public:
	inline RigidTransform_t0E8A00F7013270B6B2254F29B4FFEAA6783CD905  GetAt(il2cpp_array_size_t index) const
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items[index];
	}
	inline RigidTransform_t0E8A00F7013270B6B2254F29B4FFEAA6783CD905 * GetAddressAt(il2cpp_array_size_t index)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items + index;
	}
	inline void SetAt(il2cpp_array_size_t index, RigidTransform_t0E8A00F7013270B6B2254F29B4FFEAA6783CD905  value)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		m_Items[index] = value;
	}
	inline RigidTransform_t0E8A00F7013270B6B2254F29B4FFEAA6783CD905  GetAtUnchecked(il2cpp_array_size_t index) const
	{
		return m_Items[index];
	}
	inline RigidTransform_t0E8A00F7013270B6B2254F29B4FFEAA6783CD905 * GetAddressAtUnchecked(il2cpp_array_size_t index)
	{
		return m_Items + index;
	}
	inline void SetAtUnchecked(il2cpp_array_size_t index, RigidTransform_t0E8A00F7013270B6B2254F29B4FFEAA6783CD905  value)
	{
		m_Items[index] = value;
	}
};
// Valve.VR.EVRInputStringBits[]
struct EVRInputStringBitsU5BU5D_t9F9E9B47CD745CAAB4F8EDC305D84DDF9E5BE511  : public RuntimeArray
{
public:
	ALIGN_FIELD (8) int32_t m_Items[1];

public:
	inline int32_t GetAt(il2cpp_array_size_t index) const
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items[index];
	}
	inline int32_t* GetAddressAt(il2cpp_array_size_t index)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items + index;
	}
	inline void SetAt(il2cpp_array_size_t index, int32_t value)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		m_Items[index] = value;
	}
	inline int32_t GetAtUnchecked(il2cpp_array_size_t index) const
	{
		return m_Items[index];
	}
	inline int32_t* GetAddressAtUnchecked(il2cpp_array_size_t index)
	{
		return m_Items + index;
	}
	inline void SetAtUnchecked(il2cpp_array_size_t index, int32_t value)
	{
		m_Items[index] = value;
	}
};
// System.Delegate[]
struct DelegateU5BU5D_tDFCDEE2A6322F96C0FE49AF47E9ADB8C4B294E86  : public RuntimeArray
{
public:
	ALIGN_FIELD (8) Delegate_t * m_Items[1];

public:
	inline Delegate_t * GetAt(il2cpp_array_size_t index) const
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items[index];
	}
	inline Delegate_t ** GetAddressAt(il2cpp_array_size_t index)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items + index;
	}
	inline void SetAt(il2cpp_array_size_t index, Delegate_t * value)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		m_Items[index] = value;
		Il2CppCodeGenWriteBarrier((void**)m_Items + index, (void*)value);
	}
	inline Delegate_t * GetAtUnchecked(il2cpp_array_size_t index) const
	{
		return m_Items[index];
	}
	inline Delegate_t ** GetAddressAtUnchecked(il2cpp_array_size_t index)
	{
		return m_Items + index;
	}
	inline void SetAtUnchecked(il2cpp_array_size_t index, Delegate_t * value)
	{
		m_Items[index] = value;
		Il2CppCodeGenWriteBarrier((void**)m_Items + index, (void*)value);
	}
};
// Valve.VR.SteamVR_Skeleton_FingerIndexEnum[]
struct SteamVR_Skeleton_FingerIndexEnumU5BU5D_t972F21E674536524E0BFB5F382CFD0ACA1714DB7  : public RuntimeArray
{
public:
	ALIGN_FIELD (8) int32_t m_Items[1];

public:
	inline int32_t GetAt(il2cpp_array_size_t index) const
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items[index];
	}
	inline int32_t* GetAddressAt(il2cpp_array_size_t index)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items + index;
	}
	inline void SetAt(il2cpp_array_size_t index, int32_t value)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		m_Items[index] = value;
	}
	inline int32_t GetAtUnchecked(il2cpp_array_size_t index) const
	{
		return m_Items[index];
	}
	inline int32_t* GetAddressAtUnchecked(il2cpp_array_size_t index)
	{
		return m_Items + index;
	}
	inline void SetAtUnchecked(il2cpp_array_size_t index, int32_t value)
	{
		m_Items[index] = value;
	}
};
// Valve.VR.SteamVR_Skeleton_FingerSplayIndexEnum[]
struct SteamVR_Skeleton_FingerSplayIndexEnumU5BU5D_t92DED5924CD2E6B494B9ABD5961F9BC65373A81B  : public RuntimeArray
{
public:
	ALIGN_FIELD (8) int32_t m_Items[1];

public:
	inline int32_t GetAt(il2cpp_array_size_t index) const
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items[index];
	}
	inline int32_t* GetAddressAt(il2cpp_array_size_t index)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items + index;
	}
	inline void SetAt(il2cpp_array_size_t index, int32_t value)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		m_Items[index] = value;
	}
	inline int32_t GetAtUnchecked(il2cpp_array_size_t index) const
	{
		return m_Items[index];
	}
	inline int32_t* GetAddressAtUnchecked(il2cpp_array_size_t index)
	{
		return m_Items + index;
	}
	inline void SetAtUnchecked(il2cpp_array_size_t index, int32_t value)
	{
		m_Items[index] = value;
	}
};
// System.String[]
struct StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E  : public RuntimeArray
{
public:
	ALIGN_FIELD (8) String_t* m_Items[1];

public:
	inline String_t* GetAt(il2cpp_array_size_t index) const
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items[index];
	}
	inline String_t** GetAddressAt(il2cpp_array_size_t index)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items + index;
	}
	inline void SetAt(il2cpp_array_size_t index, String_t* value)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		m_Items[index] = value;
		Il2CppCodeGenWriteBarrier((void**)m_Items + index, (void*)value);
	}
	inline String_t* GetAtUnchecked(il2cpp_array_size_t index) const
	{
		return m_Items[index];
	}
	inline String_t** GetAddressAtUnchecked(il2cpp_array_size_t index)
	{
		return m_Items + index;
	}
	inline void SetAtUnchecked(il2cpp_array_size_t index, String_t* value)
	{
		m_Items[index] = value;
		Il2CppCodeGenWriteBarrier((void**)m_Items + index, (void*)value);
	}
};
// Valve.VR.VRBoneTransform_t[]
struct VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B  : public RuntimeArray
{
public:
	ALIGN_FIELD (8) VRBoneTransform_t_t27C47AE5EA1D078A6DAC070DD9155EEC35F95AD9  m_Items[1];

public:
	inline VRBoneTransform_t_t27C47AE5EA1D078A6DAC070DD9155EEC35F95AD9  GetAt(il2cpp_array_size_t index) const
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items[index];
	}
	inline VRBoneTransform_t_t27C47AE5EA1D078A6DAC070DD9155EEC35F95AD9 * GetAddressAt(il2cpp_array_size_t index)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items + index;
	}
	inline void SetAt(il2cpp_array_size_t index, VRBoneTransform_t_t27C47AE5EA1D078A6DAC070DD9155EEC35F95AD9  value)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		m_Items[index] = value;
	}
	inline VRBoneTransform_t_t27C47AE5EA1D078A6DAC070DD9155EEC35F95AD9  GetAtUnchecked(il2cpp_array_size_t index) const
	{
		return m_Items[index];
	}
	inline VRBoneTransform_t_t27C47AE5EA1D078A6DAC070DD9155EEC35F95AD9 * GetAddressAtUnchecked(il2cpp_array_size_t index)
	{
		return m_Items + index;
	}
	inline void SetAtUnchecked(il2cpp_array_size_t index, VRBoneTransform_t_t27C47AE5EA1D078A6DAC070DD9155EEC35F95AD9  value)
	{
		m_Items[index] = value;
	}
};
// Valve.VR.SteamVR_Action_Skeleton_Source[]
struct SteamVR_Action_Skeleton_SourceU5BU5D_tD7F80DE17D413EA1E866B222C9A63AEBFF0CE5D4  : public RuntimeArray
{
public:
	ALIGN_FIELD (8) SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * m_Items[1];

public:
	inline SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * GetAt(il2cpp_array_size_t index) const
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items[index];
	}
	inline SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 ** GetAddressAt(il2cpp_array_size_t index)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items + index;
	}
	inline void SetAt(il2cpp_array_size_t index, SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * value)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		m_Items[index] = value;
		Il2CppCodeGenWriteBarrier((void**)m_Items + index, (void*)value);
	}
	inline SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * GetAtUnchecked(il2cpp_array_size_t index) const
	{
		return m_Items[index];
	}
	inline SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 ** GetAddressAtUnchecked(il2cpp_array_size_t index)
	{
		return m_Items + index;
	}
	inline void SetAtUnchecked(il2cpp_array_size_t index, SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * value)
	{
		m_Items[index] = value;
		Il2CppCodeGenWriteBarrier((void**)m_Items + index, (void*)value);
	}
};
// Valve.VR.SteamVR_Input_Sources[]
struct SteamVR_Input_SourcesU5BU5D_t735048547A8599BA461FE16B1BC029194E1F184A  : public RuntimeArray
{
public:
	ALIGN_FIELD (8) int32_t m_Items[1];

public:
	inline int32_t GetAt(il2cpp_array_size_t index) const
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items[index];
	}
	inline int32_t* GetAddressAt(il2cpp_array_size_t index)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		return m_Items + index;
	}
	inline void SetAt(il2cpp_array_size_t index, int32_t value)
	{
		IL2CPP_ARRAY_BOUNDS_CHECK(index, (uint32_t)(this)->max_length);
		m_Items[index] = value;
	}
	inline int32_t GetAtUnchecked(il2cpp_array_size_t index) const
	{
		return m_Items[index];
	}
	inline int32_t* GetAddressAtUnchecked(il2cpp_array_size_t index)
	{
		return m_Items + index;
	}
	inline void SetAtUnchecked(il2cpp_array_size_t index, int32_t value)
	{
		m_Items[index] = value;
	}
};


// System.Void Valve.VR.SteamVR_Action_In_Source_Map`1<System.Object>::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_In_Source_Map_1__ctor_mABEF0F1512ABB73914B960E4A67930AC81E767F1_gshared (SteamVR_Action_In_Source_Map_1_t7F4F1E354FE5A814AEA83C884D31215ED36A1A8D * __this, const RuntimeMethod* method);
// SourceElement Valve.VR.SteamVR_Action_Source_Map`1<System.Object>::get_Item(Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RuntimeObject * SteamVR_Action_Source_Map_1_get_Item_mE7E2BE18AECB1CDFEADB1E81CEC1C729BBACAB4D_gshared (SteamVR_Action_Source_Map_1_tCAA2C8FE17BA000619F1ADE00A17D8037F5B4B14 * __this, int32_t ___inputSource0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Pose_Base`2<System.Object,System.Object>::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Pose_Base_2__ctor_m15192F31C4B54121755BF28201D51E0616710270_gshared (SteamVR_Action_Pose_Base_2_tE4721EEBBC945BAAF6FF57A49BF6EB4ACDB13900 * __this, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Pose_Base`2<System.Object,System.Object>::UpdateTransform(Valve.VR.SteamVR_Input_Sources,UnityEngine.Transform)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Pose_Base_2_UpdateTransform_mE9D3E5DFD2370F00E7287783C9B240C1796C6071_gshared (SteamVR_Action_Pose_Base_2_tE4721EEBBC945BAAF6FF57A49BF6EB4ACDB13900 * __this, int32_t ___inputSource0, Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * ___transformToUpdate1, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action`2<System.Object,System.Object>::InitAfterDeserialize()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_2_InitAfterDeserialize_mCC6445068DDB02EA2F504749308CE3382698F4BE_gshared (SteamVR_Action_2_t17CE6363B177E4D037F3097259B68D6F8842CC5B * __this, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Pose_Source_Map`1<System.Object>::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Pose_Source_Map_1__ctor_mBB8E245C3E0BAADAA79082AA6FC40445EBC7C41E_gshared (SteamVR_Action_Pose_Source_Map_1_t8D737DFC58E320B9252D6AC46CC512D3AA443163 * __this, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_In`2<System.Object,System.Object>::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_In_2__ctor_m1E68CCDF619CF154D71E1657018F8407C7E9E57C_gshared (SteamVR_Action_In_2_t69D3F3E304EB8FE2A070ACD581E61CDFF8732243 * __this, const RuntimeMethod* method);

// System.Void Valve.VR.SteamVR_Action_In_Source_Map`1<Valve.VR.SteamVR_Action_Single_Source>::.ctor()
inline void SteamVR_Action_In_Source_Map_1__ctor_m3CF6B3F7CC98C67885A2F7915311C360B9842389 (SteamVR_Action_In_Source_Map_1_t2C53C7DDA5E7BECE6E12D3EE7BFAB2ADF8781741 * __this, const RuntimeMethod* method)
{
	((  void (*) (SteamVR_Action_In_Source_Map_1_t2C53C7DDA5E7BECE6E12D3EE7BFAB2ADF8781741 *, const RuntimeMethod*))SteamVR_Action_In_Source_Map_1__ctor_mABEF0F1512ABB73914B960E4A67930AC81E767F1_gshared)(__this, method);
}
// SourceElement Valve.VR.SteamVR_Action_Source_Map`1<Valve.VR.SteamVR_Action_Skeleton_Source>::get_Item(Valve.VR.SteamVR_Input_Sources)
inline SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2 (SteamVR_Action_Source_Map_1_t27BBF2BA23BB14D6B7B203EF8ABFEF3D68E13AB1 * __this, int32_t ___inputSource0, const RuntimeMethod* method)
{
	return ((  SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * (*) (SteamVR_Action_Source_Map_1_t27BBF2BA23BB14D6B7B203EF8ABFEF3D68E13AB1 *, int32_t, const RuntimeMethod*))SteamVR_Action_Source_Map_1_get_Item_mE7E2BE18AECB1CDFEADB1E81CEC1C729BBACAB4D_gshared)(__this, ___inputSource0, method);
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::add_onActiveChange(Valve.VR.SteamVR_Action_Skeleton/ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_add_onActiveChange_mE0FC38C5C6749C482B67CA8FC2017969A0BE37F6 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::remove_onActiveChange(Valve.VR.SteamVR_Action_Skeleton/ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_remove_onActiveChange_m02B106748649E99F649EC24789D36D5DB0577965 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::add_onActiveBindingChange(Valve.VR.SteamVR_Action_Skeleton/ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_add_onActiveBindingChange_m4DC3513C7C9507997D9D34F1A514F152B2D38CFA (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::remove_onActiveBindingChange(Valve.VR.SteamVR_Action_Skeleton/ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_remove_onActiveBindingChange_m8B778606DA02C1FB1A23C1A955951094E261F2AF (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::add_onChange(Valve.VR.SteamVR_Action_Skeleton/ChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_add_onChange_m36F08DE1097970DE49B839792F1935A218E92ADA (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::remove_onChange(Valve.VR.SteamVR_Action_Skeleton/ChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_remove_onChange_m9AE202076C862455102381B3DD4AA5E98D8E7DB0 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::add_onUpdate(Valve.VR.SteamVR_Action_Skeleton/UpdateHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_add_onUpdate_m7E46F0BA1CFA58A2B4CD7E9937AF913E21B597E4 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::remove_onUpdate(Valve.VR.SteamVR_Action_Skeleton/UpdateHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_remove_onUpdate_m3DAC62A7DE38AF1BA67D76654BDC0CECB0296FAF (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::add_onTrackingChanged(Valve.VR.SteamVR_Action_Skeleton/TrackingChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_add_onTrackingChanged_m1214E513861191327AAAF65D11DDA8E978F2EAD0 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::remove_onTrackingChanged(Valve.VR.SteamVR_Action_Skeleton/TrackingChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_remove_onTrackingChanged_mD1990275D9A505E92742B063863D9F1BE96BFDB0 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::add_onValidPoseChanged(Valve.VR.SteamVR_Action_Skeleton/ValidPoseChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_add_onValidPoseChanged_m2A4D3F3E5FEFDD0ACBBCA7018AD94DF8EDA37A24 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::remove_onValidPoseChanged(Valve.VR.SteamVR_Action_Skeleton/ValidPoseChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_remove_onValidPoseChanged_mA00A29139A1727456784ECF81C9009BAD9B2D8D0 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::add_onDeviceConnectedChanged(Valve.VR.SteamVR_Action_Skeleton/DeviceConnectedChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_add_onDeviceConnectedChanged_m65E5DE81AF451EF0B00E214FA8E5034E29FA3EC7 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::remove_onDeviceConnectedChanged(Valve.VR.SteamVR_Action_Skeleton/DeviceConnectedChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_remove_onDeviceConnectedChanged_mB24005D6459F7B8D170E3445BF5B95405871AF13 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Pose_Base`2<Valve.VR.SteamVR_Action_Skeleton_Source_Map,Valve.VR.SteamVR_Action_Skeleton_Source>::.ctor()
inline void SteamVR_Action_Pose_Base_2__ctor_mA24A37A7DD68461F1328F541DD825CDACBAC30C5 (SteamVR_Action_Pose_Base_2_tCF260D4E08F45DC042B3B5B7B7A2F6B84880C2C2 * __this, const RuntimeMethod* method)
{
	((  void (*) (SteamVR_Action_Pose_Base_2_tCF260D4E08F45DC042B3B5B7B7A2F6B84880C2C2 *, const RuntimeMethod*))SteamVR_Action_Pose_Base_2__ctor_m15192F31C4B54121755BF28201D51E0616710270_gshared)(__this, method);
}
// System.Void Valve.VR.SteamVR_Action_Pose_Base`2<Valve.VR.SteamVR_Action_Skeleton_Source_Map,Valve.VR.SteamVR_Action_Skeleton_Source>::UpdateTransform(Valve.VR.SteamVR_Input_Sources,UnityEngine.Transform)
inline void SteamVR_Action_Pose_Base_2_UpdateTransform_mDF91BEAC2D9487D14C5D1EB34996E2C2E4F275D0 (SteamVR_Action_Pose_Base_2_tCF260D4E08F45DC042B3B5B7B7A2F6B84880C2C2 * __this, int32_t ___inputSource0, Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * ___transformToUpdate1, const RuntimeMethod* method)
{
	((  void (*) (SteamVR_Action_Pose_Base_2_tCF260D4E08F45DC042B3B5B7B7A2F6B84880C2C2 *, int32_t, Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA *, const RuntimeMethod*))SteamVR_Action_Pose_Base_2_UpdateTransform_mE9D3E5DFD2370F00E7287783C9B240C1796C6071_gshared)(__this, ___inputSource0, ___transformToUpdate1, method);
}
// UnityEngine.Vector3[] Valve.VR.SteamVR_Action_Skeleton_Source::get_bonePositions()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* SteamVR_Action_Skeleton_Source_get_bonePositions_mA0C01DDB9EAB9749BBBEDBCFF72582812AB9C195_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// UnityEngine.Quaternion[] Valve.VR.SteamVR_Action_Skeleton_Source::get_boneRotations()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* SteamVR_Action_Skeleton_Source_get_boneRotations_mCD0B038517CA7A79945AD615082F05B25B0EDA20_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// UnityEngine.Vector3[] Valve.VR.SteamVR_Action_Skeleton_Source::get_lastBonePositions()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* SteamVR_Action_Skeleton_Source_get_lastBonePositions_m99D1C7B8A05E646777AC85CFC0ED2FF0953C3AB9_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// UnityEngine.Quaternion[] Valve.VR.SteamVR_Action_Skeleton_Source::get_lastBoneRotations()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* SteamVR_Action_Skeleton_Source_get_lastBoneRotations_m14A98028FB99C0404733364FFD3C187D2A53261C_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// Valve.VR.EVRSkeletalMotionRange Valve.VR.SteamVR_Action_Skeleton_Source::get_rangeOfMotion()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Skeleton_Source_get_rangeOfMotion_mCEFC5B01B736A3B6218C5C91A0AEF272FFD88B47_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::set_rangeOfMotion(Valve.VR.EVRSkeletalMotionRange)
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_rangeOfMotion_m01A4338F1C4D57E5691A2F8EA861BAD76DA75619_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, int32_t ___value0, const RuntimeMethod* method);
// Valve.VR.EVRSkeletalTransformSpace Valve.VR.SteamVR_Action_Skeleton_Source::get_skeletalTransformSpace()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Skeleton_Source_get_skeletalTransformSpace_m0D9D61CC1BC50CC7FA1F9AD5192FBC418009F3F3_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::set_skeletalTransformSpace(Valve.VR.EVRSkeletalTransformSpace)
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_skeletalTransformSpace_m851FCD54C037B0D6CF78F14CBF0BF7B44EE86FA8_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, int32_t ___value0, const RuntimeMethod* method);
// Valve.VR.EVRSummaryType Valve.VR.SteamVR_Action_Skeleton_Source::get_summaryDataType()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Skeleton_Source_get_summaryDataType_mE0AB648E0339C2A082B81B15AA2D97854E8BB8CC_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::set_summaryDataType(Valve.VR.EVRSummaryType)
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_summaryDataType_m99B705C8282316AC52EBA3A718C998FE46329E1F_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, int32_t ___value0, const RuntimeMethod* method);
// Valve.VR.EVRSkeletalTrackingLevel Valve.VR.SteamVR_Action_Skeleton_Source::get_skeletalTrackingLevel()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Skeleton_Source_get_skeletalTrackingLevel_mD592F4C9B67DBFB75FD15DF4755E51FC24C32769 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_thumbCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_thumbCurl_m7C48F880AFC6164499E9E23B8D1F413B4AC9A98E (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_indexCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_indexCurl_m06230658C52C5E441A49AD40313C608619196B5B (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_middleCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_middleCurl_mE52CDCDA31A963E723E4BDCC3F3B618FC97CBBE8 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_ringCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_ringCurl_m779E5E61A32799167B43551CB36FE864A6413868 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_pinkyCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_pinkyCurl_m0E983BD50EB9B7AEB30874395070AE5E86C66FBB (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_thumbIndexSplay()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_thumbIndexSplay_mEA2624540878BDB6DA6344334535F817583A97B0 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_indexMiddleSplay()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_indexMiddleSplay_mC5FC7F51CDCC049B987DB60C5686335125255583 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_middleRingSplay()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_middleRingSplay_m3FCE7BEB2171ACEFCFD9A0E4169AB0BAD6BFEA62 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_ringPinkySplay()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_ringPinkySplay_mCAFFCF55E8363259B27670F7193D8B85AA934BC7 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_lastThumbCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_lastThumbCurl_m55C39AD1FA31B45A7C19348451F25A0488D13241 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_lastIndexCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_lastIndexCurl_m400F28379D6657033E67D29F2B6376654E71440F (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_lastMiddleCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_lastMiddleCurl_m32F8B6C010E5EDEFE25465EAFCCEE7CEBBEC8F36 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_lastRingCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_lastRingCurl_m79AD5ABC922A559F034B53F25848FCCB8F80C35D (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_lastPinkyCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_lastPinkyCurl_m40495088AE01BE4B8AE90499CE0A5AEC0673EB13 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_lastThumbIndexSplay()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_lastThumbIndexSplay_m990D77456F84B5E00C2DD1A5BEC36B915213B1FA (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_lastIndexMiddleSplay()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_lastIndexMiddleSplay_m328634EB394F9D2A6370F481BC35EF947462AB2E (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_lastMiddleRingSplay()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_lastMiddleRingSplay_m33B09DF71ADF6FF1BA42C31E2ACD6D3E5C258845 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_lastRingPinkySplay()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_lastRingPinkySplay_mFD509B1C21CF79C88833690ECDB237D307AAC531 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Single[] Valve.VR.SteamVR_Action_Skeleton_Source::get_fingerCurls()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* SteamVR_Action_Skeleton_Source_get_fingerCurls_mD56D63D01414ED3D7D6074DB29C81AAC3C490479_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Single[] Valve.VR.SteamVR_Action_Skeleton_Source::get_fingerSplays()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* SteamVR_Action_Skeleton_Source_get_fingerSplays_m5461F8E49017BD6579CC10D8D0783642DEDE37D0_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Single[] Valve.VR.SteamVR_Action_Skeleton_Source::get_lastFingerCurls()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* SteamVR_Action_Skeleton_Source_get_lastFingerCurls_m00C4EB3059A4427EF390371B7B56077017F42C2C_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Single[] Valve.VR.SteamVR_Action_Skeleton_Source::get_lastFingerSplays()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* SteamVR_Action_Skeleton_Source_get_lastFingerSplays_mC1CF900637C3FB99B1DE3F4BE06452EC07264747_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Boolean Valve.VR.SteamVR_Action_Skeleton_Source::get_poseChanged()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR bool SteamVR_Action_Skeleton_Source_get_poseChanged_m00A9DB3FFD0499D982FC39500D115B4968518988_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Boolean Valve.VR.SteamVR_Action_Skeleton_Source::get_onlyUpdateSummaryData()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR bool SteamVR_Action_Skeleton_Source_get_onlyUpdateSummaryData_m3AC011DB8ED08B67F124368EEA9934C5FACA5920_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::set_onlyUpdateSummaryData(System.Boolean)
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_onlyUpdateSummaryData_m49C580092D3CDFD2E8D1D98D06026C2FF6F73BCA_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, bool ___value0, const RuntimeMethod* method);
// System.Boolean Valve.VR.SteamVR_ActionSet::IsActive(Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_ActionSet_IsActive_m9909588615E0191F96E971182B8A52F864F39BEB (SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6 * __this, int32_t ___source0, const RuntimeMethod* method);
// System.Boolean Valve.VR.SteamVR_Action_Pose_Source::GetVelocitiesAtTimeOffset(System.Single,UnityEngine.Vector3&,UnityEngine.Vector3&)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Pose_Source_GetVelocitiesAtTimeOffset_m68F72C5D84CF5620C5FF8978BCCC52B3F79C7935 (SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 * __this, float ___secondsFromNow0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * ___velocityAtTime1, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * ___angularVelocityAtTime2, const RuntimeMethod* method);
// System.Boolean Valve.VR.SteamVR_Action_Pose_Source::GetPoseAtTimeOffset(System.Single,UnityEngine.Vector3&,UnityEngine.Quaternion&,UnityEngine.Vector3&,UnityEngine.Vector3&)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Pose_Source_GetPoseAtTimeOffset_m139061D3915BC3462FBEA4CBFCB3BD8DDB7FF4C7 (SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 * __this, float ___secondsFromNow0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * ___positionAtTime1, Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * ___rotationAtTime2, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * ___velocityAtTime3, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * ___angularVelocityAtTime4, const RuntimeMethod* method);
// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Pose_Source::get_localPosition()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Pose_Source_get_localPosition_mE065A826D8D1A8CF44D9E7F0D038F24D70985833_inline (SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 * __this, const RuntimeMethod* method);
// UnityEngine.Quaternion Valve.VR.SteamVR_Action_Pose_Source::get_localRotation()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  SteamVR_Action_Pose_Source_get_localRotation_m307D9DD92DFFFCC30446A71D9BD15674A797ED2A_inline (SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 * __this, const RuntimeMethod* method);
// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Pose_Source::get_velocity()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Pose_Source_get_velocity_m2B71BB7981006080D113442CB374529602A310BF_inline (SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 * __this, const RuntimeMethod* method);
// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Pose_Source::get_angularVelocity()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Pose_Source_get_angularVelocity_mACAA45CB05DB94C9292ED147F3156109DAFA0209_inline (SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 * __this, const RuntimeMethod* method);
// System.Boolean Valve.VR.SteamVR_Action_Pose_Source::get_deviceIsConnected()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Pose_Source_get_deviceIsConnected_mF1AE6114E98F19B5783F49FDB71381DF6D7CC963 (SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 * __this, const RuntimeMethod* method);
// System.Boolean Valve.VR.SteamVR_Action_Pose_Source::get_poseIsValid()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Pose_Source_get_poseIsValid_m45C4445DBD635BF4EDAA590D30874EA233DED74D (SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 * __this, const RuntimeMethod* method);
// Valve.VR.ETrackingResult Valve.VR.SteamVR_Action_Pose_Source::get_trackingState()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Pose_Source_get_trackingState_mAA7FE0C2B01A8508823AA7E0D8EED81D5DADCABD (SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 * __this, const RuntimeMethod* method);
// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Pose_Source::get_lastLocalPosition()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Pose_Source_get_lastLocalPosition_mB748F9D4600498E9BACCEBE5C8F00DED8125C307_inline (SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 * __this, const RuntimeMethod* method);
// UnityEngine.Quaternion Valve.VR.SteamVR_Action_Pose_Source::get_lastLocalRotation()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  SteamVR_Action_Pose_Source_get_lastLocalRotation_m15622BCE4A3D32548EBFE7DC98F8751352617660_inline (SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 * __this, const RuntimeMethod* method);
// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Pose_Source::get_lastVelocity()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Pose_Source_get_lastVelocity_mB9FD7955140F713C63842433E1E50D498EAD0A21_inline (SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 * __this, const RuntimeMethod* method);
// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Pose_Source::get_lastAngularVelocity()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Pose_Source_get_lastAngularVelocity_m3EE729ECF16DA55CFE069E25EB9099A80667C55F_inline (SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 * __this, const RuntimeMethod* method);
// System.Boolean Valve.VR.SteamVR_Action_Pose_Source::get_lastDeviceIsConnected()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Pose_Source_get_lastDeviceIsConnected_m13EFE0AE18A9B2F59BA86780A1A61B9BB367604D (SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 * __this, const RuntimeMethod* method);
// System.Boolean Valve.VR.SteamVR_Action_Pose_Source::get_lastPoseIsValid()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Pose_Source_get_lastPoseIsValid_mED2AB07587C45C6503F49F9B165A0E4861C35202 (SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 * __this, const RuntimeMethod* method);
// Valve.VR.ETrackingResult Valve.VR.SteamVR_Action_Pose_Source::get_lastTrackingState()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Pose_Source_get_lastTrackingState_mC3978EC30F22D70155C39DDF5F263447D9273500 (SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 * __this, const RuntimeMethod* method);
// System.UInt32 Valve.VR.SteamVR_Action_Skeleton::GetBoneCount()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR uint32_t SteamVR_Action_Skeleton_GetBoneCount_mB8D948288CCD3A7E432C9A28508CFF40C96F85A1 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method);
// System.Object System.Array::Clone()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RuntimeObject * Array_Clone_mE8C710213E323617A6F46F2B36DCDDD4C7CF5176 (RuntimeArray * __this, const RuntimeMethod* method);
// System.UInt32 Valve.VR.SteamVR_Action_Skeleton_Source::GetBoneCount()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR uint32_t SteamVR_Action_Skeleton_Source_GetBoneCount_m4EC7F17792380A78FF5B7699E35FB98ED5081E8C (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Int32[] Valve.VR.SteamVR_Action_Skeleton_Source::GetBoneHierarchy()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83* SteamVR_Action_Skeleton_Source_GetBoneHierarchy_m87C2A7C088DCA2527B23F2054C62EB27234DFF78 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.String Valve.VR.SteamVR_Action_Skeleton_Source::GetBoneName(System.Int32)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR String_t* SteamVR_Action_Skeleton_Source_GetBoneName_m67234F0D980501AD00E029B0B30415B8F18856F9 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, int32_t ___boneIndex0, const RuntimeMethod* method);
// SteamVR_Utils/RigidTransform[] Valve.VR.SteamVR_Action_Skeleton_Source::GetReferenceTransforms(Valve.VR.EVRSkeletalTransformSpace,Valve.VR.EVRSkeletalReferencePose)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RigidTransformU5BU5D_tC98EB3576009E5D825D0D43671A65D32A2449ECC* SteamVR_Action_Skeleton_Source_GetReferenceTransforms_mD97ED9032334370252095D9ABCED25D4D5533B92 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, int32_t ___transformSpace0, int32_t ___referencePose1, const RuntimeMethod* method);
// Valve.VR.EVRSkeletalTrackingLevel Valve.VR.SteamVR_Action_Skeleton_Source::GetSkeletalTrackingLevel()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Skeleton_Source_GetSkeletalTrackingLevel_mE38D26E81AA2C43A3BECB3EBEE02C2C632104C3B (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method);
// System.Single Valve.VR.SteamVR_Action_Skeleton::GetFingerCurl(System.Int32)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_GetFingerCurl_mC1F50D0ECE4C5553E8E25A7C06668558D2742620 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, int32_t ___finger0, const RuntimeMethod* method);
// System.Single Valve.VR.SteamVR_Action_Skeleton::GetSplay(System.Int32)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_GetSplay_m6A6A69B1D61A8EB56C024FBE87D50C11A155ACE0 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, int32_t ___fingerGapIndex0, const RuntimeMethod* method);
// System.Single Valve.VR.SteamVR_Action_Skeleton::GetLastFingerCurl(System.Int32)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_GetLastFingerCurl_m39488C73FCFCA0C9586171A54C06F3336F9EA563 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, int32_t ___finger0, const RuntimeMethod* method);
// System.Single Valve.VR.SteamVR_Action_Skeleton::GetLastSplay(System.Int32)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_GetLastSplay_m3EE8FC2ECE44A16A6F103E19A42AF8A10780C9B2 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, int32_t ___fingerGapIndex0, const RuntimeMethod* method);
// System.String Valve.VR.SteamVR_Action_In_Source::GetLocalizedOriginPart(Valve.VR.EVRInputStringBits[])
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR String_t* SteamVR_Action_In_Source_GetLocalizedOriginPart_m8A1FC7BEF4660C4D7D7573EE13F399C76D325938 (SteamVR_Action_In_Source_t6C3FA81DC7F53D302E49E09F5791E612AC7832AB * __this, EVRInputStringBitsU5BU5D_t9F9E9B47CD745CAAB4F8EDC305D84DDF9E5BE511* ___localizedParts0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action`2<Valve.VR.SteamVR_Action_Skeleton_Source_Map,Valve.VR.SteamVR_Action_Skeleton_Source>::InitAfterDeserialize()
inline void SteamVR_Action_2_InitAfterDeserialize_m18C23160315F8414CA38CA01EB2E95529802281C (SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D * __this, const RuntimeMethod* method)
{
	((  void (*) (SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *, const RuntimeMethod*))SteamVR_Action_2_InitAfterDeserialize_mCC6445068DDB02EA2F504749308CE3382698F4BE_gshared)(__this, method);
}
// UnityEngine.Vector3 UnityEngine.Vector3::get_up()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Vector3_get_up_m6309EBC4E42D6D0B3D28056BD23D0331275306F7 (const RuntimeMethod* method);
// UnityEngine.Quaternion UnityEngine.Quaternion::AngleAxis(System.Single,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  Quaternion_AngleAxis_m07DACF59F0403451DABB9BC991C53EE3301E88B0 (float ___angle0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___axis1, const RuntimeMethod* method);
// System.Delegate System.Delegate::Combine(System.Delegate,System.Delegate)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Delegate_t * Delegate_Combine_mC25D2F7DECAFBA6D9A2F9EBA8A77063F0658ECF1 (Delegate_t * ___a0, Delegate_t * ___b1, const RuntimeMethod* method);
// System.Delegate System.Delegate::Remove(System.Delegate,System.Delegate)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Delegate_t * Delegate_Remove_m0B0DB7D1B3AF96B71AFAA72BA0EFE32FBBC2932D (Delegate_t * ___source0, Delegate_t * ___value1, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Pose_Source::Preinitialize(Valve.VR.SteamVR_Action,Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Pose_Source_Preinitialize_m9D4858F6CD07854B44FEABF972A396AD52BF2979 (SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 * __this, SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 * ___wrappingAction0, int32_t ___forInputSource1, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::set_bonePositions(UnityEngine.Vector3[])
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_bonePositions_m6E2F4BC8D0DB6C17A44D1DD390933B195C8F0BE7_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::set_lastBonePositions(UnityEngine.Vector3[])
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_lastBonePositions_m7B9C3EC1294D432EBF5834AA2FD1518F398C771B_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::set_boneRotations(UnityEngine.Quaternion[])
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_boneRotations_m04DF922F78BEB4B48C610E5263CB5A56723BFE11_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::set_lastBoneRotations(UnityEngine.Quaternion[])
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_lastBoneRotations_mAF79C76574CD9C644F280B1E5DCBF068D84C0C71_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::set_fingerCurls(System.Single[])
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_fingerCurls_m8A5B299B1D9CA30852BCFDF4439985C7C67607D5_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::set_fingerSplays(System.Single[])
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_fingerSplays_mEC48DADE504DBFF9AB6B0D16ED35C39CE97F2EBD_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::set_lastFingerCurls(System.Single[])
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_lastFingerCurls_m87DEB2959B20AD607470B75C837EE42754040CFF_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::set_lastFingerSplays(System.Single[])
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_lastFingerSplays_mA14C6FC07879D8ED956F931D74A2DF14526476E9_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Pose_Source::Initialize()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Pose_Source_Initialize_mE07A70E1AF9A3257AFD2BB0C4FA228D748F88B43 (SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 * __this, const RuntimeMethod* method);
// System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Type_t * Type_GetTypeFromHandle_m9DC58ADF0512987012A8A016FB64B068F3B1AFF6 (RuntimeTypeHandle_t7B542280A22F0EC4EAC2061C29178845847A8B2D  ___handle0, const RuntimeMethod* method);
// System.Int32 System.Runtime.InteropServices.Marshal::SizeOf(System.Type)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t Marshal_SizeOf_m4F7DA827FA7A720395E6FDD2ABE78D4B00D43130 (Type_t * ___t0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Pose_Source::UpdateValue(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Pose_Source_UpdateValue_mD4FCEA491C3040D805773739C9A00420DB876447 (SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 * __this, bool ___skipStateAndEventUpdates0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::set_poseChanged(System.Boolean)
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_poseChanged_m91451416B46D3849E217C7FBAAA96F28364E94B0_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, bool ___value0, const RuntimeMethod* method);
// Valve.VR.CVRInput Valve.VR.OpenVR::get_Input()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR CVRInput_t2BE4417A3C1EA0C6CF647B0706BF37F886CE599B * OpenVR_get_Input_m904FD790D785E944EE58513F589E862530386414 (const RuntimeMethod* method);
// System.UInt64 Valve.VR.SteamVR_Action_Source::get_handle()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR uint64_t SteamVR_Action_Source_get_handle_mE4C63F9ADB5ACA5E72265B62C0908ACF8EF73A01 (SteamVR_Action_Source_t9D7428CDE39924074518EE6233D9A4FAB0C33CB0 * __this, const RuntimeMethod* method);
// Valve.VR.EVRInputError Valve.VR.CVRInput::GetSkeletalActionData(System.UInt64,Valve.VR.InputSkeletalActionData_t&,System.UInt32)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t CVRInput_GetSkeletalActionData_m89A0A431E11AD9772CA2724D8F45583146BB9C66 (CVRInput_t2BE4417A3C1EA0C6CF647B0706BF37F886CE599B * __this, uint64_t ___action0, InputSkeletalActionData_t_tA39C0A0FE4DBB8966D852B4FFC7D3A6D8F887430 * ___pActionData1, uint32_t ___unActionDataSize2, const RuntimeMethod* method);
// System.String Valve.VR.SteamVR_Action_Source::get_fullPath()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR String_t* SteamVR_Action_Source_get_fullPath_mB0C33E6C1B4F91E908236055FFAE027ECB3ED996 (SteamVR_Action_Source_t9D7428CDE39924074518EE6233D9A4FAB0C33CB0 * __this, const RuntimeMethod* method);
// System.String System.UInt64::ToString()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR String_t* UInt64_ToString_mF0E40B7459C207B89A1C8C04CE7F183AC0E6D672 (uint64_t* __this, const RuntimeMethod* method);
// System.String System.String::Concat(System.String[])
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR String_t* String_Concat_m232E857CA5107EA6AC52E7DD7018716C021F237B (StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* ___values0, const RuntimeMethod* method);
// System.Void UnityEngine.Debug::LogError(System.Object)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Debug_LogError_m3BCF9B78263152261565DCA9DB7D55F0C391ED29 (RuntimeObject * ___message0, const RuntimeMethod* method);
// Valve.VR.EVRInputError Valve.VR.CVRInput::GetSkeletalBoneData(System.UInt64,Valve.VR.EVRSkeletalTransformSpace,Valve.VR.EVRSkeletalMotionRange,Valve.VR.VRBoneTransform_t[])
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t CVRInput_GetSkeletalBoneData_mAE9C9E6EA4EBA38EF94D4849A702F5519E343CF7 (CVRInput_t2BE4417A3C1EA0C6CF647B0706BF37F886CE599B * __this, uint64_t ___action0, int32_t ___eTransformSpace1, int32_t ___eMotionRange2, VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B* ___pTransformArray3, const RuntimeMethod* method);
// UnityEngine.Quaternion UnityEngine.Quaternion::op_Multiply(UnityEngine.Quaternion,UnityEngine.Quaternion)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  Quaternion_op_Multiply_mDB9F738AA8160E3D85549F4FEDA23BC658B5A790 (Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___lhs0, Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___rhs1, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::UpdateSkeletalSummaryData(Valve.VR.EVRSummaryType,System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_UpdateSkeletalSummaryData_m66FD26ED63C98F872AB1DB6810616785C96BE3A2 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, int32_t ___summaryType0, bool ___force1, const RuntimeMethod* method);
// System.Single UnityEngine.Vector3::Distance(UnityEngine.Vector3,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Vector3_Distance_mE316E10B9B319A5C2A29F86E028740FD528149E7 (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___a0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___b1, const RuntimeMethod* method);
// System.Single UnityEngine.Quaternion::Angle(UnityEngine.Quaternion,UnityEngine.Quaternion)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Quaternion_Angle_m09599D660B724D330E5C7FE2FB1C8716161B3DD1 (Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___a0, Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___b1, const RuntimeMethod* method);
// System.Single UnityEngine.Time::get_realtimeSinceStartup()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Time_get_realtimeSinceStartup_mCA1086EC9DFCF135F77BC46D3B7127711EA3DE03 (const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_In_Source::set_changedTime(System.Single)
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_In_Source_set_changedTime_mD1EE7D0BD28058E1901FF671FB77587F2FCA35DA_inline (SteamVR_Action_In_Source_t6C3FA81DC7F53D302E49E09F5791E612AC7832AB * __this, float ___value0, const RuntimeMethod* method);
// Valve.VR.EVRInputError Valve.VR.CVRInput::GetBoneCount(System.UInt64,System.UInt32&)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t CVRInput_GetBoneCount_m2D8616427315CB0D0C2C46CA302B10E51E5CB43E (CVRInput_t2BE4417A3C1EA0C6CF647B0706BF37F886CE599B * __this, uint64_t ___action0, uint32_t* ___pBoneCount1, const RuntimeMethod* method);
// Valve.VR.EVRInputError Valve.VR.CVRInput::GetBoneHierarchy(System.UInt64,System.Int32[])
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t CVRInput_GetBoneHierarchy_mC4643B8296FB4397833F6BB337B93B21D69312F2 (CVRInput_t2BE4417A3C1EA0C6CF647B0706BF37F886CE599B * __this, uint64_t ___action0, Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83* ___pParentIndices1, const RuntimeMethod* method);
// System.Void System.Text.StringBuilder::.ctor(System.Int32)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void StringBuilder__ctor_m1C0F2D97B838537A2D0F64033AE4EF02D150A956 (StringBuilder_t * __this, int32_t ___capacity0, const RuntimeMethod* method);
// Valve.VR.EVRInputError Valve.VR.CVRInput::GetBoneName(System.UInt64,System.Int32,System.Text.StringBuilder,System.UInt32)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t CVRInput_GetBoneName_m8A4CA5E250538DBE77B7B80D9D3F8EA438AB2063 (CVRInput_t2BE4417A3C1EA0C6CF647B0706BF37F886CE599B * __this, uint64_t ___action0, int32_t ___nBoneIndex1, StringBuilder_t * ___pchBoneName2, uint32_t ___unNameBufferSize3, const RuntimeMethod* method);
// Valve.VR.EVRInputError Valve.VR.CVRInput::GetSkeletalReferenceTransforms(System.UInt64,Valve.VR.EVRSkeletalTransformSpace,Valve.VR.EVRSkeletalReferencePose,Valve.VR.VRBoneTransform_t[])
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t CVRInput_GetSkeletalReferenceTransforms_m917C75E8B7E3378FE568EBFD4B594C9731FA0B9B (CVRInput_t2BE4417A3C1EA0C6CF647B0706BF37F886CE599B * __this, uint64_t ___action0, int32_t ___eTransformSpace1, int32_t ___eReferencePose2, VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B* ___pTransformArray3, const RuntimeMethod* method);
// System.Void UnityEngine.Vector3::.ctor(System.Single,System.Single,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Vector3__ctor_m08F61F548AA5836D8789843ACB4A81E4963D2EE1 (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * __this, float ___x0, float ___y1, float ___z2, const RuntimeMethod* method);
// System.Void UnityEngine.Quaternion::.ctor(System.Single,System.Single,System.Single,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Quaternion__ctor_m7502F0C38E04C6DE24C965D1CAF278DDD02B9D61 (Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * __this, float ___x0, float ___y1, float ___z2, float ___w3, const RuntimeMethod* method);
// System.Void SteamVR_Utils/RigidTransform::.ctor(UnityEngine.Vector3,UnityEngine.Quaternion)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void RigidTransform__ctor_m8A80800C27705F4AF5CA6D008A8B6A74AFCCA1F2 (RigidTransform_t0E8A00F7013270B6B2254F29B4FFEAA6783CD905 * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___pos0, Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  ___rot1, const RuntimeMethod* method);
// Valve.VR.EVRInputError Valve.VR.CVRInput::GetSkeletalTrackingLevel(System.UInt64,Valve.VR.EVRSkeletalTrackingLevel&)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t CVRInput_GetSkeletalTrackingLevel_m7A1E94ED9540ABE0D8A58936E3FDDD6F5558B219 (CVRInput_t2BE4417A3C1EA0C6CF647B0706BF37F886CE599B * __this, uint64_t ___action0, int32_t* ___pSkeletalTrackingLevel1, const RuntimeMethod* method);
// Valve.VR.EVRInputError Valve.VR.CVRInput::GetSkeletalSummaryData(System.UInt64,Valve.VR.EVRSummaryType,Valve.VR.VRSkeletalSummaryData_t&)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t CVRInput_GetSkeletalSummaryData_mCF15CA558E142D63A09747514588928C6D7152F0 (CVRInput_t2BE4417A3C1EA0C6CF647B0706BF37F886CE599B * __this, uint64_t ___action0, int32_t ___eSummaryType1, VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831 * ___pSkeletalSummaryData2, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton/TrackingChangeHandler::Invoke(Valve.VR.SteamVR_Action_Skeleton,Valve.VR.ETrackingResult)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void TrackingChangeHandler_Invoke_m1F5CBD749F6D72B0368116228975ED75A322FAF9 (TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * __this, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * ___fromAction0, int32_t ___trackingState1, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton/ValidPoseChangeHandler::Invoke(Valve.VR.SteamVR_Action_Skeleton,System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ValidPoseChangeHandler_Invoke_mD8DAEE4D2F6111ED348DE9E66E194F66E2E89024 (ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * __this, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * ___fromAction0, bool ___validPose1, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton/DeviceConnectedChangeHandler::Invoke(Valve.VR.SteamVR_Action_Skeleton,System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void DeviceConnectedChangeHandler_Invoke_mFCAC042EA7E128B43D041E89C436CFAF4C340032 (DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * __this, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * ___fromAction0, bool ___deviceConnected1, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton/ChangeHandler::Invoke(Valve.VR.SteamVR_Action_Skeleton)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ChangeHandler_Invoke_m68EBE17205B49F58CC18575D9407E20E163CBE66 (ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * __this, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * ___fromAction0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton/ActiveChangeHandler::Invoke(Valve.VR.SteamVR_Action_Skeleton,System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ActiveChangeHandler_Invoke_m91B4ED8236F4EDF7B0D28988B02B1D9AC6C3A86A (ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * __this, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * ___fromAction0, bool ___active1, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Skeleton/UpdateHandler::Invoke(Valve.VR.SteamVR_Action_Skeleton)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void UpdateHandler_Invoke_mF1980FE6994D9662F4BAC4C3FB5DB38A1DD1FF29 (UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * __this, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * ___fromAction0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Pose_Source::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Pose_Source__ctor_mADDAC326C7500D82492B45F896F5F57C4B60D880 (SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 * __this, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Pose_Source_Map`1<Valve.VR.SteamVR_Action_Skeleton_Source>::.ctor()
inline void SteamVR_Action_Pose_Source_Map_1__ctor_m46CC8AADAF802355D940EB7B8E1F27836A7B4476 (SteamVR_Action_Pose_Source_Map_1_t62FCD50EDE24217AD6FAFADAC23DA65555B7A125 * __this, const RuntimeMethod* method)
{
	((  void (*) (SteamVR_Action_Pose_Source_Map_1_t62FCD50EDE24217AD6FAFADAC23DA65555B7A125 *, const RuntimeMethod*))SteamVR_Action_Pose_Source_Map_1__ctor_mBB8E245C3E0BAADAA79082AA6FC40445EBC7C41E_gshared)(__this, method);
}
// Valve.VR.SteamVR_ActionSet Valve.VR.SteamVR_Action_Source::get_actionSet()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6 * SteamVR_Action_Source_get_actionSet_mF2BE8CE30F960A11115AD000921BBF16088CF5B2 (SteamVR_Action_Source_t9D7428CDE39924074518EE6233D9A4FAB0C33CB0 * __this, const RuntimeMethod* method);
// Valve.VR.SteamVR_Input_Sources Valve.VR.SteamVR_Action_Source::get_inputSource()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Source_get_inputSource_mAA1928183BB06E5C8CF950F65BA80635C25535D4_inline (SteamVR_Action_Source_t9D7428CDE39924074518EE6233D9A4FAB0C33CB0 * __this, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Source::set_inputSource(Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Source_set_inputSource_mCA804B7275EED0C19F247767BCC22B7F639A3175_inline (SteamVR_Action_Source_t9D7428CDE39924074518EE6233D9A4FAB0C33CB0 * __this, int32_t ___value0, const RuntimeMethod* method);
// System.Void System.Object::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Object__ctor_m925ECA5E85CA100E3FB86A4F9E15C120E9A184C0 (RuntimeObject * __this, const RuntimeMethod* method);
// System.UInt64 Valve.VR.SteamVR_Input_Source::GetHandle(Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR uint64_t SteamVR_Input_Source_GetHandle_mEA0F6E33E3CB937C11859B35CDB283523240E185 (int32_t ___inputSource0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Source_Map::set_fullPath(System.String)
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Source_Map_set_fullPath_mBB40F4301664B3074825255DA6E51B5E02F93463_inline (SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17 * __this, String_t* ___value0, const RuntimeMethod* method);
// System.String Valve.VR.SteamVR_Action_Source_Map::GetActionSetPath()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR String_t* SteamVR_Action_Source_Map_GetActionSetPath_mA1707CA47C4282036468F3EA4603C7B25963D834 (SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17 * __this, const RuntimeMethod* method);
// Valve.VR.SteamVR_ActionSet Valve.VR.SteamVR_Input::GetActionSetFromPath(System.String,System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6 * SteamVR_Input_GetActionSetFromPath_mC36B5370364DAB9D5FFC55AB768FBC926B509306 (String_t* ___path0, bool ___caseSensitive1, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Source_Map::set_actionSet(Valve.VR.SteamVR_ActionSet)
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Source_Map_set_actionSet_m8D8A292258A3B69B920DED592F2BD44A259EBAA9_inline (SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17 * __this, SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6 * ___value0, const RuntimeMethod* method);
// Valve.VR.SteamVR_ActionDirections Valve.VR.SteamVR_Action_Source_Map::GetActionDirection()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Source_Map_GetActionDirection_mA48BA216E276F882C863341B7197E590B6471119 (SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17 * __this, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Source_Map::set_direction(Valve.VR.SteamVR_ActionDirections)
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Source_Map_set_direction_m4E65637F7F50E116169B2CFB6EBF5A2583D902F2_inline (SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17 * __this, int32_t ___value0, const RuntimeMethod* method);
// Valve.VR.SteamVR_Input_Sources[] Valve.VR.SteamVR_Input_Source::GetAllSources()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR SteamVR_Input_SourcesU5BU5D_t735048547A8599BA461FE16B1BC029194E1F184A* SteamVR_Input_Source_GetAllSources_m3FEDAE791D389B6ED4E1A7665B1F6381780C8352 (const RuntimeMethod* method);
// System.String Valve.VR.SteamVR_Action_Source_Map::get_fullPath()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR String_t* SteamVR_Action_Source_Map_get_fullPath_m17B3B1227ABDCC35456A1B37EE9919772DD1F24E_inline (SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17 * __this, const RuntimeMethod* method);
// System.String System.String::ToLowerInvariant()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR String_t* String_ToLowerInvariant_m197BD65B6582DC546FF1BC398161EEFA708F799E (String_t* __this, const RuntimeMethod* method);
// Valve.VR.EVRInputError Valve.VR.CVRInput::GetActionHandle(System.String,System.UInt64&)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t CVRInput_GetActionHandle_mCF28476FA77FA4AA30EFE57818D83C4F8492828F (CVRInput_t2BE4417A3C1EA0C6CF647B0706BF37F886CE599B * __this, String_t* ___pchActionName0, uint64_t* ___pHandle1, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Source_Map::set_handle(System.UInt64)
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Source_Map_set_handle_mB5B6B8E56BCC552963E91E2748DF8CC04BDC979A_inline (SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17 * __this, uint64_t ___value0, const RuntimeMethod* method);
// System.String System.String::Concat(System.String,System.String,System.String,System.String)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR String_t* String_Concat_mDD2E38332DED3A8C088D38D78A0E0BEB5091DA64 (String_t* ___str00, String_t* ___str11, String_t* ___str22, String_t* ___str33, const RuntimeMethod* method);
// System.Int32 System.String::IndexOf(System.Char,System.Int32)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t String_IndexOf_m66F6178DB4B2F61F4FAFD8B75787D0AB142ADD7D (String_t* __this, Il2CppChar ___value0, int32_t ___startIndex1, const RuntimeMethod* method);
// System.String System.String::Substring(System.Int32,System.Int32)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR String_t* String_Substring_mB593C0A320C683E6E47EFFC0A12B7A465E5E43BB (String_t* __this, int32_t ___startIndex0, int32_t ___length1, const RuntimeMethod* method);
// System.Boolean System.String::op_Equality(System.String,System.String)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool String_op_Equality_m139F0E4195AE2F856019E63B241F36F016997FCE (String_t* ___a0, String_t* ___b1, const RuntimeMethod* method);
// System.String System.String::Concat(System.String,System.String)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR String_t* String_Concat_mB78D0094592718DA6D5DB6C712A9C225631666BE (String_t* ___str00, String_t* ___str11, const RuntimeMethod* method);
// System.Globalization.CultureInfo System.Globalization.CultureInfo::get_CurrentCulture()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F * CultureInfo_get_CurrentCulture_mD86F3D8E5D332FB304F80D9B9CA4DE849C2A6831 (const RuntimeMethod* method);
// System.String System.String::ToLower(System.Globalization.CultureInfo)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR String_t* String_ToLower_m91732DBE4AE31B77EA3BB2C185E66513919968A5 (String_t* __this, CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F * ___culture0, const RuntimeMethod* method);
// SourceElement Valve.VR.SteamVR_Action_Source_Map`1<Valve.VR.SteamVR_Action_Vector2_Source>::get_Item(Valve.VR.SteamVR_Input_Sources)
inline SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573 (SteamVR_Action_Source_Map_1_tE12722D4173E7C4230CAF8EE7E30368AA130B899 * __this, int32_t ___inputSource0, const RuntimeMethod* method)
{
	return ((  SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * (*) (SteamVR_Action_Source_Map_1_tE12722D4173E7C4230CAF8EE7E30368AA130B899 *, int32_t, const RuntimeMethod*))SteamVR_Action_Source_Map_1_get_Item_mE7E2BE18AECB1CDFEADB1E81CEC1C729BBACAB4D_gshared)(__this, ___inputSource0, method);
}
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::add_onChange(Valve.VR.SteamVR_Action_Vector2/ChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_add_onChange_m0E890E6CFC54755D7CA6271AACB94F0D16195BFC (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::remove_onChange(Valve.VR.SteamVR_Action_Vector2/ChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_remove_onChange_m6B9FFEDD2003E99E2C81E03B744E35528BCABEE1 (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::add_onUpdate(Valve.VR.SteamVR_Action_Vector2/UpdateHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_add_onUpdate_mF42BBDFA8EFE2D15571BE512017F7D2C8A016345 (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::remove_onUpdate(Valve.VR.SteamVR_Action_Vector2/UpdateHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_remove_onUpdate_m7FA21E9B212C4E869AFE43AAE5D3138799CA8320 (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::add_onAxis(Valve.VR.SteamVR_Action_Vector2/AxisHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_add_onAxis_m61879208AE0900224DF6DAC2B5F9AB437F3E3F65 (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::remove_onAxis(Valve.VR.SteamVR_Action_Vector2/AxisHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_remove_onAxis_mF3D7E276BA4A72809424D8F02B91BC600C706A45 (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::add_onActiveChange(Valve.VR.SteamVR_Action_Vector2/ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_add_onActiveChange_m748D7DF506E999E43D76725669A423DC02CAC2A2 (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::remove_onActiveChange(Valve.VR.SteamVR_Action_Vector2/ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_remove_onActiveChange_mF774E29E5C6AB17CE4351C8533279C2F1685F5A5 (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::add_onActiveBindingChange(Valve.VR.SteamVR_Action_Vector2/ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_add_onActiveBindingChange_m10B03BA452F43087BBBB922DD51EF10CAE15D6BC (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::remove_onActiveBindingChange(Valve.VR.SteamVR_Action_Vector2/ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_remove_onActiveBindingChange_m3A62BA01D3F897E4C7115DF360F9DE899A66EB12 (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * ___value0, const RuntimeMethod* method);
// UnityEngine.Vector2 Valve.VR.SteamVR_Action_Vector2_Source::get_axis()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  SteamVR_Action_Vector2_Source_get_axis_mCEB6E517ED0E10BE513D22B23A69F1BE3D5DA2BA_inline (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, const RuntimeMethod* method);
// UnityEngine.Vector2 Valve.VR.SteamVR_Action_Vector2_Source::get_lastAxis()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  SteamVR_Action_Vector2_Source_get_lastAxis_mD0A1188D33FAD9AAB16CBCC0C073796C76616460_inline (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, const RuntimeMethod* method);
// UnityEngine.Vector2 Valve.VR.SteamVR_Action_Vector2_Source::get_delta()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  SteamVR_Action_Vector2_Source_get_delta_m19CFFF4B8014BD4ED43D0C5EDDD909A2F1DF1908_inline (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, const RuntimeMethod* method);
// UnityEngine.Vector2 Valve.VR.SteamVR_Action_Vector2_Source::get_lastDelta()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  SteamVR_Action_Vector2_Source_get_lastDelta_mE21D07B848010D30A36B3C7338B5B615B81598AC_inline (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_In`2<Valve.VR.SteamVR_Action_Vector2_Source_Map,Valve.VR.SteamVR_Action_Vector2_Source>::.ctor()
inline void SteamVR_Action_In_2__ctor_mD999F898F7EC32F7FF2A4DE8A4FC77CB7012CC2F (SteamVR_Action_In_2_t4260173E99094920C69878272DE55CE93D5D5A9C * __this, const RuntimeMethod* method)
{
	((  void (*) (SteamVR_Action_In_2_t4260173E99094920C69878272DE55CE93D5D5A9C *, const RuntimeMethod*))SteamVR_Action_In_2__ctor_m1E68CCDF619CF154D71E1657018F8407C7E9E57C_gshared)(__this, method);
}
// System.Void Valve.VR.SteamVR_Action`2<Valve.VR.SteamVR_Action_Vector2_Source_Map,Valve.VR.SteamVR_Action_Vector2_Source>::InitAfterDeserialize()
inline void SteamVR_Action_2_InitAfterDeserialize_mF4DC388BA98BF545E220E94BC0C4DBF458090EB7 (SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 * __this, const RuntimeMethod* method)
{
	((  void (*) (SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 *, const RuntimeMethod*))SteamVR_Action_2_InitAfterDeserialize_mCC6445068DDB02EA2F504749308CE3382698F4BE_gshared)(__this, method);
}
// System.Void Valve.VR.SteamVR_Action_Source::Preinitialize(Valve.VR.SteamVR_Action,Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Source_Preinitialize_mD54CBA24E4881B8742430B3EDF16283316305913 (SteamVR_Action_Source_t9D7428CDE39924074518EE6233D9A4FAB0C33CB0 * __this, SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 * ___wrappingAction0, int32_t ___forInputSource1, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_In_Source::Initialize()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_In_Source_Initialize_m8CC254F78B69011CCE42C3E64A38B481FEC5F795 (SteamVR_Action_In_Source_t6C3FA81DC7F53D302E49E09F5791E612AC7832AB * __this, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::set_lastAxis(UnityEngine.Vector2)
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_set_lastAxis_m77FAC4A378FA78CC827A871984258A60FA83CAE2_inline (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::set_lastDelta(UnityEngine.Vector2)
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_set_lastDelta_m1943C66837BE7929D58A91A9DFBAB4BBC2A1DB12_inline (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___value0, const RuntimeMethod* method);
// Valve.VR.EVRInputError Valve.VR.CVRInput::GetAnalogActionData(System.UInt64,Valve.VR.InputAnalogActionData_t&,System.UInt32,System.UInt64)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t CVRInput_GetAnalogActionData_m363EF49EA0485B0A4FF93C37842AC2CF8D21041A (CVRInput_t2BE4417A3C1EA0C6CF647B0706BF37F886CE599B * __this, uint64_t ___action0, InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * ___pActionData1, uint32_t ___unActionDataSize2, uint64_t ___ulRestrictToDevice3, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_In_Source::set_updateTime(System.Single)
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_In_Source_set_updateTime_mDA27AEC2F90C6036B8E6979F74E68528316D1322_inline (SteamVR_Action_In_Source_t6C3FA81DC7F53D302E49E09F5791E612AC7832AB * __this, float ___value0, const RuntimeMethod* method);
// System.Void UnityEngine.Vector2::.ctor(System.Single,System.Single)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void Vector2__ctor_mEE8FB117AB1F8DB746FB8B3EB4C0DA3BF2A230D0 (Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * __this, float ___x0, float ___y1, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::set_axis(UnityEngine.Vector2)
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_set_axis_m2252BBEBC8C6D4A676ABF0EE270D181EBFB823BB_inline (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::set_delta(UnityEngine.Vector2)
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_set_delta_m8D0A6407047BB76299057CF382CD612137A600F3_inline (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___value0, const RuntimeMethod* method);
// System.Single UnityEngine.Vector2::get_magnitude()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Vector2_get_magnitude_m66097AFDF9696BD3E88467D4398D4F82B8A4C7DF (Vector2_tA85D2DD88578276CA8A8796756458277E72D073D * __this, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector2/ChangeHandler::Invoke(Valve.VR.SteamVR_Action_Vector2,Valve.VR.SteamVR_Input_Sources,UnityEngine.Vector2,UnityEngine.Vector2)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ChangeHandler_Invoke_mD9CA3B62E4D42C612CFE1F900C127EB2E178869C (ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * __this, SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * ___fromAction0, int32_t ___fromSource1, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___axis2, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___delta3, const RuntimeMethod* method);
// UnityEngine.Vector2 UnityEngine.Vector2::get_zero()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  Vector2_get_zero_mFE0C3213BB698130D6C5247AB4B887A59074D0A8 (const RuntimeMethod* method);
// System.Boolean UnityEngine.Vector2::op_Inequality(UnityEngine.Vector2,UnityEngine.Vector2)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool Vector2_op_Inequality_mC16161C640C89D98A00800924F83FF09FD7C100E (Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___lhs0, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___rhs1, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector2/AxisHandler::Invoke(Valve.VR.SteamVR_Action_Vector2,Valve.VR.SteamVR_Input_Sources,UnityEngine.Vector2,UnityEngine.Vector2)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void AxisHandler_Invoke_mFB29C3120DB4B338D9465DADD73FD30E158E05AB (AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * __this, SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * ___fromAction0, int32_t ___fromSource1, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___axis2, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___delta3, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector2/UpdateHandler::Invoke(Valve.VR.SteamVR_Action_Vector2,Valve.VR.SteamVR_Input_Sources,UnityEngine.Vector2,UnityEngine.Vector2)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void UpdateHandler_Invoke_mDAB942B37EFE85A16B58B2E6300770D04437F2C1 (UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * __this, SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * ___fromAction0, int32_t ___fromSource1, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___axis2, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___delta3, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector2/ActiveChangeHandler::Invoke(Valve.VR.SteamVR_Action_Vector2,Valve.VR.SteamVR_Input_Sources,System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ActiveChangeHandler_Invoke_m6F9573537B1F39ADF5C93AA6452D108C664CC943 (ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * __this, SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * ___fromAction0, int32_t ___fromSource1, bool ___active2, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_In_Source::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_In_Source__ctor_mFF9B46DF32121E562139E277818FB636DCA2A816 (SteamVR_Action_In_Source_t6C3FA81DC7F53D302E49E09F5791E612AC7832AB * __this, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_In_Source_Map`1<Valve.VR.SteamVR_Action_Vector2_Source>::.ctor()
inline void SteamVR_Action_In_Source_Map_1__ctor_m1C7CDFB82FBD6E95D7AF23AB9320BCCD68C5CA92 (SteamVR_Action_In_Source_Map_1_tE08712080E22D9A4BAF4C436860AA6226B5FC72D * __this, const RuntimeMethod* method)
{
	((  void (*) (SteamVR_Action_In_Source_Map_1_tE08712080E22D9A4BAF4C436860AA6226B5FC72D *, const RuntimeMethod*))SteamVR_Action_In_Source_Map_1__ctor_mABEF0F1512ABB73914B960E4A67930AC81E767F1_gshared)(__this, method);
}
// SourceElement Valve.VR.SteamVR_Action_Source_Map`1<Valve.VR.SteamVR_Action_Vector3_Source>::get_Item(Valve.VR.SteamVR_Input_Sources)
inline SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A (SteamVR_Action_Source_Map_1_tAA298402BDA6A553A0C30790E7129D18A7682C1F * __this, int32_t ___inputSource0, const RuntimeMethod* method)
{
	return ((  SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * (*) (SteamVR_Action_Source_Map_1_tAA298402BDA6A553A0C30790E7129D18A7682C1F *, int32_t, const RuntimeMethod*))SteamVR_Action_Source_Map_1_get_Item_mE7E2BE18AECB1CDFEADB1E81CEC1C729BBACAB4D_gshared)(__this, ___inputSource0, method);
}
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::add_onChange(Valve.VR.SteamVR_Action_Vector3/ChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_add_onChange_m69C7AFE22DFEF6EE8205740927730B4793ABC16D (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::remove_onChange(Valve.VR.SteamVR_Action_Vector3/ChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_remove_onChange_m2C757953F88F1D3FCAD98F0F7D0C4EEDCE3220DB (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::add_onUpdate(Valve.VR.SteamVR_Action_Vector3/UpdateHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_add_onUpdate_mE3337890745CBF20D96EB63A6241FB545E8D7DFC (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::remove_onUpdate(Valve.VR.SteamVR_Action_Vector3/UpdateHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_remove_onUpdate_mE4D9472A97BDCB264B875B8AFEB5E1C19187FF07 (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::add_onAxis(Valve.VR.SteamVR_Action_Vector3/AxisHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_add_onAxis_m09DA9894C1E442EB2D92595D083CD574E287150A (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::remove_onAxis(Valve.VR.SteamVR_Action_Vector3/AxisHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_remove_onAxis_m0E77E9C566405FABBE20C7120A16AE551AC4B70C (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::add_onActiveChange(Valve.VR.SteamVR_Action_Vector3/ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_add_onActiveChange_m01C18C6CC07A9423AACB55F009E6562493049DA0 (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::remove_onActiveChange(Valve.VR.SteamVR_Action_Vector3/ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_remove_onActiveChange_mEFAADD238B7127C347FCBF4D850FBD7664BEFD95 (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::add_onActiveBindingChange(Valve.VR.SteamVR_Action_Vector3/ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_add_onActiveBindingChange_mC84803E228A14E7891F4B456DC5A102E2ED3956A (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::remove_onActiveBindingChange(Valve.VR.SteamVR_Action_Vector3/ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_remove_onActiveBindingChange_m823695F9961EF46DB2811DA5B8E68567582C639B (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * ___value0, const RuntimeMethod* method);
// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Vector3_Source::get_axis()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Vector3_Source_get_axis_m0F9A2BF33B9BC6BF5774EC4D7E2EE2B474B28E99_inline (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, const RuntimeMethod* method);
// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Vector3_Source::get_lastAxis()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Vector3_Source_get_lastAxis_mB5307EA9C41A76639B02A5FB7C775E14C7E8BE8E_inline (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, const RuntimeMethod* method);
// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Vector3_Source::get_delta()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Vector3_Source_get_delta_m4B3DA30643F7D02E80B5AAC93D5BF6D730305BC0_inline (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, const RuntimeMethod* method);
// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Vector3_Source::get_lastDelta()
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Vector3_Source_get_lastDelta_mBCB31D8D0D5F3B64784F01EAFFC7311F1E07B467_inline (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_In`2<Valve.VR.SteamVR_Action_Vector3_Source_Map,Valve.VR.SteamVR_Action_Vector3_Source>::.ctor()
inline void SteamVR_Action_In_2__ctor_mF9E126AD1A57CA13943CDE8404A98C0DA8FF8225 (SteamVR_Action_In_2_tFC1FB3FBCB26CEB814D8547C997DDFD01A8A0FB2 * __this, const RuntimeMethod* method)
{
	((  void (*) (SteamVR_Action_In_2_tFC1FB3FBCB26CEB814D8547C997DDFD01A8A0FB2 *, const RuntimeMethod*))SteamVR_Action_In_2__ctor_m1E68CCDF619CF154D71E1657018F8407C7E9E57C_gshared)(__this, method);
}
// System.Void Valve.VR.SteamVR_Action`2<Valve.VR.SteamVR_Action_Vector3_Source_Map,Valve.VR.SteamVR_Action_Vector3_Source>::InitAfterDeserialize()
inline void SteamVR_Action_2_InitAfterDeserialize_mEE7832ED7C1B03D8FEB093F34B2B63974C3B5A04 (SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 * __this, const RuntimeMethod* method)
{
	((  void (*) (SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 *, const RuntimeMethod*))SteamVR_Action_2_InitAfterDeserialize_mCC6445068DDB02EA2F504749308CE3382698F4BE_gshared)(__this, method);
}
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::set_lastAxis(UnityEngine.Vector3)
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_set_lastAxis_m2DA773CD84278414BB2D77495722E7E288C2727C_inline (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::set_lastDelta(UnityEngine.Vector3)
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_set_lastDelta_mD5A541A52EC64B8BF321E3B9778E37647A968DD1_inline (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::set_axis(UnityEngine.Vector3)
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_set_axis_m8D6C550660D5D6EF3AFC2376B964204B4B26C0DF_inline (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___value0, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::set_delta(UnityEngine.Vector3)
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_set_delta_m425C84C1DE5AD8F12F9F04C1E4C78452C580FE2B_inline (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___value0, const RuntimeMethod* method);
// System.Single UnityEngine.Vector3::get_magnitude()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float Vector3_get_magnitude_m9A750659B60C5FE0C30438A7F9681775D5DB1274 (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * __this, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector3/ChangeHandler::Invoke(Valve.VR.SteamVR_Action_Vector3,Valve.VR.SteamVR_Input_Sources,UnityEngine.Vector3,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ChangeHandler_Invoke_m1BD4D5E5DD81C63A9C020AE470617259DBAF62EE (ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * __this, SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * ___fromAction0, int32_t ___fromSource1, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___axis2, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___delta3, const RuntimeMethod* method);
// UnityEngine.Vector3 UnityEngine.Vector3::get_zero()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  Vector3_get_zero_m3CDDCAE94581DF3BB16C4B40A100E28E9C6649C2 (const RuntimeMethod* method);
// System.Boolean UnityEngine.Vector3::op_Inequality(UnityEngine.Vector3,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool Vector3_op_Inequality_mFEEAA4C4BF743FB5B8A47FF4967A5E2C73273D6E (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___lhs0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___rhs1, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector3/AxisHandler::Invoke(Valve.VR.SteamVR_Action_Vector3,Valve.VR.SteamVR_Input_Sources,UnityEngine.Vector3,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void AxisHandler_Invoke_m4898437260780A1DE7497E17A30140E7081E3891 (AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * __this, SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * ___fromAction0, int32_t ___fromSource1, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___axis2, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___delta3, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector3/UpdateHandler::Invoke(Valve.VR.SteamVR_Action_Vector3,Valve.VR.SteamVR_Input_Sources,UnityEngine.Vector3,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void UpdateHandler_Invoke_m7B6641AC506F248A3301DE33BD7518AFE35A6A59 (UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * __this, SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * ___fromAction0, int32_t ___fromSource1, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___axis2, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___delta3, const RuntimeMethod* method);
// System.Void Valve.VR.SteamVR_Action_Vector3/ActiveChangeHandler::Invoke(Valve.VR.SteamVR_Action_Vector3,Valve.VR.SteamVR_Input_Sources,System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ActiveChangeHandler_Invoke_m67A19739D2E43FC88B0EA8081E3DACEE816EF2AD (ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * __this, SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * ___fromAction0, int32_t ___fromSource1, bool ___active2, const RuntimeMethod* method);
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Void Valve.VR.SteamVR_Action_Single_Source_Map::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Single_Source_Map__ctor_mBEEDF89DB49EE998BFEFAC3FB1DF7665B3FE4AE9 (SteamVR_Action_Single_Source_Map_tBD46D15F4FCB5A4B6BDA2B1FE96035D4DDBDBA37 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Single_Source_Map__ctor_mBEEDF89DB49EE998BFEFAC3FB1DF7665B3FE4AE9_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Single_Source_Map__ctor_mBEEDF89DB49EE998BFEFAC3FB1DF7665B3FE4AE9_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		SteamVR_Action_In_Source_Map_1__ctor_m3CF6B3F7CC98C67885A2F7915311C360B9842389(__this, /*hidden argument*/SteamVR_Action_In_Source_Map_1__ctor_m3CF6B3F7CC98C67885A2F7915311C360B9842389_RuntimeMethod_var);
		return;
	}
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Void Valve.VR.SteamVR_Action_Skeleton::add_onActiveChange(Valve.VR.SteamVR_Action_Skeleton_ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_add_onActiveChange_m49322B1046AB4F7F652CFC7F8F5354697CFC419E (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_add_onActiveChange_m49322B1046AB4F7F652CFC7F8F5354697CFC419E_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_add_onActiveChange_m49322B1046AB4F7F652CFC7F8F5354697CFC419E_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6469));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6470));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6471));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onActiveChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onActiveChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6472));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6474));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6474));
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6475));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_add_onActiveChange_mE0FC38C5C6749C482B67CA8FC2017969A0BE37F6(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6475));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onActiveChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onActiveChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6473));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::remove_onActiveChange(Valve.VR.SteamVR_Action_Skeleton_ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_remove_onActiveChange_mB45B49699E0BA70E2CE347A6E9F96018F3FA7BB4 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_remove_onActiveChange_mB45B49699E0BA70E2CE347A6E9F96018F3FA7BB4_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_remove_onActiveChange_mB45B49699E0BA70E2CE347A6E9F96018F3FA7BB4_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6476));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6477));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6478));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onActiveChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onActiveChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6479));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6481));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6481));
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6482));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_remove_onActiveChange_m02B106748649E99F649EC24789D36D5DB0577965(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6482));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onActiveChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onActiveChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6480));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::add_onActiveBindingChange(Valve.VR.SteamVR_Action_Skeleton_ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_add_onActiveBindingChange_m07DF54383907362AF8846A96EC486DE4ADF4CDA1 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_add_onActiveBindingChange_m07DF54383907362AF8846A96EC486DE4ADF4CDA1_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_add_onActiveBindingChange_m07DF54383907362AF8846A96EC486DE4ADF4CDA1_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6483));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6484));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6485));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onActiveBindingChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onActiveBindingChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6486));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6488));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6488));
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6489));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_add_onActiveBindingChange_m4DC3513C7C9507997D9D34F1A514F152B2D38CFA(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6489));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onActiveBindingChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onActiveBindingChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6487));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::remove_onActiveBindingChange(Valve.VR.SteamVR_Action_Skeleton_ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_remove_onActiveBindingChange_mF4DF38A823FEA14CBCBEBAD5B07048564772FF42 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_remove_onActiveBindingChange_mF4DF38A823FEA14CBCBEBAD5B07048564772FF42_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_remove_onActiveBindingChange_mF4DF38A823FEA14CBCBEBAD5B07048564772FF42_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6490));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6491));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6492));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onActiveBindingChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onActiveBindingChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6493));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6495));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6495));
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6496));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_remove_onActiveBindingChange_m8B778606DA02C1FB1A23C1A955951094E261F2AF(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6496));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onActiveBindingChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onActiveBindingChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6494));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::add_onChange(Valve.VR.SteamVR_Action_Skeleton_ChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_add_onChange_mD39BD96DEA8F826BAB9975C7960E0FCC34DD2949 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_add_onChange_mD39BD96DEA8F826BAB9975C7960E0FCC34DD2949_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_add_onChange_mD39BD96DEA8F826BAB9975C7960E0FCC34DD2949_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6497));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6498));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6499));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6500));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6502));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6502));
		ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6503));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_add_onChange_m36F08DE1097970DE49B839792F1935A218E92ADA(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6503));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6501));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::remove_onChange(Valve.VR.SteamVR_Action_Skeleton_ChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_remove_onChange_mE3314F2A6094E48BA418013DBEB83064A7F853B0 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_remove_onChange_mE3314F2A6094E48BA418013DBEB83064A7F853B0_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_remove_onChange_mE3314F2A6094E48BA418013DBEB83064A7F853B0_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6504));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6505));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6506));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6507));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6509));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6509));
		ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6510));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_remove_onChange_m9AE202076C862455102381B3DD4AA5E98D8E7DB0(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6510));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6508));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::add_onUpdate(Valve.VR.SteamVR_Action_Skeleton_UpdateHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_add_onUpdate_mB35B29D83BC5DBA077A734822B1E78F0D921A6E9 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_add_onUpdate_mB35B29D83BC5DBA077A734822B1E78F0D921A6E9_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_add_onUpdate_mB35B29D83BC5DBA077A734822B1E78F0D921A6E9_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6511));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6512));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6513));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onUpdate += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onUpdate -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6514));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6516));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6516));
		UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6517));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_add_onUpdate_m7E46F0BA1CFA58A2B4CD7E9937AF913E21B597E4(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6517));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onUpdate += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onUpdate -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6515));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::remove_onUpdate(Valve.VR.SteamVR_Action_Skeleton_UpdateHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_remove_onUpdate_m8558F015C56A6191114E396FBFA440F47580D79C (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_remove_onUpdate_m8558F015C56A6191114E396FBFA440F47580D79C_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_remove_onUpdate_m8558F015C56A6191114E396FBFA440F47580D79C_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6518));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6519));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6520));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onUpdate += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onUpdate -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6521));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6523));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6523));
		UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6524));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_remove_onUpdate_m3DAC62A7DE38AF1BA67D76654BDC0CECB0296FAF(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6524));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onUpdate += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onUpdate -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6522));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::add_onTrackingChanged(Valve.VR.SteamVR_Action_Skeleton_TrackingChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_add_onTrackingChanged_m27D7D512A8B28F439D5462462C58725039CB823B (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_add_onTrackingChanged_m27D7D512A8B28F439D5462462C58725039CB823B_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_add_onTrackingChanged_m27D7D512A8B28F439D5462462C58725039CB823B_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6525));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6526));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6527));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onTrackingChanged += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onTrackingChanged -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6528));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6530));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6530));
		TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6531));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_add_onTrackingChanged_m1214E513861191327AAAF65D11DDA8E978F2EAD0(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6531));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onTrackingChanged += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onTrackingChanged -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6529));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::remove_onTrackingChanged(Valve.VR.SteamVR_Action_Skeleton_TrackingChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_remove_onTrackingChanged_mE5229135F65372F6DDA222F462565A6D0E66DA6D (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_remove_onTrackingChanged_mE5229135F65372F6DDA222F462565A6D0E66DA6D_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_remove_onTrackingChanged_mE5229135F65372F6DDA222F462565A6D0E66DA6D_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6532));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6533));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6534));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onTrackingChanged += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onTrackingChanged -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6535));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6537));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6537));
		TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6538));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_remove_onTrackingChanged_mD1990275D9A505E92742B063863D9F1BE96BFDB0(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6538));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onTrackingChanged += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onTrackingChanged -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6536));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::add_onValidPoseChanged(Valve.VR.SteamVR_Action_Skeleton_ValidPoseChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_add_onValidPoseChanged_m16EEF660B28D51B84173746D48C7CA5E4AFDF384 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_add_onValidPoseChanged_m16EEF660B28D51B84173746D48C7CA5E4AFDF384_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_add_onValidPoseChanged_m16EEF660B28D51B84173746D48C7CA5E4AFDF384_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6539));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6540));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6541));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onValidPoseChanged += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onValidPoseChanged -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6542));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6544));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6544));
		ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6545));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_add_onValidPoseChanged_m2A4D3F3E5FEFDD0ACBBCA7018AD94DF8EDA37A24(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6545));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onValidPoseChanged += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onValidPoseChanged -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6543));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::remove_onValidPoseChanged(Valve.VR.SteamVR_Action_Skeleton_ValidPoseChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_remove_onValidPoseChanged_m36DAF4159892070D6853F24DD8D8DB701CA0F706 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_remove_onValidPoseChanged_m36DAF4159892070D6853F24DD8D8DB701CA0F706_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_remove_onValidPoseChanged_m36DAF4159892070D6853F24DD8D8DB701CA0F706_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6546));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6547));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6548));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onValidPoseChanged += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onValidPoseChanged -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6549));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6551));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6551));
		ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6552));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_remove_onValidPoseChanged_mA00A29139A1727456784ECF81C9009BAD9B2D8D0(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6552));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onValidPoseChanged += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onValidPoseChanged -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6550));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::add_onDeviceConnectedChanged(Valve.VR.SteamVR_Action_Skeleton_DeviceConnectedChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_add_onDeviceConnectedChanged_m92354268E04EC26BEA381884B6642CFBB1E08CC1 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_add_onDeviceConnectedChanged_m92354268E04EC26BEA381884B6642CFBB1E08CC1_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_add_onDeviceConnectedChanged_m92354268E04EC26BEA381884B6642CFBB1E08CC1_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6553));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6554));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6555));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onDeviceConnectedChanged += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onDeviceConnectedChanged -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6556));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6558));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6558));
		DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6559));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_add_onDeviceConnectedChanged_m65E5DE81AF451EF0B00E214FA8E5034E29FA3EC7(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6559));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onDeviceConnectedChanged += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onDeviceConnectedChanged -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6557));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::remove_onDeviceConnectedChanged(Valve.VR.SteamVR_Action_Skeleton_DeviceConnectedChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_remove_onDeviceConnectedChanged_mCC1CD5EF82563E7FE898D2BAE0DEDC59C9AFA8C9 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_remove_onDeviceConnectedChanged_mCC1CD5EF82563E7FE898D2BAE0DEDC59C9AFA8C9_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_remove_onDeviceConnectedChanged_mCC1CD5EF82563E7FE898D2BAE0DEDC59C9AFA8C9_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6560));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6561));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6562));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onDeviceConnectedChanged += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onDeviceConnectedChanged -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6563));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6565));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6565));
		DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6566));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_remove_onDeviceConnectedChanged_mB24005D6459F7B8D170E3445BF5B95405871AF13(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6566));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onDeviceConnectedChanged += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onDeviceConnectedChanged -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6564));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton__ctor_mC5935E4BA141DDF7A90EC1593B0AB235ED4A150E (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton__ctor_mC5935E4BA141DDF7A90EC1593B0AB235ED4A150E_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton__ctor_mC5935E4BA141DDF7A90EC1593B0AB235ED4A150E_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6567));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6568));
	{
		// public SteamVR_Action_Skeleton() { }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6569));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6572));
		SteamVR_Action_Pose_Base_2__ctor_mA24A37A7DD68461F1328F541DD825CDACBAC30C5(__this, /*hidden argument*/SteamVR_Action_Pose_Base_2__ctor_mA24A37A7DD68461F1328F541DD825CDACBAC30C5_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6572));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6570));
		// public SteamVR_Action_Skeleton() { }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6571));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::UpdateValue(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_UpdateValue_mA4FFC2C42D19F3EBD6E63E0F10D43754E49E238F (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, bool ___skipStateAndEventUpdates0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_UpdateValue_mA4FFC2C42D19F3EBD6E63E0F10D43754E49E238F_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___skipStateAndEventUpdates0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_UpdateValue_mA4FFC2C42D19F3EBD6E63E0F10D43754E49E238F_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6573));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6574));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6575));
		// sourceMap[SteamVR_Input_Sources.Any].UpdateValue(skipStateAndEventUpdates);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6576));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6578));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6578));
		bool L_2 = ___skipStateAndEventUpdates0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6579));
		NullCheck(L_1);
		VirtActionInvoker1< bool >::Invoke(50 /* System.Void Valve.VR.SteamVR_Action_Pose_Source::UpdateValue(System.Boolean) */, L_1, L_2);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6579));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6577));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::UpdateValueWithoutEvents()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_UpdateValueWithoutEvents_mDEFBA29DA9DD73B2577B692E21B71CAE9650735C (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_UpdateValueWithoutEvents_mDEFBA29DA9DD73B2577B692E21B71CAE9650735C_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_UpdateValueWithoutEvents_mDEFBA29DA9DD73B2577B692E21B71CAE9650735C_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6580));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6581));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6582));
		// sourceMap[SteamVR_Input_Sources.Any].UpdateValue(true);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6583));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6585));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6585));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6586));
		NullCheck(L_1);
		VirtActionInvoker1< bool >::Invoke(50 /* System.Void Valve.VR.SteamVR_Action_Pose_Source::UpdateValue(System.Boolean) */, L_1, (bool)1);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6586));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6584));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::UpdateTransform(UnityEngine.Transform)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_UpdateTransform_m6F79643A24833641C748F3088E112AF52E478BF2 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * ___transformToUpdate0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_UpdateTransform_m6F79643A24833641C748F3088E112AF52E478BF2_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___transformToUpdate0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_UpdateTransform_m6F79643A24833641C748F3088E112AF52E478BF2_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6587));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6588));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6589));
		// base.UpdateTransform(SteamVR_Input_Sources.Any, transformToUpdate);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6590));
		Transform_tBB9E78A2766C3C83599A8F66EDE7D1FCAFC66EDA * L_0 = ___transformToUpdate0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6592));
		SteamVR_Action_Pose_Base_2_UpdateTransform_mDF91BEAC2D9487D14C5D1EB34996E2C2E4F275D0(__this, 0, L_0, /*hidden argument*/SteamVR_Action_Pose_Base_2_UpdateTransform_mDF91BEAC2D9487D14C5D1EB34996E2C2E4F275D0_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6592));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6591));
		return;
	}
}
// UnityEngine.Vector3[] Valve.VR.SteamVR_Action_Skeleton::get_bonePositions()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* SteamVR_Action_Skeleton_get_bonePositions_m0CA06F68C8E3D40036C298CE992C74A79C7DA80B (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_bonePositions_m0CA06F68C8E3D40036C298CE992C74A79C7DA80B_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* V_0 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_bonePositions_m0CA06F68C8E3D40036C298CE992C74A79C7DA80B_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6593));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6594));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6595));
		// public Vector3[] bonePositions { get { return sourceMap[SteamVR_Input_Sources.Any].bonePositions; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6596));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6598));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6598));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6599));
		NullCheck(L_1);
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_2 = SteamVR_Action_Skeleton_Source_get_bonePositions_mA0C01DDB9EAB9749BBBEDBCFF72582812AB9C195_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6599));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public Vector3[] bonePositions { get { return sourceMap[SteamVR_Input_Sources.Any].bonePositions; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6597));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_3 = V_0;
		return L_3;
	}
}
// UnityEngine.Quaternion[] Valve.VR.SteamVR_Action_Skeleton::get_boneRotations()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* SteamVR_Action_Skeleton_get_boneRotations_m3FF8C259CBA6EF38DF309362206C2871EB754A4E (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_boneRotations_m3FF8C259CBA6EF38DF309362206C2871EB754A4E_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* V_0 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_boneRotations_m3FF8C259CBA6EF38DF309362206C2871EB754A4E_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6600));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6601));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6602));
		// public Quaternion[] boneRotations { get { return sourceMap[SteamVR_Input_Sources.Any].boneRotations; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6603));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6605));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6605));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6606));
		NullCheck(L_1);
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_2 = SteamVR_Action_Skeleton_Source_get_boneRotations_mCD0B038517CA7A79945AD615082F05B25B0EDA20_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6606));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public Quaternion[] boneRotations { get { return sourceMap[SteamVR_Input_Sources.Any].boneRotations; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6604));
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_3 = V_0;
		return L_3;
	}
}
// UnityEngine.Vector3[] Valve.VR.SteamVR_Action_Skeleton::get_lastBonePositions()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* SteamVR_Action_Skeleton_get_lastBonePositions_m5BB686C5104B6A2CC970239A84B0DD48EED00005 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_lastBonePositions_m5BB686C5104B6A2CC970239A84B0DD48EED00005_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* V_0 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_lastBonePositions_m5BB686C5104B6A2CC970239A84B0DD48EED00005_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6607));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6608));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6609));
		// public Vector3[] lastBonePositions { get { return sourceMap[SteamVR_Input_Sources.Any].lastBonePositions; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6610));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6612));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6612));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6613));
		NullCheck(L_1);
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_2 = SteamVR_Action_Skeleton_Source_get_lastBonePositions_m99D1C7B8A05E646777AC85CFC0ED2FF0953C3AB9_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6613));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public Vector3[] lastBonePositions { get { return sourceMap[SteamVR_Input_Sources.Any].lastBonePositions; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6611));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_3 = V_0;
		return L_3;
	}
}
// UnityEngine.Quaternion[] Valve.VR.SteamVR_Action_Skeleton::get_lastBoneRotations()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* SteamVR_Action_Skeleton_get_lastBoneRotations_m116F9E698A5C9DF460DD49FBEAB7580913027F9A (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_lastBoneRotations_m116F9E698A5C9DF460DD49FBEAB7580913027F9A_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* V_0 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_lastBoneRotations_m116F9E698A5C9DF460DD49FBEAB7580913027F9A_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6614));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6615));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6616));
		// public Quaternion[] lastBoneRotations { get { return sourceMap[SteamVR_Input_Sources.Any].lastBoneRotations; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6617));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6619));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6619));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6620));
		NullCheck(L_1);
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_2 = SteamVR_Action_Skeleton_Source_get_lastBoneRotations_m14A98028FB99C0404733364FFD3C187D2A53261C_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6620));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public Quaternion[] lastBoneRotations { get { return sourceMap[SteamVR_Input_Sources.Any].lastBoneRotations; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6618));
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_3 = V_0;
		return L_3;
	}
}
// Valve.VR.EVRSkeletalMotionRange Valve.VR.SteamVR_Action_Skeleton::get_rangeOfMotion()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Skeleton_get_rangeOfMotion_m67729E8AE1AA6F85CB507D08500E43B64DF76785 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_rangeOfMotion_m67729E8AE1AA6F85CB507D08500E43B64DF76785_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_rangeOfMotion_m67729E8AE1AA6F85CB507D08500E43B64DF76785_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6621));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6622));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6623));
		// get { return sourceMap[SteamVR_Input_Sources.Any].rangeOfMotion; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6624));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6626));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6626));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6627));
		NullCheck(L_1);
		int32_t L_2 = SteamVR_Action_Skeleton_Source_get_rangeOfMotion_mCEFC5B01B736A3B6218C5C91A0AEF272FFD88B47_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6627));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// get { return sourceMap[SteamVR_Input_Sources.Any].rangeOfMotion; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6625));
		int32_t L_3 = V_0;
		return L_3;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::set_rangeOfMotion(Valve.VR.EVRSkeletalMotionRange)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_set_rangeOfMotion_mB389010B0C01970B95C278A809545561A1BA4D58 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_set_rangeOfMotion_mB389010B0C01970B95C278A809545561A1BA4D58_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_set_rangeOfMotion_mB389010B0C01970B95C278A809545561A1BA4D58_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6628));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6629));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6630));
		// set { sourceMap[SteamVR_Input_Sources.Any].rangeOfMotion = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6631));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6633));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6633));
		int32_t L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6634));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_set_rangeOfMotion_m01A4338F1C4D57E5691A2F8EA861BAD76DA75619_inline(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6634));
		// set { sourceMap[SteamVR_Input_Sources.Any].rangeOfMotion = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6632));
		return;
	}
}
// Valve.VR.EVRSkeletalTransformSpace Valve.VR.SteamVR_Action_Skeleton::get_skeletalTransformSpace()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Skeleton_get_skeletalTransformSpace_mD90A3FC93A8F0BEF500E54EBE0AC67E323950B35 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_skeletalTransformSpace_mD90A3FC93A8F0BEF500E54EBE0AC67E323950B35_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_skeletalTransformSpace_mD90A3FC93A8F0BEF500E54EBE0AC67E323950B35_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6635));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6636));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6637));
		// get { return sourceMap[SteamVR_Input_Sources.Any].skeletalTransformSpace; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6638));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6640));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6640));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6641));
		NullCheck(L_1);
		int32_t L_2 = SteamVR_Action_Skeleton_Source_get_skeletalTransformSpace_m0D9D61CC1BC50CC7FA1F9AD5192FBC418009F3F3_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6641));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// get { return sourceMap[SteamVR_Input_Sources.Any].skeletalTransformSpace; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6639));
		int32_t L_3 = V_0;
		return L_3;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::set_skeletalTransformSpace(Valve.VR.EVRSkeletalTransformSpace)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_set_skeletalTransformSpace_mA307660C0D7CC13E16AEF9D45B7B87D6B90634F3 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_set_skeletalTransformSpace_mA307660C0D7CC13E16AEF9D45B7B87D6B90634F3_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_set_skeletalTransformSpace_mA307660C0D7CC13E16AEF9D45B7B87D6B90634F3_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6642));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6643));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6644));
		// set { sourceMap[SteamVR_Input_Sources.Any].skeletalTransformSpace = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6645));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6647));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6647));
		int32_t L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6648));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_set_skeletalTransformSpace_m851FCD54C037B0D6CF78F14CBF0BF7B44EE86FA8_inline(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6648));
		// set { sourceMap[SteamVR_Input_Sources.Any].skeletalTransformSpace = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6646));
		return;
	}
}
// Valve.VR.EVRSummaryType Valve.VR.SteamVR_Action_Skeleton::get_summaryDataType()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Skeleton_get_summaryDataType_mD93DEF103A25384272D6EC1915F2B794806F4519 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_summaryDataType_mD93DEF103A25384272D6EC1915F2B794806F4519_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_summaryDataType_mD93DEF103A25384272D6EC1915F2B794806F4519_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6649));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6650));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6651));
		// get { return sourceMap[SteamVR_Input_Sources.Any].summaryDataType; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6652));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6654));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6654));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6655));
		NullCheck(L_1);
		int32_t L_2 = SteamVR_Action_Skeleton_Source_get_summaryDataType_mE0AB648E0339C2A082B81B15AA2D97854E8BB8CC_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6655));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// get { return sourceMap[SteamVR_Input_Sources.Any].summaryDataType; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6653));
		int32_t L_3 = V_0;
		return L_3;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::set_summaryDataType(Valve.VR.EVRSummaryType)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_set_summaryDataType_m71DB13F92B26A5E85B0E03386E49397066869B27 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_set_summaryDataType_m71DB13F92B26A5E85B0E03386E49397066869B27_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_set_summaryDataType_m71DB13F92B26A5E85B0E03386E49397066869B27_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6656));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6657));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6658));
		// set { sourceMap[SteamVR_Input_Sources.Any].summaryDataType = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6659));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6661));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6661));
		int32_t L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6662));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_set_summaryDataType_m99B705C8282316AC52EBA3A718C998FE46329E1F_inline(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6662));
		// set { sourceMap[SteamVR_Input_Sources.Any].summaryDataType = value; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6660));
		return;
	}
}
// Valve.VR.EVRSkeletalTrackingLevel Valve.VR.SteamVR_Action_Skeleton::get_skeletalTrackingLevel()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Skeleton_get_skeletalTrackingLevel_m42CDC3C3C98C91065325A4C71510B9B8B6FBAA14 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_skeletalTrackingLevel_m42CDC3C3C98C91065325A4C71510B9B8B6FBAA14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_skeletalTrackingLevel_m42CDC3C3C98C91065325A4C71510B9B8B6FBAA14_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6663));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6664));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6665));
		// get { return sourceMap[SteamVR_Input_Sources.Any].skeletalTrackingLevel; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6666));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6668));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6668));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6669));
		NullCheck(L_1);
		int32_t L_2 = SteamVR_Action_Skeleton_Source_get_skeletalTrackingLevel_mD592F4C9B67DBFB75FD15DF4755E51FC24C32769(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6669));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// get { return sourceMap[SteamVR_Input_Sources.Any].skeletalTrackingLevel; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6667));
		int32_t L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton::get_thumbCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_get_thumbCurl_m78B436FFB2D7C6B0FE83FBA4BA11123C3B06EF28 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_thumbCurl_m78B436FFB2D7C6B0FE83FBA4BA11123C3B06EF28_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_thumbCurl_m78B436FFB2D7C6B0FE83FBA4BA11123C3B06EF28_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6670));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6671));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6672));
		// public float thumbCurl { get { return sourceMap[SteamVR_Input_Sources.Any].thumbCurl; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6673));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6675));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6675));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6676));
		NullCheck(L_1);
		float L_2 = SteamVR_Action_Skeleton_Source_get_thumbCurl_m7C48F880AFC6164499E9E23B8D1F413B4AC9A98E(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6676));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public float thumbCurl { get { return sourceMap[SteamVR_Input_Sources.Any].thumbCurl; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6674));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton::get_indexCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_get_indexCurl_mEB1F41479BDBBEF2E93E1268C0947AA789242C41 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_indexCurl_mEB1F41479BDBBEF2E93E1268C0947AA789242C41_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_indexCurl_mEB1F41479BDBBEF2E93E1268C0947AA789242C41_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6677));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6678));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6679));
		// public float indexCurl { get { return sourceMap[SteamVR_Input_Sources.Any].indexCurl; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6680));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6682));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6682));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6683));
		NullCheck(L_1);
		float L_2 = SteamVR_Action_Skeleton_Source_get_indexCurl_m06230658C52C5E441A49AD40313C608619196B5B(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6683));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public float indexCurl { get { return sourceMap[SteamVR_Input_Sources.Any].indexCurl; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6681));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton::get_middleCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_get_middleCurl_mB7653A8B23ED58306E8EB31E707229BFAE1FA9B8 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_middleCurl_mB7653A8B23ED58306E8EB31E707229BFAE1FA9B8_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_middleCurl_mB7653A8B23ED58306E8EB31E707229BFAE1FA9B8_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6684));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6685));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6686));
		// public float middleCurl { get { return sourceMap[SteamVR_Input_Sources.Any].middleCurl; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6687));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6689));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6689));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6690));
		NullCheck(L_1);
		float L_2 = SteamVR_Action_Skeleton_Source_get_middleCurl_mE52CDCDA31A963E723E4BDCC3F3B618FC97CBBE8(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6690));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public float middleCurl { get { return sourceMap[SteamVR_Input_Sources.Any].middleCurl; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6688));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton::get_ringCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_get_ringCurl_mC657F338C93FBF39891F77C5B58DFD063B82D9E2 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_ringCurl_mC657F338C93FBF39891F77C5B58DFD063B82D9E2_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_ringCurl_mC657F338C93FBF39891F77C5B58DFD063B82D9E2_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6691));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6692));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6693));
		// public float ringCurl { get { return sourceMap[SteamVR_Input_Sources.Any].ringCurl; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6694));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6696));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6696));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6697));
		NullCheck(L_1);
		float L_2 = SteamVR_Action_Skeleton_Source_get_ringCurl_m779E5E61A32799167B43551CB36FE864A6413868(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6697));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public float ringCurl { get { return sourceMap[SteamVR_Input_Sources.Any].ringCurl; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6695));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton::get_pinkyCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_get_pinkyCurl_mFB7270C1D7CCD0346630B7FD9537DF2859241C32 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_pinkyCurl_mFB7270C1D7CCD0346630B7FD9537DF2859241C32_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_pinkyCurl_mFB7270C1D7CCD0346630B7FD9537DF2859241C32_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6698));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6699));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6700));
		// public float pinkyCurl { get { return sourceMap[SteamVR_Input_Sources.Any].pinkyCurl; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6701));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6703));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6703));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6704));
		NullCheck(L_1);
		float L_2 = SteamVR_Action_Skeleton_Source_get_pinkyCurl_m0E983BD50EB9B7AEB30874395070AE5E86C66FBB(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6704));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public float pinkyCurl { get { return sourceMap[SteamVR_Input_Sources.Any].pinkyCurl; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6702));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton::get_thumbIndexSplay()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_get_thumbIndexSplay_mE662DBD9173578066DAC6EA4537A9609A89ED735 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_thumbIndexSplay_mE662DBD9173578066DAC6EA4537A9609A89ED735_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_thumbIndexSplay_mE662DBD9173578066DAC6EA4537A9609A89ED735_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6705));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6706));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6707));
		// public float thumbIndexSplay { get { return sourceMap[SteamVR_Input_Sources.Any].thumbIndexSplay; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6708));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6710));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6710));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6711));
		NullCheck(L_1);
		float L_2 = SteamVR_Action_Skeleton_Source_get_thumbIndexSplay_mEA2624540878BDB6DA6344334535F817583A97B0(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6711));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public float thumbIndexSplay { get { return sourceMap[SteamVR_Input_Sources.Any].thumbIndexSplay; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6709));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton::get_indexMiddleSplay()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_get_indexMiddleSplay_m546A2A3E6E1449CA4C6A482D4138EAD63206C7D5 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_indexMiddleSplay_m546A2A3E6E1449CA4C6A482D4138EAD63206C7D5_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_indexMiddleSplay_m546A2A3E6E1449CA4C6A482D4138EAD63206C7D5_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6712));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6713));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6714));
		// public float indexMiddleSplay { get { return sourceMap[SteamVR_Input_Sources.Any].indexMiddleSplay; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6715));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6717));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6717));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6718));
		NullCheck(L_1);
		float L_2 = SteamVR_Action_Skeleton_Source_get_indexMiddleSplay_mC5FC7F51CDCC049B987DB60C5686335125255583(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6718));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public float indexMiddleSplay { get { return sourceMap[SteamVR_Input_Sources.Any].indexMiddleSplay; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6716));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton::get_middleRingSplay()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_get_middleRingSplay_mC6A6DC9021549480656FD3EFABD14D6D304D555C (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_middleRingSplay_mC6A6DC9021549480656FD3EFABD14D6D304D555C_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_middleRingSplay_mC6A6DC9021549480656FD3EFABD14D6D304D555C_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6719));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6720));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6721));
		// public float middleRingSplay { get { return sourceMap[SteamVR_Input_Sources.Any].middleRingSplay; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6722));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6724));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6724));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6725));
		NullCheck(L_1);
		float L_2 = SteamVR_Action_Skeleton_Source_get_middleRingSplay_m3FCE7BEB2171ACEFCFD9A0E4169AB0BAD6BFEA62(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6725));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public float middleRingSplay { get { return sourceMap[SteamVR_Input_Sources.Any].middleRingSplay; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6723));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton::get_ringPinkySplay()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_get_ringPinkySplay_mA246643EFA211CB2B0ACC8BF02C70B386D86420E (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_ringPinkySplay_mA246643EFA211CB2B0ACC8BF02C70B386D86420E_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_ringPinkySplay_mA246643EFA211CB2B0ACC8BF02C70B386D86420E_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6726));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6727));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6728));
		// public float ringPinkySplay { get { return sourceMap[SteamVR_Input_Sources.Any].ringPinkySplay; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6729));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6731));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6731));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6732));
		NullCheck(L_1);
		float L_2 = SteamVR_Action_Skeleton_Source_get_ringPinkySplay_mCAFFCF55E8363259B27670F7193D8B85AA934BC7(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6732));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public float ringPinkySplay { get { return sourceMap[SteamVR_Input_Sources.Any].ringPinkySplay; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6730));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton::get_lastThumbCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_get_lastThumbCurl_m8EF585CBDF71173BBE7A3FFDCADDA14B9DF133DE (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_lastThumbCurl_m8EF585CBDF71173BBE7A3FFDCADDA14B9DF133DE_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_lastThumbCurl_m8EF585CBDF71173BBE7A3FFDCADDA14B9DF133DE_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6733));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6734));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6735));
		// public float lastThumbCurl { get { return sourceMap[SteamVR_Input_Sources.Any].lastThumbCurl; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6736));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6738));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6738));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6739));
		NullCheck(L_1);
		float L_2 = SteamVR_Action_Skeleton_Source_get_lastThumbCurl_m55C39AD1FA31B45A7C19348451F25A0488D13241(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6739));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public float lastThumbCurl { get { return sourceMap[SteamVR_Input_Sources.Any].lastThumbCurl; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6737));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton::get_lastIndexCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_get_lastIndexCurl_m8CF537005F0FB51208329280711F0A8408BDBAC9 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_lastIndexCurl_m8CF537005F0FB51208329280711F0A8408BDBAC9_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_lastIndexCurl_m8CF537005F0FB51208329280711F0A8408BDBAC9_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6740));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6741));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6742));
		// public float lastIndexCurl { get { return sourceMap[SteamVR_Input_Sources.Any].lastIndexCurl; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6743));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6745));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6745));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6746));
		NullCheck(L_1);
		float L_2 = SteamVR_Action_Skeleton_Source_get_lastIndexCurl_m400F28379D6657033E67D29F2B6376654E71440F(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6746));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public float lastIndexCurl { get { return sourceMap[SteamVR_Input_Sources.Any].lastIndexCurl; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6744));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton::get_lastMiddleCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_get_lastMiddleCurl_m6D5135ECD058B820D04982DC4077E2E14AA03BAC (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_lastMiddleCurl_m6D5135ECD058B820D04982DC4077E2E14AA03BAC_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_lastMiddleCurl_m6D5135ECD058B820D04982DC4077E2E14AA03BAC_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6747));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6748));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6749));
		// public float lastMiddleCurl { get { return sourceMap[SteamVR_Input_Sources.Any].lastMiddleCurl; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6750));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6752));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6752));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6753));
		NullCheck(L_1);
		float L_2 = SteamVR_Action_Skeleton_Source_get_lastMiddleCurl_m32F8B6C010E5EDEFE25465EAFCCEE7CEBBEC8F36(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6753));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public float lastMiddleCurl { get { return sourceMap[SteamVR_Input_Sources.Any].lastMiddleCurl; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6751));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton::get_lastRingCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_get_lastRingCurl_m6D22D1042A5D05F28D363BE71CA94318FDEF683F (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_lastRingCurl_m6D22D1042A5D05F28D363BE71CA94318FDEF683F_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_lastRingCurl_m6D22D1042A5D05F28D363BE71CA94318FDEF683F_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6754));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6755));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6756));
		// public float lastRingCurl { get { return sourceMap[SteamVR_Input_Sources.Any].lastRingCurl; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6757));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6759));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6759));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6760));
		NullCheck(L_1);
		float L_2 = SteamVR_Action_Skeleton_Source_get_lastRingCurl_m79AD5ABC922A559F034B53F25848FCCB8F80C35D(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6760));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public float lastRingCurl { get { return sourceMap[SteamVR_Input_Sources.Any].lastRingCurl; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6758));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton::get_lastPinkyCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_get_lastPinkyCurl_mBFB42992D9E09ADD2B6ED7BC5782C5C6986D3D69 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_lastPinkyCurl_mBFB42992D9E09ADD2B6ED7BC5782C5C6986D3D69_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_lastPinkyCurl_mBFB42992D9E09ADD2B6ED7BC5782C5C6986D3D69_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6761));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6762));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6763));
		// public float lastPinkyCurl { get { return sourceMap[SteamVR_Input_Sources.Any].lastPinkyCurl; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6764));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6766));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6766));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6767));
		NullCheck(L_1);
		float L_2 = SteamVR_Action_Skeleton_Source_get_lastPinkyCurl_m40495088AE01BE4B8AE90499CE0A5AEC0673EB13(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6767));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public float lastPinkyCurl { get { return sourceMap[SteamVR_Input_Sources.Any].lastPinkyCurl; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6765));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton::get_lastThumbIndexSplay()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_get_lastThumbIndexSplay_mA28395123EDD33FE080B5BBDD9B83A5A25E80948 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_lastThumbIndexSplay_mA28395123EDD33FE080B5BBDD9B83A5A25E80948_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_lastThumbIndexSplay_mA28395123EDD33FE080B5BBDD9B83A5A25E80948_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6768));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6769));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6770));
		// public float lastThumbIndexSplay { get { return sourceMap[SteamVR_Input_Sources.Any].lastThumbIndexSplay; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6771));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6773));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6773));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6774));
		NullCheck(L_1);
		float L_2 = SteamVR_Action_Skeleton_Source_get_lastThumbIndexSplay_m990D77456F84B5E00C2DD1A5BEC36B915213B1FA(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6774));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public float lastThumbIndexSplay { get { return sourceMap[SteamVR_Input_Sources.Any].lastThumbIndexSplay; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6772));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton::get_lastIndexMiddleSplay()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_get_lastIndexMiddleSplay_m30ED9E7BD9BA8E840D1F80AC165E7074B050F1B8 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_lastIndexMiddleSplay_m30ED9E7BD9BA8E840D1F80AC165E7074B050F1B8_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_lastIndexMiddleSplay_m30ED9E7BD9BA8E840D1F80AC165E7074B050F1B8_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6775));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6776));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6777));
		// public float lastIndexMiddleSplay { get { return sourceMap[SteamVR_Input_Sources.Any].lastIndexMiddleSplay; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6778));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6780));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6780));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6781));
		NullCheck(L_1);
		float L_2 = SteamVR_Action_Skeleton_Source_get_lastIndexMiddleSplay_m328634EB394F9D2A6370F481BC35EF947462AB2E(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6781));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public float lastIndexMiddleSplay { get { return sourceMap[SteamVR_Input_Sources.Any].lastIndexMiddleSplay; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6779));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton::get_lastMiddleRingSplay()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_get_lastMiddleRingSplay_mD8B7B998BDCE4FEE0FD4D60A6EF589F85A7CE40C (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_lastMiddleRingSplay_mD8B7B998BDCE4FEE0FD4D60A6EF589F85A7CE40C_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_lastMiddleRingSplay_mD8B7B998BDCE4FEE0FD4D60A6EF589F85A7CE40C_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6782));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6783));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6784));
		// public float lastMiddleRingSplay { get { return sourceMap[SteamVR_Input_Sources.Any].lastMiddleRingSplay; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6785));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6787));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6787));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6788));
		NullCheck(L_1);
		float L_2 = SteamVR_Action_Skeleton_Source_get_lastMiddleRingSplay_m33B09DF71ADF6FF1BA42C31E2ACD6D3E5C258845(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6788));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public float lastMiddleRingSplay { get { return sourceMap[SteamVR_Input_Sources.Any].lastMiddleRingSplay; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6786));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton::get_lastRingPinkySplay()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_get_lastRingPinkySplay_m4AA30BABB66CAD75BD36C1B957A439F308AD694B (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_lastRingPinkySplay_m4AA30BABB66CAD75BD36C1B957A439F308AD694B_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_lastRingPinkySplay_m4AA30BABB66CAD75BD36C1B957A439F308AD694B_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6789));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6790));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6791));
		// public float lastRingPinkySplay { get { return sourceMap[SteamVR_Input_Sources.Any].lastRingPinkySplay; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6792));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6794));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6794));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6795));
		NullCheck(L_1);
		float L_2 = SteamVR_Action_Skeleton_Source_get_lastRingPinkySplay_mFD509B1C21CF79C88833690ECDB237D307AAC531(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6795));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public float lastRingPinkySplay { get { return sourceMap[SteamVR_Input_Sources.Any].lastRingPinkySplay; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6793));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single[] Valve.VR.SteamVR_Action_Skeleton::get_fingerCurls()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* SteamVR_Action_Skeleton_get_fingerCurls_m4A263447B22178919E09D1E97E8C3BDEA0736BAD (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_fingerCurls_m4A263447B22178919E09D1E97E8C3BDEA0736BAD_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* V_0 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_fingerCurls_m4A263447B22178919E09D1E97E8C3BDEA0736BAD_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6796));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6797));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6798));
		// public float[] fingerCurls { get { return sourceMap[SteamVR_Input_Sources.Any].fingerCurls; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6799));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6801));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6801));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6802));
		NullCheck(L_1);
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_2 = SteamVR_Action_Skeleton_Source_get_fingerCurls_mD56D63D01414ED3D7D6074DB29C81AAC3C490479_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6802));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public float[] fingerCurls { get { return sourceMap[SteamVR_Input_Sources.Any].fingerCurls; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6800));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_3 = V_0;
		return L_3;
	}
}
// System.Single[] Valve.VR.SteamVR_Action_Skeleton::get_fingerSplays()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* SteamVR_Action_Skeleton_get_fingerSplays_m7B088FB1B70AD3B51A16353085AA0A50AF77EDBD (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_fingerSplays_m7B088FB1B70AD3B51A16353085AA0A50AF77EDBD_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* V_0 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_fingerSplays_m7B088FB1B70AD3B51A16353085AA0A50AF77EDBD_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6803));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6804));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6805));
		// public float[] fingerSplays { get { return sourceMap[SteamVR_Input_Sources.Any].fingerSplays; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6806));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6808));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6808));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6809));
		NullCheck(L_1);
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_2 = SteamVR_Action_Skeleton_Source_get_fingerSplays_m5461F8E49017BD6579CC10D8D0783642DEDE37D0_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6809));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public float[] fingerSplays { get { return sourceMap[SteamVR_Input_Sources.Any].fingerSplays; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6807));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_3 = V_0;
		return L_3;
	}
}
// System.Single[] Valve.VR.SteamVR_Action_Skeleton::get_lastFingerCurls()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* SteamVR_Action_Skeleton_get_lastFingerCurls_m3739004D70486E65E29BC117CE7D03A7F42A334F (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_lastFingerCurls_m3739004D70486E65E29BC117CE7D03A7F42A334F_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* V_0 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_lastFingerCurls_m3739004D70486E65E29BC117CE7D03A7F42A334F_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6810));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6811));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6812));
		// public float[] lastFingerCurls { get { return sourceMap[SteamVR_Input_Sources.Any].lastFingerCurls; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6813));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6815));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6815));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6816));
		NullCheck(L_1);
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_2 = SteamVR_Action_Skeleton_Source_get_lastFingerCurls_m00C4EB3059A4427EF390371B7B56077017F42C2C_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6816));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public float[] lastFingerCurls { get { return sourceMap[SteamVR_Input_Sources.Any].lastFingerCurls; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6814));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_3 = V_0;
		return L_3;
	}
}
// System.Single[] Valve.VR.SteamVR_Action_Skeleton::get_lastFingerSplays()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* SteamVR_Action_Skeleton_get_lastFingerSplays_m8D682F035CBCDC7D71503C78433E061096D3D5FE (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_lastFingerSplays_m8D682F035CBCDC7D71503C78433E061096D3D5FE_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* V_0 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_lastFingerSplays_m8D682F035CBCDC7D71503C78433E061096D3D5FE_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6817));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6818));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6819));
		// public float[] lastFingerSplays { get { return sourceMap[SteamVR_Input_Sources.Any].lastFingerSplays; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6820));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6822));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6822));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6823));
		NullCheck(L_1);
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_2 = SteamVR_Action_Skeleton_Source_get_lastFingerSplays_mC1CF900637C3FB99B1DE3F4BE06452EC07264747_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6823));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public float[] lastFingerSplays { get { return sourceMap[SteamVR_Input_Sources.Any].lastFingerSplays; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6821));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_3 = V_0;
		return L_3;
	}
}
// System.Boolean Valve.VR.SteamVR_Action_Skeleton::get_poseChanged()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Skeleton_get_poseChanged_m248D619571236D9D7833B76A03BA70B033516FFA (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_poseChanged_m248D619571236D9D7833B76A03BA70B033516FFA_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_poseChanged_m248D619571236D9D7833B76A03BA70B033516FFA_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6824));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6825));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6826));
		// public bool poseChanged { get { return sourceMap[SteamVR_Input_Sources.Any].poseChanged; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6827));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6829));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6829));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6830));
		NullCheck(L_1);
		bool L_2 = SteamVR_Action_Skeleton_Source_get_poseChanged_m00A9DB3FFD0499D982FC39500D115B4968518988_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6830));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public bool poseChanged { get { return sourceMap[SteamVR_Input_Sources.Any].poseChanged; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6828));
		bool L_3 = V_0;
		return L_3;
	}
}
// System.Boolean Valve.VR.SteamVR_Action_Skeleton::get_onlyUpdateSummaryData()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Skeleton_get_onlyUpdateSummaryData_m34F8E2E3DFF90BC3E25A4DE8F90C6E717AF3D5BE (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_onlyUpdateSummaryData_m34F8E2E3DFF90BC3E25A4DE8F90C6E717AF3D5BE_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_onlyUpdateSummaryData_m34F8E2E3DFF90BC3E25A4DE8F90C6E717AF3D5BE_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6831));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6832));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6833));
		// public bool onlyUpdateSummaryData { get { return sourceMap[SteamVR_Input_Sources.Any].onlyUpdateSummaryData; } set { sourceMap[SteamVR_Input_Sources.Any].onlyUpdateSummaryData = value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6834));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6836));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6836));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6837));
		NullCheck(L_1);
		bool L_2 = SteamVR_Action_Skeleton_Source_get_onlyUpdateSummaryData_m3AC011DB8ED08B67F124368EEA9934C5FACA5920_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6837));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public bool onlyUpdateSummaryData { get { return sourceMap[SteamVR_Input_Sources.Any].onlyUpdateSummaryData; } set { sourceMap[SteamVR_Input_Sources.Any].onlyUpdateSummaryData = value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6835));
		bool L_3 = V_0;
		return L_3;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::set_onlyUpdateSummaryData(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_set_onlyUpdateSummaryData_mFB1077C0BE8DD592764267D71E922C34CF11DB09 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, bool ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_set_onlyUpdateSummaryData_mFB1077C0BE8DD592764267D71E922C34CF11DB09_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_set_onlyUpdateSummaryData_mFB1077C0BE8DD592764267D71E922C34CF11DB09_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6838));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6839));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6840));
		// public bool onlyUpdateSummaryData { get { return sourceMap[SteamVR_Input_Sources.Any].onlyUpdateSummaryData; } set { sourceMap[SteamVR_Input_Sources.Any].onlyUpdateSummaryData = value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6841));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6843));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6843));
		bool L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6844));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_set_onlyUpdateSummaryData_m49C580092D3CDFD2E8D1D98D06026C2FF6F73BCA_inline(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6844));
		// public bool onlyUpdateSummaryData { get { return sourceMap[SteamVR_Input_Sources.Any].onlyUpdateSummaryData; } set { sourceMap[SteamVR_Input_Sources.Any].onlyUpdateSummaryData = value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6842));
		return;
	}
}
// System.Boolean Valve.VR.SteamVR_Action_Skeleton::GetActive()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Skeleton_GetActive_m6E06AD31889D5E0E0431CA1766F874759FE3216F (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetActive_m6E06AD31889D5E0E0431CA1766F874759FE3216F_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetActive_m6E06AD31889D5E0E0431CA1766F874759FE3216F_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6845));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6846));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6847));
		// return sourceMap[SteamVR_Input_Sources.Any].active;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6848));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6850));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6850));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6851));
		NullCheck(L_1);
		bool L_2 = VirtFuncInvoker0< bool >::Invoke(12 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_active() */, L_1);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6851));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6849));
		bool L_3 = V_0;
		return L_3;
	}
}
// System.Boolean Valve.VR.SteamVR_Action_Skeleton::GetSetActive()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Skeleton_GetSetActive_mF56700F6043B0FBDC749DFCEC673AB1CC7CC010E (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetSetActive_mF56700F6043B0FBDC749DFCEC673AB1CC7CC010E_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetSetActive_mF56700F6043B0FBDC749DFCEC673AB1CC7CC010E_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6852));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6853));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6854));
		// return actionSet.IsActive(SteamVR_Input_Sources.Any);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6855));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6857));
		SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6 * L_0 = VirtFuncInvoker0< SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6 * >::Invoke(19 /* Valve.VR.SteamVR_ActionSet Valve.VR.SteamVR_Action::get_actionSet() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6857));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6858));
		NullCheck(L_0);
		bool L_1 = SteamVR_ActionSet_IsActive_m9909588615E0191F96E971182B8A52F864F39BEB(L_0, 0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6858));
		V_0 = L_1;
		goto IL_0010;
	}

IL_0010:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6856));
		bool L_2 = V_0;
		return L_2;
	}
}
// System.Boolean Valve.VR.SteamVR_Action_Skeleton::GetVelocitiesAtTimeOffset(System.Single,UnityEngine.Vector3&,UnityEngine.Vector3&)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Skeleton_GetVelocitiesAtTimeOffset_m188E942824BC8328FF62524D8AC7121B41214E8C (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, float ___secondsFromNow0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * ___velocity1, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * ___angularVelocity2, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetVelocitiesAtTimeOffset_m188E942824BC8328FF62524D8AC7121B41214E8C_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___secondsFromNow0), (&___velocity1), (&___angularVelocity2));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetVelocitiesAtTimeOffset_m188E942824BC8328FF62524D8AC7121B41214E8C_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6859));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6860));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6861));
		// return sourceMap[SteamVR_Input_Sources.Any].GetVelocitiesAtTimeOffset(secondsFromNow, out velocity, out angularVelocity);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6862));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6864));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6864));
		float L_2 = ___secondsFromNow0;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * L_3 = ___velocity1;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * L_4 = ___angularVelocity2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6865));
		NullCheck(L_1);
		bool L_5 = SteamVR_Action_Pose_Source_GetVelocitiesAtTimeOffset_m68F72C5D84CF5620C5FF8978BCCC52B3F79C7935(L_1, L_2, (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)L_3, (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)L_4, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6865));
		V_0 = L_5;
		goto IL_0018;
	}

IL_0018:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6863));
		bool L_6 = V_0;
		return L_6;
	}
}
// System.Boolean Valve.VR.SteamVR_Action_Skeleton::GetPoseAtTimeOffset(System.Single,UnityEngine.Vector3&,UnityEngine.Quaternion&,UnityEngine.Vector3&,UnityEngine.Vector3&)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Skeleton_GetPoseAtTimeOffset_mBCC36205E479616B506EFA081120EDA9E3269202 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, float ___secondsFromNow0, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * ___position1, Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * ___rotation2, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * ___velocity3, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * ___angularVelocity4, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetPoseAtTimeOffset_mBCC36205E479616B506EFA081120EDA9E3269202_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___secondsFromNow0), (&___position1), (&___rotation2), (&___velocity3), (&___angularVelocity4));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetPoseAtTimeOffset_mBCC36205E479616B506EFA081120EDA9E3269202_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6866));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6867));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6868));
		// return sourceMap[SteamVR_Input_Sources.Any].GetPoseAtTimeOffset(secondsFromNow, out position, out rotation, out velocity, out angularVelocity);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6869));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6871));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6871));
		float L_2 = ___secondsFromNow0;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * L_3 = ___position1;
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 * L_4 = ___rotation2;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * L_5 = ___velocity3;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 * L_6 = ___angularVelocity4;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6872));
		NullCheck(L_1);
		bool L_7 = SteamVR_Action_Pose_Source_GetPoseAtTimeOffset_m139061D3915BC3462FBEA4CBFCB3BD8DDB7FF4C7(L_1, L_2, (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)L_3, (Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 *)L_4, (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)L_5, (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)L_6, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6872));
		V_0 = L_7;
		goto IL_001c;
	}

IL_001c:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6870));
		bool L_8 = V_0;
		return L_8;
	}
}
// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Skeleton::GetLocalPosition()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Skeleton_GetLocalPosition_mB9C362EEA9A30E590A62D20B986A94C98AA1FAD5 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetLocalPosition_mB9C362EEA9A30E590A62D20B986A94C98AA1FAD5_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetLocalPosition_mB9C362EEA9A30E590A62D20B986A94C98AA1FAD5_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6873));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6874));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6875));
		// return sourceMap[SteamVR_Input_Sources.Any].localPosition;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6876));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6878));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6878));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6879));
		NullCheck(L_1);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_2 = SteamVR_Action_Pose_Source_get_localPosition_mE065A826D8D1A8CF44D9E7F0D038F24D70985833_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6879));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6877));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_3 = V_0;
		return L_3;
	}
}
// UnityEngine.Quaternion Valve.VR.SteamVR_Action_Skeleton::GetLocalRotation()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  SteamVR_Action_Skeleton_GetLocalRotation_m917F58C641A69D3E71DC1F48AF8B2EE2A8C143D2 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetLocalRotation_m917F58C641A69D3E71DC1F48AF8B2EE2A8C143D2_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetLocalRotation_m917F58C641A69D3E71DC1F48AF8B2EE2A8C143D2_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6880));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6881));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6882));
		// return sourceMap[SteamVR_Input_Sources.Any].localRotation;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6883));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6885));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6885));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6886));
		NullCheck(L_1);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_2 = SteamVR_Action_Pose_Source_get_localRotation_m307D9DD92DFFFCC30446A71D9BD15674A797ED2A_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6886));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6884));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_3 = V_0;
		return L_3;
	}
}
// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Skeleton::GetVelocity()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Skeleton_GetVelocity_m9E1BECFF847AF4E2FB1AEF786886D9A1A5F42E38 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetVelocity_m9E1BECFF847AF4E2FB1AEF786886D9A1A5F42E38_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetVelocity_m9E1BECFF847AF4E2FB1AEF786886D9A1A5F42E38_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6887));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6888));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6889));
		// return sourceMap[SteamVR_Input_Sources.Any].velocity;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6890));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6892));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6892));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6893));
		NullCheck(L_1);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_2 = SteamVR_Action_Pose_Source_get_velocity_m2B71BB7981006080D113442CB374529602A310BF_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6893));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6891));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_3 = V_0;
		return L_3;
	}
}
// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Skeleton::GetAngularVelocity()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Skeleton_GetAngularVelocity_mFC20208B5BBBA5BA921F1541BFBD1126A2850946 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetAngularVelocity_mFC20208B5BBBA5BA921F1541BFBD1126A2850946_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetAngularVelocity_mFC20208B5BBBA5BA921F1541BFBD1126A2850946_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6894));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6895));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6896));
		// return sourceMap[SteamVR_Input_Sources.Any].angularVelocity;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6897));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6899));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6899));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6900));
		NullCheck(L_1);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_2 = SteamVR_Action_Pose_Source_get_angularVelocity_mACAA45CB05DB94C9292ED147F3156109DAFA0209_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6900));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6898));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_3 = V_0;
		return L_3;
	}
}
// System.Boolean Valve.VR.SteamVR_Action_Skeleton::GetDeviceIsConnected()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Skeleton_GetDeviceIsConnected_m5A76303DB4261016DAEBD30B735BED3259855734 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetDeviceIsConnected_m5A76303DB4261016DAEBD30B735BED3259855734_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetDeviceIsConnected_m5A76303DB4261016DAEBD30B735BED3259855734_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6901));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6902));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6903));
		// return sourceMap[SteamVR_Input_Sources.Any].deviceIsConnected;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6904));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6906));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6906));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6907));
		NullCheck(L_1);
		bool L_2 = SteamVR_Action_Pose_Source_get_deviceIsConnected_mF1AE6114E98F19B5783F49FDB71381DF6D7CC963(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6907));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6905));
		bool L_3 = V_0;
		return L_3;
	}
}
// System.Boolean Valve.VR.SteamVR_Action_Skeleton::GetPoseIsValid()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Skeleton_GetPoseIsValid_m940EF6B8834E5EE883FB69081F7A8CF115F7090D (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetPoseIsValid_m940EF6B8834E5EE883FB69081F7A8CF115F7090D_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetPoseIsValid_m940EF6B8834E5EE883FB69081F7A8CF115F7090D_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6908));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6909));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6910));
		// return sourceMap[SteamVR_Input_Sources.Any].poseIsValid;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6911));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6913));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6913));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6914));
		NullCheck(L_1);
		bool L_2 = SteamVR_Action_Pose_Source_get_poseIsValid_m45C4445DBD635BF4EDAA590D30874EA233DED74D(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6914));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6912));
		bool L_3 = V_0;
		return L_3;
	}
}
// Valve.VR.ETrackingResult Valve.VR.SteamVR_Action_Skeleton::GetTrackingResult()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Skeleton_GetTrackingResult_mC2E4F3F2683D8B4AAB82B16F36D49F3FD81B5BE7 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetTrackingResult_mC2E4F3F2683D8B4AAB82B16F36D49F3FD81B5BE7_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetTrackingResult_mC2E4F3F2683D8B4AAB82B16F36D49F3FD81B5BE7_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6915));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6916));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6917));
		// return sourceMap[SteamVR_Input_Sources.Any].trackingState;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6918));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6920));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6920));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6921));
		NullCheck(L_1);
		int32_t L_2 = SteamVR_Action_Pose_Source_get_trackingState_mAA7FE0C2B01A8508823AA7E0D8EED81D5DADCABD(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6921));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6919));
		int32_t L_3 = V_0;
		return L_3;
	}
}
// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Skeleton::GetLastLocalPosition()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Skeleton_GetLastLocalPosition_m47A225F07BE521AE0BCE352D6D9DC51EB1D3C367 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetLastLocalPosition_m47A225F07BE521AE0BCE352D6D9DC51EB1D3C367_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetLastLocalPosition_m47A225F07BE521AE0BCE352D6D9DC51EB1D3C367_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6922));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6923));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6924));
		// return sourceMap[SteamVR_Input_Sources.Any].lastLocalPosition;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6925));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6927));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6927));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6928));
		NullCheck(L_1);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_2 = SteamVR_Action_Pose_Source_get_lastLocalPosition_mB748F9D4600498E9BACCEBE5C8F00DED8125C307_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6928));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6926));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_3 = V_0;
		return L_3;
	}
}
// UnityEngine.Quaternion Valve.VR.SteamVR_Action_Skeleton::GetLastLocalRotation()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  SteamVR_Action_Skeleton_GetLastLocalRotation_m99CAC6CCFA012EAA3DEF73BA8DC2B781E6F95542 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetLastLocalRotation_m99CAC6CCFA012EAA3DEF73BA8DC2B781E6F95542_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetLastLocalRotation_m99CAC6CCFA012EAA3DEF73BA8DC2B781E6F95542_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6929));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6930));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6931));
		// return sourceMap[SteamVR_Input_Sources.Any].lastLocalRotation;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6932));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6934));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6934));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6935));
		NullCheck(L_1);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_2 = SteamVR_Action_Pose_Source_get_lastLocalRotation_m15622BCE4A3D32548EBFE7DC98F8751352617660_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6935));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6933));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_3 = V_0;
		return L_3;
	}
}
// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Skeleton::GetLastVelocity()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Skeleton_GetLastVelocity_m578B56041101A994C9D60A31B9F360B7E0C63AAF (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetLastVelocity_m578B56041101A994C9D60A31B9F360B7E0C63AAF_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetLastVelocity_m578B56041101A994C9D60A31B9F360B7E0C63AAF_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6936));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6937));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6938));
		// return sourceMap[SteamVR_Input_Sources.Any].lastVelocity;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6939));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6941));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6941));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6942));
		NullCheck(L_1);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_2 = SteamVR_Action_Pose_Source_get_lastVelocity_mB9FD7955140F713C63842433E1E50D498EAD0A21_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6942));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6940));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_3 = V_0;
		return L_3;
	}
}
// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Skeleton::GetLastAngularVelocity()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Skeleton_GetLastAngularVelocity_m0F6189A5D1B1F5400F4725891F1B7FB6B6A724BD (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetLastAngularVelocity_m0F6189A5D1B1F5400F4725891F1B7FB6B6A724BD_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetLastAngularVelocity_m0F6189A5D1B1F5400F4725891F1B7FB6B6A724BD_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6943));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6944));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6945));
		// return sourceMap[SteamVR_Input_Sources.Any].lastAngularVelocity;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6946));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6948));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6948));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6949));
		NullCheck(L_1);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_2 = SteamVR_Action_Pose_Source_get_lastAngularVelocity_m3EE729ECF16DA55CFE069E25EB9099A80667C55F_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6949));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6947));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_3 = V_0;
		return L_3;
	}
}
// System.Boolean Valve.VR.SteamVR_Action_Skeleton::GetLastDeviceIsConnected()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Skeleton_GetLastDeviceIsConnected_mD15EE41DB5743A4DD42DB692B56470A75297D7B4 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetLastDeviceIsConnected_mD15EE41DB5743A4DD42DB692B56470A75297D7B4_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetLastDeviceIsConnected_mD15EE41DB5743A4DD42DB692B56470A75297D7B4_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6950));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6951));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6952));
		// return sourceMap[SteamVR_Input_Sources.Any].lastDeviceIsConnected;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6953));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6955));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6955));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6956));
		NullCheck(L_1);
		bool L_2 = SteamVR_Action_Pose_Source_get_lastDeviceIsConnected_m13EFE0AE18A9B2F59BA86780A1A61B9BB367604D(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6956));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6954));
		bool L_3 = V_0;
		return L_3;
	}
}
// System.Boolean Valve.VR.SteamVR_Action_Skeleton::GetLastPoseIsValid()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Skeleton_GetLastPoseIsValid_mB18ED4BF91977E89C1BE821A473AAAD5C2AD9AAB (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetLastPoseIsValid_mB18ED4BF91977E89C1BE821A473AAAD5C2AD9AAB_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetLastPoseIsValid_mB18ED4BF91977E89C1BE821A473AAAD5C2AD9AAB_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6957));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6958));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6959));
		// return sourceMap[SteamVR_Input_Sources.Any].lastPoseIsValid;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6960));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6962));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6962));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6963));
		NullCheck(L_1);
		bool L_2 = SteamVR_Action_Pose_Source_get_lastPoseIsValid_mED2AB07587C45C6503F49F9B165A0E4861C35202(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6963));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6961));
		bool L_3 = V_0;
		return L_3;
	}
}
// Valve.VR.ETrackingResult Valve.VR.SteamVR_Action_Skeleton::GetLastTrackingResult()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Skeleton_GetLastTrackingResult_m37C8D9BEA0568AA117E7F4A9A6C25E36D08D628F (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetLastTrackingResult_m37C8D9BEA0568AA117E7F4A9A6C25E36D08D628F_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetLastTrackingResult_m37C8D9BEA0568AA117E7F4A9A6C25E36D08D628F_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6964));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6965));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6966));
		// return sourceMap[SteamVR_Input_Sources.Any].lastTrackingState;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6967));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6969));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6969));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6970));
		NullCheck(L_1);
		int32_t L_2 = SteamVR_Action_Pose_Source_get_lastTrackingState_mC3978EC30F22D70155C39DDF5F263447D9273500(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6970));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6968));
		int32_t L_3 = V_0;
		return L_3;
	}
}
// System.Int32 Valve.VR.SteamVR_Action_Skeleton::get_boneCount()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Skeleton_get_boneCount_m03FEFB972B25D05F07C7AEB4D61B2349C75DE864 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_get_boneCount_m03FEFB972B25D05F07C7AEB4D61B2349C75DE864_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_get_boneCount_m03FEFB972B25D05F07C7AEB4D61B2349C75DE864_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6971));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6972));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6973));
		// public int boneCount { get { return (int)GetBoneCount(); } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6974));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6976));
		uint32_t L_0 = SteamVR_Action_Skeleton_GetBoneCount_mB8D948288CCD3A7E432C9A28508CFF40C96F85A1(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6976));
		V_0 = L_0;
		goto IL_000a;
	}

IL_000a:
	{
		// public int boneCount { get { return (int)GetBoneCount(); } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6975));
		int32_t L_1 = V_0;
		return L_1;
	}
}
// UnityEngine.Vector3[] Valve.VR.SteamVR_Action_Skeleton::GetBonePositions(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* SteamVR_Action_Skeleton_GetBonePositions_mB8ED80319622D467201E3562AEDCE36C6601D531 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, bool ___copy0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetBonePositions_mB8ED80319622D467201E3562AEDCE36C6601D531_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* V_1 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___copy0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetBonePositions_mB8ED80319622D467201E3562AEDCE36C6601D531_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6977));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6978));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6979));
		// if (copy)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6980));
		bool L_0 = ___copy0;
		V_0 = L_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6981));
		bool L_1 = V_0;
		if (!L_1)
		{
			goto IL_0024;
		}
	}
	{
		// return (Vector3[])sourceMap[SteamVR_Input_Sources.Any].bonePositions.Clone();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6982));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_2 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6985));
		NullCheck(L_2);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_3 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_2, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6985));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6986));
		NullCheck(L_3);
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_4 = SteamVR_Action_Skeleton_Source_get_bonePositions_mA0C01DDB9EAB9749BBBEDBCFF72582812AB9C195_inline(L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6986));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6987));
		NullCheck((RuntimeArray *)(RuntimeArray *)L_4);
		RuntimeObject * L_5 = Array_Clone_mE8C710213E323617A6F46F2B36DCDDD4C7CF5176((RuntimeArray *)(RuntimeArray *)L_4, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6987));
		V_1 = ((Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28*)Castclass((RuntimeObject*)L_5, Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28_il2cpp_TypeInfo_var));
		goto IL_0038;
	}

IL_0024:
	{
		// return sourceMap[SteamVR_Input_Sources.Any].bonePositions;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6983));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_6 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6988));
		NullCheck(L_6);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_7 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_6, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6988));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6989));
		NullCheck(L_7);
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_8 = SteamVR_Action_Skeleton_Source_get_bonePositions_mA0C01DDB9EAB9749BBBEDBCFF72582812AB9C195_inline(L_7, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6989));
		V_1 = L_8;
		goto IL_0038;
	}

IL_0038:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6984));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_9 = V_1;
		return L_9;
	}
}
// UnityEngine.Quaternion[] Valve.VR.SteamVR_Action_Skeleton::GetBoneRotations(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* SteamVR_Action_Skeleton_GetBoneRotations_m7239E024A6D2E783C25D633A0476CA9428D465C4 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, bool ___copy0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetBoneRotations_m7239E024A6D2E783C25D633A0476CA9428D465C4_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* V_1 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___copy0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetBoneRotations_m7239E024A6D2E783C25D633A0476CA9428D465C4_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6990));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 6991));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6992));
		// if (copy)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6993));
		bool L_0 = ___copy0;
		V_0 = L_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6994));
		bool L_1 = V_0;
		if (!L_1)
		{
			goto IL_0024;
		}
	}
	{
		// return (Quaternion[])sourceMap[SteamVR_Input_Sources.Any].boneRotations.Clone();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6995));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_2 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6998));
		NullCheck(L_2);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_3 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_2, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6998));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6999));
		NullCheck(L_3);
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_4 = SteamVR_Action_Skeleton_Source_get_boneRotations_mCD0B038517CA7A79945AD615082F05B25B0EDA20_inline(L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6999));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7000));
		NullCheck((RuntimeArray *)(RuntimeArray *)L_4);
		RuntimeObject * L_5 = Array_Clone_mE8C710213E323617A6F46F2B36DCDDD4C7CF5176((RuntimeArray *)(RuntimeArray *)L_4, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7000));
		V_1 = ((QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3*)Castclass((RuntimeObject*)L_5, QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3_il2cpp_TypeInfo_var));
		goto IL_0038;
	}

IL_0024:
	{
		// return sourceMap[SteamVR_Input_Sources.Any].boneRotations;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6996));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_6 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7001));
		NullCheck(L_6);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_7 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_6, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7001));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7002));
		NullCheck(L_7);
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_8 = SteamVR_Action_Skeleton_Source_get_boneRotations_mCD0B038517CA7A79945AD615082F05B25B0EDA20_inline(L_7, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7002));
		V_1 = L_8;
		goto IL_0038;
	}

IL_0038:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 6997));
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_9 = V_1;
		return L_9;
	}
}
// UnityEngine.Vector3[] Valve.VR.SteamVR_Action_Skeleton::GetLastBonePositions(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* SteamVR_Action_Skeleton_GetLastBonePositions_mD5C9D7939B6693865BFC89D4CFF3A29E8273E5EA (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, bool ___copy0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetLastBonePositions_mD5C9D7939B6693865BFC89D4CFF3A29E8273E5EA_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* V_1 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___copy0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetLastBonePositions_mD5C9D7939B6693865BFC89D4CFF3A29E8273E5EA_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7003));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7004));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7005));
		// if (copy)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7006));
		bool L_0 = ___copy0;
		V_0 = L_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7007));
		bool L_1 = V_0;
		if (!L_1)
		{
			goto IL_0024;
		}
	}
	{
		// return (Vector3[])sourceMap[SteamVR_Input_Sources.Any].lastBonePositions.Clone();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7008));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_2 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7011));
		NullCheck(L_2);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_3 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_2, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7011));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7012));
		NullCheck(L_3);
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_4 = SteamVR_Action_Skeleton_Source_get_lastBonePositions_m99D1C7B8A05E646777AC85CFC0ED2FF0953C3AB9_inline(L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7012));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7013));
		NullCheck((RuntimeArray *)(RuntimeArray *)L_4);
		RuntimeObject * L_5 = Array_Clone_mE8C710213E323617A6F46F2B36DCDDD4C7CF5176((RuntimeArray *)(RuntimeArray *)L_4, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7013));
		V_1 = ((Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28*)Castclass((RuntimeObject*)L_5, Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28_il2cpp_TypeInfo_var));
		goto IL_0038;
	}

IL_0024:
	{
		// return sourceMap[SteamVR_Input_Sources.Any].lastBonePositions;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7009));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_6 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7014));
		NullCheck(L_6);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_7 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_6, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7014));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7015));
		NullCheck(L_7);
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_8 = SteamVR_Action_Skeleton_Source_get_lastBonePositions_m99D1C7B8A05E646777AC85CFC0ED2FF0953C3AB9_inline(L_7, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7015));
		V_1 = L_8;
		goto IL_0038;
	}

IL_0038:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7010));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_9 = V_1;
		return L_9;
	}
}
// UnityEngine.Quaternion[] Valve.VR.SteamVR_Action_Skeleton::GetLastBoneRotations(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* SteamVR_Action_Skeleton_GetLastBoneRotations_m6828376AA97DD3A7A78FE2F9E0EE038CA96D39ED (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, bool ___copy0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetLastBoneRotations_m6828376AA97DD3A7A78FE2F9E0EE038CA96D39ED_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* V_1 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___copy0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetLastBoneRotations_m6828376AA97DD3A7A78FE2F9E0EE038CA96D39ED_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7016));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7017));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7018));
		// if (copy)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7019));
		bool L_0 = ___copy0;
		V_0 = L_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7020));
		bool L_1 = V_0;
		if (!L_1)
		{
			goto IL_0024;
		}
	}
	{
		// return (Quaternion[])sourceMap[SteamVR_Input_Sources.Any].lastBoneRotations.Clone();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7021));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_2 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7024));
		NullCheck(L_2);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_3 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_2, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7024));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7025));
		NullCheck(L_3);
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_4 = SteamVR_Action_Skeleton_Source_get_lastBoneRotations_m14A98028FB99C0404733364FFD3C187D2A53261C_inline(L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7025));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7026));
		NullCheck((RuntimeArray *)(RuntimeArray *)L_4);
		RuntimeObject * L_5 = Array_Clone_mE8C710213E323617A6F46F2B36DCDDD4C7CF5176((RuntimeArray *)(RuntimeArray *)L_4, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7026));
		V_1 = ((QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3*)Castclass((RuntimeObject*)L_5, QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3_il2cpp_TypeInfo_var));
		goto IL_0038;
	}

IL_0024:
	{
		// return sourceMap[SteamVR_Input_Sources.Any].lastBoneRotations;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7022));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_6 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7027));
		NullCheck(L_6);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_7 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_6, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7027));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7028));
		NullCheck(L_7);
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_8 = SteamVR_Action_Skeleton_Source_get_lastBoneRotations_m14A98028FB99C0404733364FFD3C187D2A53261C_inline(L_7, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7028));
		V_1 = L_8;
		goto IL_0038;
	}

IL_0038:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7023));
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_9 = V_1;
		return L_9;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::SetRangeOfMotion(Valve.VR.EVRSkeletalMotionRange)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_SetRangeOfMotion_mF9A18F8B97BE27E61EF44516E381801FA301FC11 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, int32_t ___range0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_SetRangeOfMotion_mF9A18F8B97BE27E61EF44516E381801FA301FC11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___range0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_SetRangeOfMotion_mF9A18F8B97BE27E61EF44516E381801FA301FC11_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7029));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7030));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7031));
		// sourceMap[SteamVR_Input_Sources.Any].rangeOfMotion = range;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7032));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7034));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7034));
		int32_t L_2 = ___range0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7035));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_set_rangeOfMotion_m01A4338F1C4D57E5691A2F8EA861BAD76DA75619_inline(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7035));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7033));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::SetSkeletalTransformSpace(Valve.VR.EVRSkeletalTransformSpace)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_SetSkeletalTransformSpace_m18728D948D1B46D284FBEBFEDA47FB97BBB1B68D (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, int32_t ___space0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_SetSkeletalTransformSpace_m18728D948D1B46D284FBEBFEDA47FB97BBB1B68D_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___space0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_SetSkeletalTransformSpace_m18728D948D1B46D284FBEBFEDA47FB97BBB1B68D_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7036));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7037));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7038));
		// sourceMap[SteamVR_Input_Sources.Any].skeletalTransformSpace = space;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7039));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7041));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7041));
		int32_t L_2 = ___space0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7042));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_set_skeletalTransformSpace_m851FCD54C037B0D6CF78F14CBF0BF7B44EE86FA8_inline(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7042));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7040));
		return;
	}
}
// System.UInt32 Valve.VR.SteamVR_Action_Skeleton::GetBoneCount()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR uint32_t SteamVR_Action_Skeleton_GetBoneCount_mB8D948288CCD3A7E432C9A28508CFF40C96F85A1 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetBoneCount_mB8D948288CCD3A7E432C9A28508CFF40C96F85A1_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	uint32_t V_0 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetBoneCount_mB8D948288CCD3A7E432C9A28508CFF40C96F85A1_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7043));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7044));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7045));
		// return sourceMap[SteamVR_Input_Sources.Any].GetBoneCount();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7046));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7048));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7048));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7049));
		NullCheck(L_1);
		uint32_t L_2 = SteamVR_Action_Skeleton_Source_GetBoneCount_m4EC7F17792380A78FF5B7699E35FB98ED5081E8C(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7049));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7047));
		uint32_t L_3 = V_0;
		return L_3;
	}
}
// System.Int32[] Valve.VR.SteamVR_Action_Skeleton::GetBoneHierarchy()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83* SteamVR_Action_Skeleton_GetBoneHierarchy_mE6046CC9827A1DDF795FB53696BA8A0119FCBD54 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetBoneHierarchy_mE6046CC9827A1DDF795FB53696BA8A0119FCBD54_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83* V_0 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetBoneHierarchy_mE6046CC9827A1DDF795FB53696BA8A0119FCBD54_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7050));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7051));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7052));
		// return sourceMap[SteamVR_Input_Sources.Any].GetBoneHierarchy();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7053));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7055));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7055));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7056));
		NullCheck(L_1);
		Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83* L_2 = SteamVR_Action_Skeleton_Source_GetBoneHierarchy_m87C2A7C088DCA2527B23F2054C62EB27234DFF78(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7056));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7054));
		Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83* L_3 = V_0;
		return L_3;
	}
}
// System.String Valve.VR.SteamVR_Action_Skeleton::GetBoneName(System.Int32)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR String_t* SteamVR_Action_Skeleton_GetBoneName_m3664883EBE49B71E83B8C4A2D3D6CA5648D896A1 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, int32_t ___boneIndex0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetBoneName_m3664883EBE49B71E83B8C4A2D3D6CA5648D896A1_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	String_t* V_0 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___boneIndex0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetBoneName_m3664883EBE49B71E83B8C4A2D3D6CA5648D896A1_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7057));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7058));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7059));
		// return sourceMap[SteamVR_Input_Sources.Any].GetBoneName(boneIndex);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7060));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7062));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7062));
		int32_t L_2 = ___boneIndex0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7063));
		NullCheck(L_1);
		String_t* L_3 = SteamVR_Action_Skeleton_Source_GetBoneName_m67234F0D980501AD00E029B0B30415B8F18856F9(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7063));
		V_0 = L_3;
		goto IL_0016;
	}

IL_0016:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7061));
		String_t* L_4 = V_0;
		return L_4;
	}
}
// SteamVR_Utils_RigidTransform[] Valve.VR.SteamVR_Action_Skeleton::GetReferenceTransforms(Valve.VR.EVRSkeletalTransformSpace,Valve.VR.EVRSkeletalReferencePose)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RigidTransformU5BU5D_tC98EB3576009E5D825D0D43671A65D32A2449ECC* SteamVR_Action_Skeleton_GetReferenceTransforms_m003738CB3D282D68A3B67970CDF7F508117FD296 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, int32_t ___transformSpace0, int32_t ___referencePose1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetReferenceTransforms_m003738CB3D282D68A3B67970CDF7F508117FD296_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	RigidTransformU5BU5D_tC98EB3576009E5D825D0D43671A65D32A2449ECC* V_0 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___transformSpace0), (&___referencePose1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetReferenceTransforms_m003738CB3D282D68A3B67970CDF7F508117FD296_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7064));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7065));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7066));
		// return sourceMap[SteamVR_Input_Sources.Any].GetReferenceTransforms(transformSpace, referencePose);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7067));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7069));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7069));
		int32_t L_2 = ___transformSpace0;
		int32_t L_3 = ___referencePose1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7070));
		NullCheck(L_1);
		RigidTransformU5BU5D_tC98EB3576009E5D825D0D43671A65D32A2449ECC* L_4 = SteamVR_Action_Skeleton_Source_GetReferenceTransforms_mD97ED9032334370252095D9ABCED25D4D5533B92(L_1, L_2, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7070));
		V_0 = L_4;
		goto IL_0017;
	}

IL_0017:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7068));
		RigidTransformU5BU5D_tC98EB3576009E5D825D0D43671A65D32A2449ECC* L_5 = V_0;
		return L_5;
	}
}
// Valve.VR.EVRSkeletalTrackingLevel Valve.VR.SteamVR_Action_Skeleton::GetSkeletalTrackingLevel()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Skeleton_GetSkeletalTrackingLevel_m6C574D1BBEA110C4DF8A5CEEF03E4987709F73E2 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetSkeletalTrackingLevel_m6C574D1BBEA110C4DF8A5CEEF03E4987709F73E2_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetSkeletalTrackingLevel_m6C574D1BBEA110C4DF8A5CEEF03E4987709F73E2_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7071));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7072));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7073));
		// return sourceMap[SteamVR_Input_Sources.Any].GetSkeletalTrackingLevel();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7074));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7076));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7076));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7077));
		NullCheck(L_1);
		int32_t L_2 = SteamVR_Action_Skeleton_Source_GetSkeletalTrackingLevel_mE38D26E81AA2C43A3BECB3EBEE02C2C632104C3B(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7077));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7075));
		int32_t L_3 = V_0;
		return L_3;
	}
}
// System.Single[] Valve.VR.SteamVR_Action_Skeleton::GetFingerCurls(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* SteamVR_Action_Skeleton_GetFingerCurls_mB05B99839838D84A19A639120BC6DD7FB2395A29 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, bool ___copy0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetFingerCurls_mB05B99839838D84A19A639120BC6DD7FB2395A29_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* V_1 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___copy0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetFingerCurls_mB05B99839838D84A19A639120BC6DD7FB2395A29_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7078));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7079));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7080));
		// if (copy)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7081));
		bool L_0 = ___copy0;
		V_0 = L_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7082));
		bool L_1 = V_0;
		if (!L_1)
		{
			goto IL_0024;
		}
	}
	{
		// return (float[])sourceMap[SteamVR_Input_Sources.Any].fingerCurls.Clone();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7083));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_2 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7086));
		NullCheck(L_2);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_3 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_2, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7086));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7087));
		NullCheck(L_3);
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_4 = SteamVR_Action_Skeleton_Source_get_fingerCurls_mD56D63D01414ED3D7D6074DB29C81AAC3C490479_inline(L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7087));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7088));
		NullCheck((RuntimeArray *)(RuntimeArray *)L_4);
		RuntimeObject * L_5 = Array_Clone_mE8C710213E323617A6F46F2B36DCDDD4C7CF5176((RuntimeArray *)(RuntimeArray *)L_4, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7088));
		V_1 = ((SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5*)Castclass((RuntimeObject*)L_5, SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5_il2cpp_TypeInfo_var));
		goto IL_0038;
	}

IL_0024:
	{
		// return sourceMap[SteamVR_Input_Sources.Any].fingerCurls;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7084));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_6 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7089));
		NullCheck(L_6);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_7 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_6, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7089));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7090));
		NullCheck(L_7);
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_8 = SteamVR_Action_Skeleton_Source_get_fingerCurls_mD56D63D01414ED3D7D6074DB29C81AAC3C490479_inline(L_7, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7090));
		V_1 = L_8;
		goto IL_0038;
	}

IL_0038:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7085));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_9 = V_1;
		return L_9;
	}
}
// System.Single[] Valve.VR.SteamVR_Action_Skeleton::GetLastFingerCurls(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* SteamVR_Action_Skeleton_GetLastFingerCurls_m6971403DF34683B96CB48F156A71C57C137AA5CA (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, bool ___copy0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetLastFingerCurls_m6971403DF34683B96CB48F156A71C57C137AA5CA_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* V_1 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___copy0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetLastFingerCurls_m6971403DF34683B96CB48F156A71C57C137AA5CA_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7091));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7092));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7093));
		// if (copy)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7094));
		bool L_0 = ___copy0;
		V_0 = L_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7095));
		bool L_1 = V_0;
		if (!L_1)
		{
			goto IL_0024;
		}
	}
	{
		// return (float[])sourceMap[SteamVR_Input_Sources.Any].lastFingerCurls.Clone();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7096));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_2 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7099));
		NullCheck(L_2);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_3 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_2, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7099));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7100));
		NullCheck(L_3);
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_4 = SteamVR_Action_Skeleton_Source_get_lastFingerCurls_m00C4EB3059A4427EF390371B7B56077017F42C2C_inline(L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7100));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7101));
		NullCheck((RuntimeArray *)(RuntimeArray *)L_4);
		RuntimeObject * L_5 = Array_Clone_mE8C710213E323617A6F46F2B36DCDDD4C7CF5176((RuntimeArray *)(RuntimeArray *)L_4, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7101));
		V_1 = ((SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5*)Castclass((RuntimeObject*)L_5, SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5_il2cpp_TypeInfo_var));
		goto IL_0038;
	}

IL_0024:
	{
		// return sourceMap[SteamVR_Input_Sources.Any].lastFingerCurls;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7097));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_6 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7102));
		NullCheck(L_6);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_7 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_6, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7102));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7103));
		NullCheck(L_7);
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_8 = SteamVR_Action_Skeleton_Source_get_lastFingerCurls_m00C4EB3059A4427EF390371B7B56077017F42C2C_inline(L_7, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7103));
		V_1 = L_8;
		goto IL_0038;
	}

IL_0038:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7098));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_9 = V_1;
		return L_9;
	}
}
// System.Single[] Valve.VR.SteamVR_Action_Skeleton::GetFingerSplays(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* SteamVR_Action_Skeleton_GetFingerSplays_m7CB3DAB877B3FE9EF6AD8A79FCFE6A80C0D1CD0E (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, bool ___copy0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetFingerSplays_m7CB3DAB877B3FE9EF6AD8A79FCFE6A80C0D1CD0E_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* V_1 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___copy0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetFingerSplays_m7CB3DAB877B3FE9EF6AD8A79FCFE6A80C0D1CD0E_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7104));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7105));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7106));
		// if (copy)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7107));
		bool L_0 = ___copy0;
		V_0 = L_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7108));
		bool L_1 = V_0;
		if (!L_1)
		{
			goto IL_0024;
		}
	}
	{
		// return (float[])sourceMap[SteamVR_Input_Sources.Any].fingerSplays.Clone();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7109));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_2 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7112));
		NullCheck(L_2);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_3 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_2, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7112));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7113));
		NullCheck(L_3);
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_4 = SteamVR_Action_Skeleton_Source_get_fingerSplays_m5461F8E49017BD6579CC10D8D0783642DEDE37D0_inline(L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7113));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7114));
		NullCheck((RuntimeArray *)(RuntimeArray *)L_4);
		RuntimeObject * L_5 = Array_Clone_mE8C710213E323617A6F46F2B36DCDDD4C7CF5176((RuntimeArray *)(RuntimeArray *)L_4, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7114));
		V_1 = ((SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5*)Castclass((RuntimeObject*)L_5, SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5_il2cpp_TypeInfo_var));
		goto IL_0038;
	}

IL_0024:
	{
		// return sourceMap[SteamVR_Input_Sources.Any].fingerSplays;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7110));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_6 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7115));
		NullCheck(L_6);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_7 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_6, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7115));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7116));
		NullCheck(L_7);
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_8 = SteamVR_Action_Skeleton_Source_get_fingerSplays_m5461F8E49017BD6579CC10D8D0783642DEDE37D0_inline(L_7, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7116));
		V_1 = L_8;
		goto IL_0038;
	}

IL_0038:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7111));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_9 = V_1;
		return L_9;
	}
}
// System.Single[] Valve.VR.SteamVR_Action_Skeleton::GetLastFingerSplays(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* SteamVR_Action_Skeleton_GetLastFingerSplays_m8144088BE8AF0D0FDDF3F1D89711732D63C16EBB (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, bool ___copy0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetLastFingerSplays_m8144088BE8AF0D0FDDF3F1D89711732D63C16EBB_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* V_1 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___copy0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetLastFingerSplays_m8144088BE8AF0D0FDDF3F1D89711732D63C16EBB_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7117));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7118));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7119));
		// if (copy)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7120));
		bool L_0 = ___copy0;
		V_0 = L_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7121));
		bool L_1 = V_0;
		if (!L_1)
		{
			goto IL_0024;
		}
	}
	{
		// return (float[])sourceMap[SteamVR_Input_Sources.Any].lastFingerSplays.Clone();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7122));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_2 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7125));
		NullCheck(L_2);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_3 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_2, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7125));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7126));
		NullCheck(L_3);
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_4 = SteamVR_Action_Skeleton_Source_get_lastFingerSplays_mC1CF900637C3FB99B1DE3F4BE06452EC07264747_inline(L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7126));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7127));
		NullCheck((RuntimeArray *)(RuntimeArray *)L_4);
		RuntimeObject * L_5 = Array_Clone_mE8C710213E323617A6F46F2B36DCDDD4C7CF5176((RuntimeArray *)(RuntimeArray *)L_4, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7127));
		V_1 = ((SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5*)Castclass((RuntimeObject*)L_5, SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5_il2cpp_TypeInfo_var));
		goto IL_0038;
	}

IL_0024:
	{
		// return sourceMap[SteamVR_Input_Sources.Any].lastFingerSplays;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7123));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_6 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7128));
		NullCheck(L_6);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_7 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_6, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7128));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7129));
		NullCheck(L_7);
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_8 = SteamVR_Action_Skeleton_Source_get_lastFingerSplays_mC1CF900637C3FB99B1DE3F4BE06452EC07264747_inline(L_7, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7129));
		V_1 = L_8;
		goto IL_0038;
	}

IL_0038:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7124));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_9 = V_1;
		return L_9;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton::GetFingerCurl(System.Int32)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_GetFingerCurl_mC1F50D0ECE4C5553E8E25A7C06668558D2742620 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, int32_t ___finger0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetFingerCurl_mC1F50D0ECE4C5553E8E25A7C06668558D2742620_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___finger0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetFingerCurl_mC1F50D0ECE4C5553E8E25A7C06668558D2742620_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7130));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7131));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7132));
		// return sourceMap[SteamVR_Input_Sources.Any].fingerCurls[finger];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7133));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7135));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7135));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7136));
		NullCheck(L_1);
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_2 = SteamVR_Action_Skeleton_Source_get_fingerCurls_mD56D63D01414ED3D7D6074DB29C81AAC3C490479_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7136));
		int32_t L_3 = ___finger0;
		NullCheck(L_2);
		int32_t L_4 = L_3;
		float L_5 = (L_2)->GetAt(static_cast<il2cpp_array_size_t>(L_4));
		V_0 = L_5;
		goto IL_0017;
	}

IL_0017:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7134));
		float L_6 = V_0;
		return L_6;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton::GetSplay(System.Int32)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_GetSplay_m6A6A69B1D61A8EB56C024FBE87D50C11A155ACE0 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, int32_t ___fingerGapIndex0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetSplay_m6A6A69B1D61A8EB56C024FBE87D50C11A155ACE0_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___fingerGapIndex0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetSplay_m6A6A69B1D61A8EB56C024FBE87D50C11A155ACE0_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7137));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7138));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7139));
		// return sourceMap[SteamVR_Input_Sources.Any].fingerSplays[fingerGapIndex];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7140));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7142));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7142));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7143));
		NullCheck(L_1);
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_2 = SteamVR_Action_Skeleton_Source_get_fingerSplays_m5461F8E49017BD6579CC10D8D0783642DEDE37D0_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7143));
		int32_t L_3 = ___fingerGapIndex0;
		NullCheck(L_2);
		int32_t L_4 = L_3;
		float L_5 = (L_2)->GetAt(static_cast<il2cpp_array_size_t>(L_4));
		V_0 = L_5;
		goto IL_0017;
	}

IL_0017:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7141));
		float L_6 = V_0;
		return L_6;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton::GetFingerCurl(Valve.VR.SteamVR_Skeleton_FingerIndexEnum)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_GetFingerCurl_m74152BBAF9EE89F9A8F186E462FFD0DDE1C9D420 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, int32_t ___finger0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetFingerCurl_m74152BBAF9EE89F9A8F186E462FFD0DDE1C9D420_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___finger0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetFingerCurl_m74152BBAF9EE89F9A8F186E462FFD0DDE1C9D420_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7144));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7145));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7146));
		// return GetFingerCurl((int)finger);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7147));
		int32_t L_0 = ___finger0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7149));
		float L_1 = SteamVR_Action_Skeleton_GetFingerCurl_mC1F50D0ECE4C5553E8E25A7C06668558D2742620(__this, L_0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7149));
		V_0 = L_1;
		goto IL_000b;
	}

IL_000b:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7148));
		float L_2 = V_0;
		return L_2;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton::GetSplay(Valve.VR.SteamVR_Skeleton_FingerSplayIndexEnum)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_GetSplay_mE67EEB0903CB5D257900AA9947BB259E83B2E953 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, int32_t ___fingerSplay0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetSplay_mE67EEB0903CB5D257900AA9947BB259E83B2E953_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___fingerSplay0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetSplay_mE67EEB0903CB5D257900AA9947BB259E83B2E953_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7150));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7151));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7152));
		// return GetSplay((int)fingerSplay);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7153));
		int32_t L_0 = ___fingerSplay0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7155));
		float L_1 = SteamVR_Action_Skeleton_GetSplay_m6A6A69B1D61A8EB56C024FBE87D50C11A155ACE0(__this, L_0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7155));
		V_0 = L_1;
		goto IL_000b;
	}

IL_000b:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7154));
		float L_2 = V_0;
		return L_2;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton::GetLastFingerCurl(System.Int32)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_GetLastFingerCurl_m39488C73FCFCA0C9586171A54C06F3336F9EA563 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, int32_t ___finger0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetLastFingerCurl_m39488C73FCFCA0C9586171A54C06F3336F9EA563_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___finger0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetLastFingerCurl_m39488C73FCFCA0C9586171A54C06F3336F9EA563_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7156));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7157));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7158));
		// return sourceMap[SteamVR_Input_Sources.Any].lastFingerCurls[finger];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7159));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7161));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7161));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7162));
		NullCheck(L_1);
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_2 = SteamVR_Action_Skeleton_Source_get_lastFingerCurls_m00C4EB3059A4427EF390371B7B56077017F42C2C_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7162));
		int32_t L_3 = ___finger0;
		NullCheck(L_2);
		int32_t L_4 = L_3;
		float L_5 = (L_2)->GetAt(static_cast<il2cpp_array_size_t>(L_4));
		V_0 = L_5;
		goto IL_0017;
	}

IL_0017:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7160));
		float L_6 = V_0;
		return L_6;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton::GetLastSplay(System.Int32)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_GetLastSplay_m3EE8FC2ECE44A16A6F103E19A42AF8A10780C9B2 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, int32_t ___fingerGapIndex0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetLastSplay_m3EE8FC2ECE44A16A6F103E19A42AF8A10780C9B2_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___fingerGapIndex0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetLastSplay_m3EE8FC2ECE44A16A6F103E19A42AF8A10780C9B2_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7163));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7164));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7165));
		// return sourceMap[SteamVR_Input_Sources.Any].lastFingerSplays[fingerGapIndex];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7166));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7168));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7168));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7169));
		NullCheck(L_1);
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_2 = SteamVR_Action_Skeleton_Source_get_lastFingerSplays_mC1CF900637C3FB99B1DE3F4BE06452EC07264747_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7169));
		int32_t L_3 = ___fingerGapIndex0;
		NullCheck(L_2);
		int32_t L_4 = L_3;
		float L_5 = (L_2)->GetAt(static_cast<il2cpp_array_size_t>(L_4));
		V_0 = L_5;
		goto IL_0017;
	}

IL_0017:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7167));
		float L_6 = V_0;
		return L_6;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton::GetLastFingerCurl(Valve.VR.SteamVR_Skeleton_FingerIndexEnum)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_GetLastFingerCurl_m8F00957C95BDA66CE16C133DF5408FC7472410A9 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, int32_t ___finger0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetLastFingerCurl_m8F00957C95BDA66CE16C133DF5408FC7472410A9_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___finger0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetLastFingerCurl_m8F00957C95BDA66CE16C133DF5408FC7472410A9_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7170));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7171));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7172));
		// return GetLastFingerCurl((int)finger);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7173));
		int32_t L_0 = ___finger0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7175));
		float L_1 = SteamVR_Action_Skeleton_GetLastFingerCurl_m39488C73FCFCA0C9586171A54C06F3336F9EA563(__this, L_0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7175));
		V_0 = L_1;
		goto IL_000b;
	}

IL_000b:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7174));
		float L_2 = V_0;
		return L_2;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton::GetLastSplay(Valve.VR.SteamVR_Skeleton_FingerSplayIndexEnum)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_GetLastSplay_m1C845AC46C2657DA0BE3D71578C195D5F7FFDA5D (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, int32_t ___fingerSplay0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetLastSplay_m1C845AC46C2657DA0BE3D71578C195D5F7FFDA5D_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___fingerSplay0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetLastSplay_m1C845AC46C2657DA0BE3D71578C195D5F7FFDA5D_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7176));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7177));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7178));
		// return GetLastSplay((int)fingerSplay);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7179));
		int32_t L_0 = ___fingerSplay0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7181));
		float L_1 = SteamVR_Action_Skeleton_GetLastSplay_m3EE8FC2ECE44A16A6F103E19A42AF8A10780C9B2(__this, L_0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7181));
		V_0 = L_1;
		goto IL_000b;
	}

IL_000b:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7180));
		float L_2 = V_0;
		return L_2;
	}
}
// System.String Valve.VR.SteamVR_Action_Skeleton::GetLocalizedName(Valve.VR.EVRInputStringBits[])
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR String_t* SteamVR_Action_Skeleton_GetLocalizedName_m6E5B2E0BB7BBB24B0C10D4178DEBD2452F21511B (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, EVRInputStringBitsU5BU5D_t9F9E9B47CD745CAAB4F8EDC305D84DDF9E5BE511* ___localizedParts0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_GetLocalizedName_m6E5B2E0BB7BBB24B0C10D4178DEBD2452F21511B_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	String_t* V_0 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___localizedParts0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_GetLocalizedName_m6E5B2E0BB7BBB24B0C10D4178DEBD2452F21511B_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7182));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7183));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7184));
		// return sourceMap[SteamVR_Input_Sources.Any].GetLocalizedOriginPart(localizedParts);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7185));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7187));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7187));
		EVRInputStringBitsU5BU5D_t9F9E9B47CD745CAAB4F8EDC305D84DDF9E5BE511* L_2 = ___localizedParts0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7188));
		NullCheck(L_1);
		String_t* L_3 = SteamVR_Action_In_Source_GetLocalizedOriginPart_m8A1FC7BEF4660C4D7D7573EE13F399C76D325938(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7188));
		V_0 = L_3;
		goto IL_0016;
	}

IL_0016:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7186));
		String_t* L_4 = V_0;
		return L_4;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::AddOnDeviceConnectedChanged(Valve.VR.SteamVR_Action_Skeleton_DeviceConnectedChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_AddOnDeviceConnectedChanged_mCDC3AE4ECD7F52EBBF02BB5DC2E81A5F2F493915 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * ___functionToCall0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_AddOnDeviceConnectedChanged_mCDC3AE4ECD7F52EBBF02BB5DC2E81A5F2F493915_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToCall0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_AddOnDeviceConnectedChanged_mCDC3AE4ECD7F52EBBF02BB5DC2E81A5F2F493915_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7189));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7190));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7191));
		// sourceMap[SteamVR_Input_Sources.Any].onDeviceConnectedChanged += functionToCall;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7192));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7194));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7194));
		DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * L_2 = ___functionToCall0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7195));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_add_onDeviceConnectedChanged_m65E5DE81AF451EF0B00E214FA8E5034E29FA3EC7(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7195));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7193));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::RemoveOnDeviceConnectedChanged(Valve.VR.SteamVR_Action_Skeleton_DeviceConnectedChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_RemoveOnDeviceConnectedChanged_mA65B569EE113DD0F88233B2A720F57ACDBFFDA23 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * ___functionToStopCalling0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_RemoveOnDeviceConnectedChanged_mA65B569EE113DD0F88233B2A720F57ACDBFFDA23_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToStopCalling0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_RemoveOnDeviceConnectedChanged_mA65B569EE113DD0F88233B2A720F57ACDBFFDA23_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7196));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7197));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7198));
		// sourceMap[SteamVR_Input_Sources.Any].onDeviceConnectedChanged -= functionToStopCalling;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7199));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7201));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7201));
		DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * L_2 = ___functionToStopCalling0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7202));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_remove_onDeviceConnectedChanged_mB24005D6459F7B8D170E3445BF5B95405871AF13(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7202));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7200));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::AddOnTrackingChanged(Valve.VR.SteamVR_Action_Skeleton_TrackingChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_AddOnTrackingChanged_mFEFEF4A49A2F219DD9C6A2B315829772A140FAE0 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * ___functionToCall0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_AddOnTrackingChanged_mFEFEF4A49A2F219DD9C6A2B315829772A140FAE0_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToCall0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_AddOnTrackingChanged_mFEFEF4A49A2F219DD9C6A2B315829772A140FAE0_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7203));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7204));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7205));
		// sourceMap[SteamVR_Input_Sources.Any].onTrackingChanged += functionToCall;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7206));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7208));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7208));
		TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * L_2 = ___functionToCall0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7209));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_add_onTrackingChanged_m1214E513861191327AAAF65D11DDA8E978F2EAD0(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7209));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7207));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::RemoveOnTrackingChanged(Valve.VR.SteamVR_Action_Skeleton_TrackingChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_RemoveOnTrackingChanged_m50F6BBB2398BED51DAC0B5F444FFFB487C938D58 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * ___functionToStopCalling0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_RemoveOnTrackingChanged_m50F6BBB2398BED51DAC0B5F444FFFB487C938D58_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToStopCalling0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_RemoveOnTrackingChanged_m50F6BBB2398BED51DAC0B5F444FFFB487C938D58_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7210));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7211));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7212));
		// sourceMap[SteamVR_Input_Sources.Any].onTrackingChanged -= functionToStopCalling;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7213));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7215));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7215));
		TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * L_2 = ___functionToStopCalling0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7216));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_remove_onTrackingChanged_mD1990275D9A505E92742B063863D9F1BE96BFDB0(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7216));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7214));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::AddOnValidPoseChanged(Valve.VR.SteamVR_Action_Skeleton_ValidPoseChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_AddOnValidPoseChanged_m7C3267EC9F47669379DC41F6653B34BD70071A20 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * ___functionToCall0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_AddOnValidPoseChanged_m7C3267EC9F47669379DC41F6653B34BD70071A20_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToCall0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_AddOnValidPoseChanged_m7C3267EC9F47669379DC41F6653B34BD70071A20_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7217));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7218));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7219));
		// sourceMap[SteamVR_Input_Sources.Any].onValidPoseChanged += functionToCall;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7220));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7222));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7222));
		ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * L_2 = ___functionToCall0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7223));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_add_onValidPoseChanged_m2A4D3F3E5FEFDD0ACBBCA7018AD94DF8EDA37A24(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7223));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7221));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::RemoveOnValidPoseChanged(Valve.VR.SteamVR_Action_Skeleton_ValidPoseChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_RemoveOnValidPoseChanged_mC3A2516F26566F6E2C9F01EA501C095E1978269C (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * ___functionToStopCalling0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_RemoveOnValidPoseChanged_mC3A2516F26566F6E2C9F01EA501C095E1978269C_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToStopCalling0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_RemoveOnValidPoseChanged_mC3A2516F26566F6E2C9F01EA501C095E1978269C_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7224));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7225));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7226));
		// sourceMap[SteamVR_Input_Sources.Any].onValidPoseChanged -= functionToStopCalling;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7227));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7229));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7229));
		ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * L_2 = ___functionToStopCalling0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7230));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_remove_onValidPoseChanged_mA00A29139A1727456784ECF81C9009BAD9B2D8D0(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7230));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7228));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::AddOnActiveChangeListener(Valve.VR.SteamVR_Action_Skeleton_ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_AddOnActiveChangeListener_m2D32E586E074A6211226E0B25A4BD7819BDD2331 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * ___functionToCall0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_AddOnActiveChangeListener_m2D32E586E074A6211226E0B25A4BD7819BDD2331_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToCall0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_AddOnActiveChangeListener_m2D32E586E074A6211226E0B25A4BD7819BDD2331_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7231));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7232));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7233));
		// sourceMap[SteamVR_Input_Sources.Any].onActiveChange += functionToCall;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7234));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7236));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7236));
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_2 = ___functionToCall0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7237));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_add_onActiveChange_mE0FC38C5C6749C482B67CA8FC2017969A0BE37F6(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7237));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7235));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::RemoveOnActiveChangeListener(Valve.VR.SteamVR_Action_Skeleton_ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_RemoveOnActiveChangeListener_mDAA7E51AE61F9EFB56712D2BFC5C2481BE781D7C (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * ___functionToStopCalling0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_RemoveOnActiveChangeListener_mDAA7E51AE61F9EFB56712D2BFC5C2481BE781D7C_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToStopCalling0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_RemoveOnActiveChangeListener_mDAA7E51AE61F9EFB56712D2BFC5C2481BE781D7C_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7238));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7239));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7240));
		// sourceMap[SteamVR_Input_Sources.Any].onActiveChange -= functionToStopCalling;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7241));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7243));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7243));
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_2 = ___functionToStopCalling0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7244));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_remove_onActiveChange_m02B106748649E99F649EC24789D36D5DB0577965(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7244));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7242));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::AddOnChangeListener(Valve.VR.SteamVR_Action_Skeleton_ChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_AddOnChangeListener_m6D171EBBE99E96449ED31256191F0B9B37660CA4 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * ___functionToCall0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_AddOnChangeListener_m6D171EBBE99E96449ED31256191F0B9B37660CA4_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToCall0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_AddOnChangeListener_m6D171EBBE99E96449ED31256191F0B9B37660CA4_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7245));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7246));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7247));
		// sourceMap[SteamVR_Input_Sources.Any].onChange += functionToCall;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7248));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7250));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7250));
		ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * L_2 = ___functionToCall0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7251));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_add_onChange_m36F08DE1097970DE49B839792F1935A218E92ADA(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7251));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7249));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::RemoveOnChangeListener(Valve.VR.SteamVR_Action_Skeleton_ChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_RemoveOnChangeListener_mAFAD8747C82109904BB2B6B5BF3387EA6DA970F3 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * ___functionToStopCalling0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_RemoveOnChangeListener_mAFAD8747C82109904BB2B6B5BF3387EA6DA970F3_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToStopCalling0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_RemoveOnChangeListener_mAFAD8747C82109904BB2B6B5BF3387EA6DA970F3_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7252));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7253));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7254));
		// sourceMap[SteamVR_Input_Sources.Any].onChange -= functionToStopCalling;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7255));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7257));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7257));
		ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * L_2 = ___functionToStopCalling0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7258));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_remove_onChange_m9AE202076C862455102381B3DD4AA5E98D8E7DB0(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7258));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7256));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::AddOnUpdateListener(Valve.VR.SteamVR_Action_Skeleton_UpdateHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_AddOnUpdateListener_m4747980341F8DD2D9AB7068B6517CCB415635808 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * ___functionToCall0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_AddOnUpdateListener_m4747980341F8DD2D9AB7068B6517CCB415635808_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToCall0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_AddOnUpdateListener_m4747980341F8DD2D9AB7068B6517CCB415635808_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7259));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7260));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7261));
		// sourceMap[SteamVR_Input_Sources.Any].onUpdate += functionToCall;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7262));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7264));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7264));
		UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * L_2 = ___functionToCall0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7265));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_add_onUpdate_m7E46F0BA1CFA58A2B4CD7E9937AF913E21B597E4(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7265));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7263));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::RemoveOnUpdateListener(Valve.VR.SteamVR_Action_Skeleton_UpdateHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_RemoveOnUpdateListener_m123C6B0C9425E2C84DFDFA880047D7A6C6FDD3CF (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * ___functionToStopCalling0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_RemoveOnUpdateListener_m123C6B0C9425E2C84DFDFA880047D7A6C6FDD3CF_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToStopCalling0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_RemoveOnUpdateListener_m123C6B0C9425E2C84DFDFA880047D7A6C6FDD3CF_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7266));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7267));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7268));
		// sourceMap[SteamVR_Input_Sources.Any].onUpdate -= functionToStopCalling;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7269));
		SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * L_0 = ((SteamVR_Action_2_t2D32D7E2FBDFB6126D5E6B0594C0F688ED213F5D *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7271));
		NullCheck(L_0);
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mE6654E37CDC21CD792F0117903D14A2BF541B0E2_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7271));
		UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * L_2 = ___functionToStopCalling0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7272));
		NullCheck(L_1);
		SteamVR_Action_Skeleton_Source_remove_onUpdate_m3DAC62A7DE38AF1BA67D76654BDC0CECB0296FAF(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7272));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7270));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize_m4CFD08AACF800E504667C5F20A2636ED6CF50ED2 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize_m4CFD08AACF800E504667C5F20A2636ED6CF50ED2_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize_m4CFD08AACF800E504667C5F20A2636ED6CF50ED2_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7273));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7274));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7275));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7276));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize_m5CD84AEC49B84E110E6BF9277B9335A136ABAAA5 (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize_m5CD84AEC49B84E110E6BF9277B9335A136ABAAA5_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize_m5CD84AEC49B84E110E6BF9277B9335A136ABAAA5_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7277));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7278));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7279));
		// InitAfterDeserialize();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7280));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7282));
		SteamVR_Action_2_InitAfterDeserialize_m18C23160315F8414CA38CA01EB2E95529802281C(__this, /*hidden argument*/SteamVR_Action_2_InitAfterDeserialize_m18C23160315F8414CA38CA01EB2E95529802281C_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7282));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7281));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton::.cctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton__cctor_m57066E5D93F7A7D6D735CE541E25BABAC7E5480A (const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton__cctor_m57066E5D93F7A7D6D735CE541E25BABAC7E5480A_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton__cctor_m57066E5D93F7A7D6D735CE541E25BABAC7E5480A_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7283));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7284));
	{
		// public static Quaternion steamVRFixUpRotation = Quaternion.AngleAxis(Mathf.PI * Mathf.Rad2Deg, Vector3.up);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7285));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7286));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = Vector3_get_up_m6309EBC4E42D6D0B3D28056BD23D0331275306F7(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7286));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7287));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_1 = Quaternion_AngleAxis_m07DACF59F0403451DABB9BC991C53EE3301E88B0((180.0f), L_0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7287));
		((SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504_StaticFields*)il2cpp_codegen_static_fields_for(SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504_il2cpp_TypeInfo_var))->set_steamVRFixUpRotation_7(L_1);
		return;
	}
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Void Valve.VR.SteamVR_Action_Skeleton_ActiveChangeHandler::.ctor(System.Object,System.IntPtr)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ActiveChangeHandler__ctor_m9D87931B47DA909EBF27D42D4C66CDB11AE98F15 (ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * __this, RuntimeObject * ___object0, intptr_t ___method1, const RuntimeMethod* method)
{
	__this->set_method_ptr_0(il2cpp_codegen_get_method_pointer((RuntimeMethod*)___method1));
	__this->set_method_3(___method1);
	__this->set_m_target_2(___object0);
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_ActiveChangeHandler::Invoke(Valve.VR.SteamVR_Action_Skeleton,System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ActiveChangeHandler_Invoke_m91B4ED8236F4EDF7B0D28988B02B1D9AC6C3A86A (ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * __this, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * ___fromAction0, bool ___active1, const RuntimeMethod* method)
{
	DelegateU5BU5D_tDFCDEE2A6322F96C0FE49AF47E9ADB8C4B294E86* delegateArrayToInvoke = __this->get_delegates_11();
	Delegate_t** delegatesToInvoke;
	il2cpp_array_size_t length;
	if (delegateArrayToInvoke != NULL)
	{
		length = delegateArrayToInvoke->max_length;
		delegatesToInvoke = reinterpret_cast<Delegate_t**>(delegateArrayToInvoke->GetAddressAtUnchecked(0));
	}
	else
	{
		length = 1;
		delegatesToInvoke = reinterpret_cast<Delegate_t**>(&__this);
	}

	for (il2cpp_array_size_t i = 0; i < length; i++)
	{
		Delegate_t* currentDelegate = delegatesToInvoke[i];
		Il2CppMethodPointer targetMethodPointer = currentDelegate->get_method_ptr_0();
		RuntimeObject* targetThis = currentDelegate->get_m_target_2();
		RuntimeMethod* targetMethod = (RuntimeMethod*)(currentDelegate->get_method_3());
		if (!il2cpp_codegen_method_is_virtual(targetMethod))
		{
			il2cpp_codegen_raise_execution_engine_exception_if_method_is_not_found(targetMethod);
		}
		bool ___methodIsStatic = MethodIsStatic(targetMethod);
		int ___parameterCount = il2cpp_codegen_method_parameter_count(targetMethod);
		if (___methodIsStatic)
		{
			if (___parameterCount == 2)
			{
				// open
				typedef void (*FunctionPointerType) (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, bool, const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(___fromAction0, ___active1, targetMethod);
			}
			else
			{
				// closed
				typedef void (*FunctionPointerType) (void*, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, bool, const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(targetThis, ___fromAction0, ___active1, targetMethod);
			}
		}
		else if (___parameterCount != 2)
		{
			// open
			if (il2cpp_codegen_method_is_virtual(targetMethod) && il2cpp_codegen_delegate_has_invoker((Il2CppDelegate*)__this))
			{
				if (il2cpp_codegen_method_is_generic_instance(targetMethod))
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						GenericInterfaceActionInvoker1< bool >::Invoke(targetMethod, ___fromAction0, ___active1);
					else
						GenericVirtActionInvoker1< bool >::Invoke(targetMethod, ___fromAction0, ___active1);
				}
				else
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						InterfaceActionInvoker1< bool >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), il2cpp_codegen_method_get_declaring_type(targetMethod), ___fromAction0, ___active1);
					else
						VirtActionInvoker1< bool >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), ___fromAction0, ___active1);
				}
			}
			else
			{
				if (targetThis == NULL && il2cpp_codegen_class_is_value_type(il2cpp_codegen_method_get_declaring_type(targetMethod)))
				{
					typedef void (*FunctionPointerType) (RuntimeObject*, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)((reinterpret_cast<RuntimeObject*>(&___active1) - 1), targetMethod);
				}
				typedef void (*FunctionPointerType) (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, bool, const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(___fromAction0, ___active1, targetMethod);
			}
		}
		else
		{
			// closed
			if (targetThis != NULL && il2cpp_codegen_method_is_virtual(targetMethod) && !il2cpp_codegen_object_is_of_sealed_type(targetThis) && il2cpp_codegen_delegate_has_invoker((Il2CppDelegate*)__this))
			{
				if (il2cpp_codegen_method_is_generic_instance(targetMethod))
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						GenericInterfaceActionInvoker2< SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, bool >::Invoke(targetMethod, targetThis, ___fromAction0, ___active1);
					else
						GenericVirtActionInvoker2< SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, bool >::Invoke(targetMethod, targetThis, ___fromAction0, ___active1);
				}
				else
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						InterfaceActionInvoker2< SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, bool >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), il2cpp_codegen_method_get_declaring_type(targetMethod), targetThis, ___fromAction0, ___active1);
					else
						VirtActionInvoker2< SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, bool >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), targetThis, ___fromAction0, ___active1);
				}
			}
			else
			{
				if (targetThis == NULL && il2cpp_codegen_class_is_value_type(il2cpp_codegen_method_get_declaring_type(targetMethod)))
				{
					typedef void (*FunctionPointerType) (RuntimeObject*, bool, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)((reinterpret_cast<RuntimeObject*>(___fromAction0) - 1), ___active1, targetMethod);
				}
				if (targetThis == NULL)
				{
					typedef void (*FunctionPointerType) (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, bool, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)(___fromAction0, ___active1, targetMethod);
				}
				else
				{
					typedef void (*FunctionPointerType) (void*, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, bool, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)(targetThis, ___fromAction0, ___active1, targetMethod);
				}
			}
		}
	}
}
// System.IAsyncResult Valve.VR.SteamVR_Action_Skeleton_ActiveChangeHandler::BeginInvoke(Valve.VR.SteamVR_Action_Skeleton,System.Boolean,System.AsyncCallback,System.Object)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RuntimeObject* ActiveChangeHandler_BeginInvoke_m20FA39B27B526812B1D6D1749788D3F1D884B2C8 (ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * __this, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * ___fromAction0, bool ___active1, AsyncCallback_t3F3DA3BEDAEE81DD1D24125DF8EB30E85EE14DA4 * ___callback2, RuntimeObject * ___object3, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ActiveChangeHandler_BeginInvoke_m20FA39B27B526812B1D6D1749788D3F1D884B2C8_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	void *__d_args[3] = {0};
	__d_args[0] = ___fromAction0;
	__d_args[1] = Box(Boolean_tB53F6830F670160873277339AA58F15CAED4399C_il2cpp_TypeInfo_var, &___active1);
	return (RuntimeObject*)il2cpp_codegen_delegate_begin_invoke((RuntimeDelegate*)__this, __d_args, (RuntimeDelegate*)___callback2, (RuntimeObject*)___object3);
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_ActiveChangeHandler::EndInvoke(System.IAsyncResult)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ActiveChangeHandler_EndInvoke_m33CA0B570D1604A4DD369AB26E52234F474F741A (ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * __this, RuntimeObject* ___result0, const RuntimeMethod* method)
{
	il2cpp_codegen_delegate_end_invoke((Il2CppAsyncResult*) ___result0, 0);
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Void Valve.VR.SteamVR_Action_Skeleton_ChangeHandler::.ctor(System.Object,System.IntPtr)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ChangeHandler__ctor_m3907CB57D39251E69163FEFCC54C399705C76C24 (ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * __this, RuntimeObject * ___object0, intptr_t ___method1, const RuntimeMethod* method)
{
	__this->set_method_ptr_0(il2cpp_codegen_get_method_pointer((RuntimeMethod*)___method1));
	__this->set_method_3(___method1);
	__this->set_m_target_2(___object0);
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_ChangeHandler::Invoke(Valve.VR.SteamVR_Action_Skeleton)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ChangeHandler_Invoke_m68EBE17205B49F58CC18575D9407E20E163CBE66 (ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * __this, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * ___fromAction0, const RuntimeMethod* method)
{
	DelegateU5BU5D_tDFCDEE2A6322F96C0FE49AF47E9ADB8C4B294E86* delegateArrayToInvoke = __this->get_delegates_11();
	Delegate_t** delegatesToInvoke;
	il2cpp_array_size_t length;
	if (delegateArrayToInvoke != NULL)
	{
		length = delegateArrayToInvoke->max_length;
		delegatesToInvoke = reinterpret_cast<Delegate_t**>(delegateArrayToInvoke->GetAddressAtUnchecked(0));
	}
	else
	{
		length = 1;
		delegatesToInvoke = reinterpret_cast<Delegate_t**>(&__this);
	}

	for (il2cpp_array_size_t i = 0; i < length; i++)
	{
		Delegate_t* currentDelegate = delegatesToInvoke[i];
		Il2CppMethodPointer targetMethodPointer = currentDelegate->get_method_ptr_0();
		RuntimeObject* targetThis = currentDelegate->get_m_target_2();
		RuntimeMethod* targetMethod = (RuntimeMethod*)(currentDelegate->get_method_3());
		if (!il2cpp_codegen_method_is_virtual(targetMethod))
		{
			il2cpp_codegen_raise_execution_engine_exception_if_method_is_not_found(targetMethod);
		}
		bool ___methodIsStatic = MethodIsStatic(targetMethod);
		int ___parameterCount = il2cpp_codegen_method_parameter_count(targetMethod);
		if (___methodIsStatic)
		{
			if (___parameterCount == 1)
			{
				// open
				typedef void (*FunctionPointerType) (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(___fromAction0, targetMethod);
			}
			else
			{
				// closed
				typedef void (*FunctionPointerType) (void*, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(targetThis, ___fromAction0, targetMethod);
			}
		}
		else if (___parameterCount != 1)
		{
			// open
			if (il2cpp_codegen_method_is_virtual(targetMethod) && il2cpp_codegen_delegate_has_invoker((Il2CppDelegate*)__this))
			{
				if (il2cpp_codegen_method_is_generic_instance(targetMethod))
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						GenericInterfaceActionInvoker0::Invoke(targetMethod, ___fromAction0);
					else
						GenericVirtActionInvoker0::Invoke(targetMethod, ___fromAction0);
				}
				else
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						InterfaceActionInvoker0::Invoke(il2cpp_codegen_method_get_slot(targetMethod), il2cpp_codegen_method_get_declaring_type(targetMethod), ___fromAction0);
					else
						VirtActionInvoker0::Invoke(il2cpp_codegen_method_get_slot(targetMethod), ___fromAction0);
				}
			}
			else
			{
				typedef void (*FunctionPointerType) (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(___fromAction0, targetMethod);
			}
		}
		else
		{
			// closed
			if (targetThis != NULL && il2cpp_codegen_method_is_virtual(targetMethod) && !il2cpp_codegen_object_is_of_sealed_type(targetThis) && il2cpp_codegen_delegate_has_invoker((Il2CppDelegate*)__this))
			{
				if (il2cpp_codegen_method_is_generic_instance(targetMethod))
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						GenericInterfaceActionInvoker1< SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * >::Invoke(targetMethod, targetThis, ___fromAction0);
					else
						GenericVirtActionInvoker1< SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * >::Invoke(targetMethod, targetThis, ___fromAction0);
				}
				else
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						InterfaceActionInvoker1< SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), il2cpp_codegen_method_get_declaring_type(targetMethod), targetThis, ___fromAction0);
					else
						VirtActionInvoker1< SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), targetThis, ___fromAction0);
				}
			}
			else
			{
				if (targetThis == NULL && il2cpp_codegen_class_is_value_type(il2cpp_codegen_method_get_declaring_type(targetMethod)))
				{
					typedef void (*FunctionPointerType) (RuntimeObject*, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)((reinterpret_cast<RuntimeObject*>(___fromAction0) - 1), targetMethod);
				}
				if (targetThis == NULL)
				{
					typedef void (*FunctionPointerType) (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)(___fromAction0, targetMethod);
				}
				else
				{
					typedef void (*FunctionPointerType) (void*, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)(targetThis, ___fromAction0, targetMethod);
				}
			}
		}
	}
}
// System.IAsyncResult Valve.VR.SteamVR_Action_Skeleton_ChangeHandler::BeginInvoke(Valve.VR.SteamVR_Action_Skeleton,System.AsyncCallback,System.Object)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RuntimeObject* ChangeHandler_BeginInvoke_m885E71779C31CDA17A452CD52ABB284C3F8FCF46 (ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * __this, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * ___fromAction0, AsyncCallback_t3F3DA3BEDAEE81DD1D24125DF8EB30E85EE14DA4 * ___callback1, RuntimeObject * ___object2, const RuntimeMethod* method)
{
	void *__d_args[2] = {0};
	__d_args[0] = ___fromAction0;
	return (RuntimeObject*)il2cpp_codegen_delegate_begin_invoke((RuntimeDelegate*)__this, __d_args, (RuntimeDelegate*)___callback1, (RuntimeObject*)___object2);
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_ChangeHandler::EndInvoke(System.IAsyncResult)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ChangeHandler_EndInvoke_m5EBBDFE3BB0D3217421CDEDBA9227386C2354545 (ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * __this, RuntimeObject* ___result0, const RuntimeMethod* method)
{
	il2cpp_codegen_delegate_end_invoke((Il2CppAsyncResult*) ___result0, 0);
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Void Valve.VR.SteamVR_Action_Skeleton_DeviceConnectedChangeHandler::.ctor(System.Object,System.IntPtr)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void DeviceConnectedChangeHandler__ctor_m8F5774FBC2C0DEA2AE17138C7D67D6FAD3385D8C (DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * __this, RuntimeObject * ___object0, intptr_t ___method1, const RuntimeMethod* method)
{
	__this->set_method_ptr_0(il2cpp_codegen_get_method_pointer((RuntimeMethod*)___method1));
	__this->set_method_3(___method1);
	__this->set_m_target_2(___object0);
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_DeviceConnectedChangeHandler::Invoke(Valve.VR.SteamVR_Action_Skeleton,System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void DeviceConnectedChangeHandler_Invoke_mFCAC042EA7E128B43D041E89C436CFAF4C340032 (DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * __this, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * ___fromAction0, bool ___deviceConnected1, const RuntimeMethod* method)
{
	DelegateU5BU5D_tDFCDEE2A6322F96C0FE49AF47E9ADB8C4B294E86* delegateArrayToInvoke = __this->get_delegates_11();
	Delegate_t** delegatesToInvoke;
	il2cpp_array_size_t length;
	if (delegateArrayToInvoke != NULL)
	{
		length = delegateArrayToInvoke->max_length;
		delegatesToInvoke = reinterpret_cast<Delegate_t**>(delegateArrayToInvoke->GetAddressAtUnchecked(0));
	}
	else
	{
		length = 1;
		delegatesToInvoke = reinterpret_cast<Delegate_t**>(&__this);
	}

	for (il2cpp_array_size_t i = 0; i < length; i++)
	{
		Delegate_t* currentDelegate = delegatesToInvoke[i];
		Il2CppMethodPointer targetMethodPointer = currentDelegate->get_method_ptr_0();
		RuntimeObject* targetThis = currentDelegate->get_m_target_2();
		RuntimeMethod* targetMethod = (RuntimeMethod*)(currentDelegate->get_method_3());
		if (!il2cpp_codegen_method_is_virtual(targetMethod))
		{
			il2cpp_codegen_raise_execution_engine_exception_if_method_is_not_found(targetMethod);
		}
		bool ___methodIsStatic = MethodIsStatic(targetMethod);
		int ___parameterCount = il2cpp_codegen_method_parameter_count(targetMethod);
		if (___methodIsStatic)
		{
			if (___parameterCount == 2)
			{
				// open
				typedef void (*FunctionPointerType) (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, bool, const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(___fromAction0, ___deviceConnected1, targetMethod);
			}
			else
			{
				// closed
				typedef void (*FunctionPointerType) (void*, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, bool, const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(targetThis, ___fromAction0, ___deviceConnected1, targetMethod);
			}
		}
		else if (___parameterCount != 2)
		{
			// open
			if (il2cpp_codegen_method_is_virtual(targetMethod) && il2cpp_codegen_delegate_has_invoker((Il2CppDelegate*)__this))
			{
				if (il2cpp_codegen_method_is_generic_instance(targetMethod))
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						GenericInterfaceActionInvoker1< bool >::Invoke(targetMethod, ___fromAction0, ___deviceConnected1);
					else
						GenericVirtActionInvoker1< bool >::Invoke(targetMethod, ___fromAction0, ___deviceConnected1);
				}
				else
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						InterfaceActionInvoker1< bool >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), il2cpp_codegen_method_get_declaring_type(targetMethod), ___fromAction0, ___deviceConnected1);
					else
						VirtActionInvoker1< bool >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), ___fromAction0, ___deviceConnected1);
				}
			}
			else
			{
				if (targetThis == NULL && il2cpp_codegen_class_is_value_type(il2cpp_codegen_method_get_declaring_type(targetMethod)))
				{
					typedef void (*FunctionPointerType) (RuntimeObject*, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)((reinterpret_cast<RuntimeObject*>(&___deviceConnected1) - 1), targetMethod);
				}
				typedef void (*FunctionPointerType) (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, bool, const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(___fromAction0, ___deviceConnected1, targetMethod);
			}
		}
		else
		{
			// closed
			if (targetThis != NULL && il2cpp_codegen_method_is_virtual(targetMethod) && !il2cpp_codegen_object_is_of_sealed_type(targetThis) && il2cpp_codegen_delegate_has_invoker((Il2CppDelegate*)__this))
			{
				if (il2cpp_codegen_method_is_generic_instance(targetMethod))
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						GenericInterfaceActionInvoker2< SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, bool >::Invoke(targetMethod, targetThis, ___fromAction0, ___deviceConnected1);
					else
						GenericVirtActionInvoker2< SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, bool >::Invoke(targetMethod, targetThis, ___fromAction0, ___deviceConnected1);
				}
				else
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						InterfaceActionInvoker2< SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, bool >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), il2cpp_codegen_method_get_declaring_type(targetMethod), targetThis, ___fromAction0, ___deviceConnected1);
					else
						VirtActionInvoker2< SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, bool >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), targetThis, ___fromAction0, ___deviceConnected1);
				}
			}
			else
			{
				if (targetThis == NULL && il2cpp_codegen_class_is_value_type(il2cpp_codegen_method_get_declaring_type(targetMethod)))
				{
					typedef void (*FunctionPointerType) (RuntimeObject*, bool, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)((reinterpret_cast<RuntimeObject*>(___fromAction0) - 1), ___deviceConnected1, targetMethod);
				}
				if (targetThis == NULL)
				{
					typedef void (*FunctionPointerType) (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, bool, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)(___fromAction0, ___deviceConnected1, targetMethod);
				}
				else
				{
					typedef void (*FunctionPointerType) (void*, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, bool, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)(targetThis, ___fromAction0, ___deviceConnected1, targetMethod);
				}
			}
		}
	}
}
// System.IAsyncResult Valve.VR.SteamVR_Action_Skeleton_DeviceConnectedChangeHandler::BeginInvoke(Valve.VR.SteamVR_Action_Skeleton,System.Boolean,System.AsyncCallback,System.Object)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RuntimeObject* DeviceConnectedChangeHandler_BeginInvoke_m822DAC3B254223500E283102B983C97D78333D10 (DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * __this, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * ___fromAction0, bool ___deviceConnected1, AsyncCallback_t3F3DA3BEDAEE81DD1D24125DF8EB30E85EE14DA4 * ___callback2, RuntimeObject * ___object3, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (DeviceConnectedChangeHandler_BeginInvoke_m822DAC3B254223500E283102B983C97D78333D10_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	void *__d_args[3] = {0};
	__d_args[0] = ___fromAction0;
	__d_args[1] = Box(Boolean_tB53F6830F670160873277339AA58F15CAED4399C_il2cpp_TypeInfo_var, &___deviceConnected1);
	return (RuntimeObject*)il2cpp_codegen_delegate_begin_invoke((RuntimeDelegate*)__this, __d_args, (RuntimeDelegate*)___callback2, (RuntimeObject*)___object3);
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_DeviceConnectedChangeHandler::EndInvoke(System.IAsyncResult)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void DeviceConnectedChangeHandler_EndInvoke_m9C8C7CB352AF10873059A2BA7F289B5E85030F00 (DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * __this, RuntimeObject* ___result0, const RuntimeMethod* method)
{
	il2cpp_codegen_delegate_end_invoke((Il2CppAsyncResult*) ___result0, 0);
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Void Valve.VR.SteamVR_Action_Skeleton_TrackingChangeHandler::.ctor(System.Object,System.IntPtr)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void TrackingChangeHandler__ctor_m6669C85631291CBFDD37E8F72F923C1BB4EFBDA5 (TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * __this, RuntimeObject * ___object0, intptr_t ___method1, const RuntimeMethod* method)
{
	__this->set_method_ptr_0(il2cpp_codegen_get_method_pointer((RuntimeMethod*)___method1));
	__this->set_method_3(___method1);
	__this->set_m_target_2(___object0);
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_TrackingChangeHandler::Invoke(Valve.VR.SteamVR_Action_Skeleton,Valve.VR.ETrackingResult)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void TrackingChangeHandler_Invoke_m1F5CBD749F6D72B0368116228975ED75A322FAF9 (TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * __this, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * ___fromAction0, int32_t ___trackingState1, const RuntimeMethod* method)
{
	DelegateU5BU5D_tDFCDEE2A6322F96C0FE49AF47E9ADB8C4B294E86* delegateArrayToInvoke = __this->get_delegates_11();
	Delegate_t** delegatesToInvoke;
	il2cpp_array_size_t length;
	if (delegateArrayToInvoke != NULL)
	{
		length = delegateArrayToInvoke->max_length;
		delegatesToInvoke = reinterpret_cast<Delegate_t**>(delegateArrayToInvoke->GetAddressAtUnchecked(0));
	}
	else
	{
		length = 1;
		delegatesToInvoke = reinterpret_cast<Delegate_t**>(&__this);
	}

	for (il2cpp_array_size_t i = 0; i < length; i++)
	{
		Delegate_t* currentDelegate = delegatesToInvoke[i];
		Il2CppMethodPointer targetMethodPointer = currentDelegate->get_method_ptr_0();
		RuntimeObject* targetThis = currentDelegate->get_m_target_2();
		RuntimeMethod* targetMethod = (RuntimeMethod*)(currentDelegate->get_method_3());
		if (!il2cpp_codegen_method_is_virtual(targetMethod))
		{
			il2cpp_codegen_raise_execution_engine_exception_if_method_is_not_found(targetMethod);
		}
		bool ___methodIsStatic = MethodIsStatic(targetMethod);
		int ___parameterCount = il2cpp_codegen_method_parameter_count(targetMethod);
		if (___methodIsStatic)
		{
			if (___parameterCount == 2)
			{
				// open
				typedef void (*FunctionPointerType) (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, int32_t, const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(___fromAction0, ___trackingState1, targetMethod);
			}
			else
			{
				// closed
				typedef void (*FunctionPointerType) (void*, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, int32_t, const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(targetThis, ___fromAction0, ___trackingState1, targetMethod);
			}
		}
		else if (___parameterCount != 2)
		{
			// open
			if (il2cpp_codegen_method_is_virtual(targetMethod) && il2cpp_codegen_delegate_has_invoker((Il2CppDelegate*)__this))
			{
				if (il2cpp_codegen_method_is_generic_instance(targetMethod))
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						GenericInterfaceActionInvoker1< int32_t >::Invoke(targetMethod, ___fromAction0, ___trackingState1);
					else
						GenericVirtActionInvoker1< int32_t >::Invoke(targetMethod, ___fromAction0, ___trackingState1);
				}
				else
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						InterfaceActionInvoker1< int32_t >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), il2cpp_codegen_method_get_declaring_type(targetMethod), ___fromAction0, ___trackingState1);
					else
						VirtActionInvoker1< int32_t >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), ___fromAction0, ___trackingState1);
				}
			}
			else
			{
				if (targetThis == NULL && il2cpp_codegen_class_is_value_type(il2cpp_codegen_method_get_declaring_type(targetMethod)))
				{
					typedef void (*FunctionPointerType) (RuntimeObject*, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)((reinterpret_cast<RuntimeObject*>(&___trackingState1) - 1), targetMethod);
				}
				typedef void (*FunctionPointerType) (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, int32_t, const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(___fromAction0, ___trackingState1, targetMethod);
			}
		}
		else
		{
			// closed
			if (targetThis != NULL && il2cpp_codegen_method_is_virtual(targetMethod) && !il2cpp_codegen_object_is_of_sealed_type(targetThis) && il2cpp_codegen_delegate_has_invoker((Il2CppDelegate*)__this))
			{
				if (il2cpp_codegen_method_is_generic_instance(targetMethod))
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						GenericInterfaceActionInvoker2< SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, int32_t >::Invoke(targetMethod, targetThis, ___fromAction0, ___trackingState1);
					else
						GenericVirtActionInvoker2< SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, int32_t >::Invoke(targetMethod, targetThis, ___fromAction0, ___trackingState1);
				}
				else
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						InterfaceActionInvoker2< SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, int32_t >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), il2cpp_codegen_method_get_declaring_type(targetMethod), targetThis, ___fromAction0, ___trackingState1);
					else
						VirtActionInvoker2< SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, int32_t >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), targetThis, ___fromAction0, ___trackingState1);
				}
			}
			else
			{
				if (targetThis == NULL && il2cpp_codegen_class_is_value_type(il2cpp_codegen_method_get_declaring_type(targetMethod)))
				{
					typedef void (*FunctionPointerType) (RuntimeObject*, int32_t, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)((reinterpret_cast<RuntimeObject*>(___fromAction0) - 1), ___trackingState1, targetMethod);
				}
				if (targetThis == NULL)
				{
					typedef void (*FunctionPointerType) (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, int32_t, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)(___fromAction0, ___trackingState1, targetMethod);
				}
				else
				{
					typedef void (*FunctionPointerType) (void*, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, int32_t, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)(targetThis, ___fromAction0, ___trackingState1, targetMethod);
				}
			}
		}
	}
}
// System.IAsyncResult Valve.VR.SteamVR_Action_Skeleton_TrackingChangeHandler::BeginInvoke(Valve.VR.SteamVR_Action_Skeleton,Valve.VR.ETrackingResult,System.AsyncCallback,System.Object)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RuntimeObject* TrackingChangeHandler_BeginInvoke_m9817EC8D7AAF0FA43430700B83DD1F976D5C8242 (TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * __this, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * ___fromAction0, int32_t ___trackingState1, AsyncCallback_t3F3DA3BEDAEE81DD1D24125DF8EB30E85EE14DA4 * ___callback2, RuntimeObject * ___object3, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (TrackingChangeHandler_BeginInvoke_m9817EC8D7AAF0FA43430700B83DD1F976D5C8242_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	void *__d_args[3] = {0};
	__d_args[0] = ___fromAction0;
	__d_args[1] = Box(ETrackingResult_t989C2212A7DBCBBF86EA2C1E776BC60223B3126E_il2cpp_TypeInfo_var, &___trackingState1);
	return (RuntimeObject*)il2cpp_codegen_delegate_begin_invoke((RuntimeDelegate*)__this, __d_args, (RuntimeDelegate*)___callback2, (RuntimeObject*)___object3);
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_TrackingChangeHandler::EndInvoke(System.IAsyncResult)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void TrackingChangeHandler_EndInvoke_m1763C922FC594B7127DD40E8D303C471BF267EEC (TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * __this, RuntimeObject* ___result0, const RuntimeMethod* method)
{
	il2cpp_codegen_delegate_end_invoke((Il2CppAsyncResult*) ___result0, 0);
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Void Valve.VR.SteamVR_Action_Skeleton_UpdateHandler::.ctor(System.Object,System.IntPtr)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void UpdateHandler__ctor_m3E83F7021640EAC0B1E5CFAF739959D3695FF5B1 (UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * __this, RuntimeObject * ___object0, intptr_t ___method1, const RuntimeMethod* method)
{
	__this->set_method_ptr_0(il2cpp_codegen_get_method_pointer((RuntimeMethod*)___method1));
	__this->set_method_3(___method1);
	__this->set_m_target_2(___object0);
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_UpdateHandler::Invoke(Valve.VR.SteamVR_Action_Skeleton)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void UpdateHandler_Invoke_mF1980FE6994D9662F4BAC4C3FB5DB38A1DD1FF29 (UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * __this, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * ___fromAction0, const RuntimeMethod* method)
{
	DelegateU5BU5D_tDFCDEE2A6322F96C0FE49AF47E9ADB8C4B294E86* delegateArrayToInvoke = __this->get_delegates_11();
	Delegate_t** delegatesToInvoke;
	il2cpp_array_size_t length;
	if (delegateArrayToInvoke != NULL)
	{
		length = delegateArrayToInvoke->max_length;
		delegatesToInvoke = reinterpret_cast<Delegate_t**>(delegateArrayToInvoke->GetAddressAtUnchecked(0));
	}
	else
	{
		length = 1;
		delegatesToInvoke = reinterpret_cast<Delegate_t**>(&__this);
	}

	for (il2cpp_array_size_t i = 0; i < length; i++)
	{
		Delegate_t* currentDelegate = delegatesToInvoke[i];
		Il2CppMethodPointer targetMethodPointer = currentDelegate->get_method_ptr_0();
		RuntimeObject* targetThis = currentDelegate->get_m_target_2();
		RuntimeMethod* targetMethod = (RuntimeMethod*)(currentDelegate->get_method_3());
		if (!il2cpp_codegen_method_is_virtual(targetMethod))
		{
			il2cpp_codegen_raise_execution_engine_exception_if_method_is_not_found(targetMethod);
		}
		bool ___methodIsStatic = MethodIsStatic(targetMethod);
		int ___parameterCount = il2cpp_codegen_method_parameter_count(targetMethod);
		if (___methodIsStatic)
		{
			if (___parameterCount == 1)
			{
				// open
				typedef void (*FunctionPointerType) (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(___fromAction0, targetMethod);
			}
			else
			{
				// closed
				typedef void (*FunctionPointerType) (void*, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(targetThis, ___fromAction0, targetMethod);
			}
		}
		else if (___parameterCount != 1)
		{
			// open
			if (il2cpp_codegen_method_is_virtual(targetMethod) && il2cpp_codegen_delegate_has_invoker((Il2CppDelegate*)__this))
			{
				if (il2cpp_codegen_method_is_generic_instance(targetMethod))
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						GenericInterfaceActionInvoker0::Invoke(targetMethod, ___fromAction0);
					else
						GenericVirtActionInvoker0::Invoke(targetMethod, ___fromAction0);
				}
				else
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						InterfaceActionInvoker0::Invoke(il2cpp_codegen_method_get_slot(targetMethod), il2cpp_codegen_method_get_declaring_type(targetMethod), ___fromAction0);
					else
						VirtActionInvoker0::Invoke(il2cpp_codegen_method_get_slot(targetMethod), ___fromAction0);
				}
			}
			else
			{
				typedef void (*FunctionPointerType) (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(___fromAction0, targetMethod);
			}
		}
		else
		{
			// closed
			if (targetThis != NULL && il2cpp_codegen_method_is_virtual(targetMethod) && !il2cpp_codegen_object_is_of_sealed_type(targetThis) && il2cpp_codegen_delegate_has_invoker((Il2CppDelegate*)__this))
			{
				if (il2cpp_codegen_method_is_generic_instance(targetMethod))
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						GenericInterfaceActionInvoker1< SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * >::Invoke(targetMethod, targetThis, ___fromAction0);
					else
						GenericVirtActionInvoker1< SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * >::Invoke(targetMethod, targetThis, ___fromAction0);
				}
				else
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						InterfaceActionInvoker1< SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), il2cpp_codegen_method_get_declaring_type(targetMethod), targetThis, ___fromAction0);
					else
						VirtActionInvoker1< SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), targetThis, ___fromAction0);
				}
			}
			else
			{
				if (targetThis == NULL && il2cpp_codegen_class_is_value_type(il2cpp_codegen_method_get_declaring_type(targetMethod)))
				{
					typedef void (*FunctionPointerType) (RuntimeObject*, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)((reinterpret_cast<RuntimeObject*>(___fromAction0) - 1), targetMethod);
				}
				if (targetThis == NULL)
				{
					typedef void (*FunctionPointerType) (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)(___fromAction0, targetMethod);
				}
				else
				{
					typedef void (*FunctionPointerType) (void*, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)(targetThis, ___fromAction0, targetMethod);
				}
			}
		}
	}
}
// System.IAsyncResult Valve.VR.SteamVR_Action_Skeleton_UpdateHandler::BeginInvoke(Valve.VR.SteamVR_Action_Skeleton,System.AsyncCallback,System.Object)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RuntimeObject* UpdateHandler_BeginInvoke_m054D14B07491450FF3F0DFE6EE15A121F850C695 (UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * __this, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * ___fromAction0, AsyncCallback_t3F3DA3BEDAEE81DD1D24125DF8EB30E85EE14DA4 * ___callback1, RuntimeObject * ___object2, const RuntimeMethod* method)
{
	void *__d_args[2] = {0};
	__d_args[0] = ___fromAction0;
	return (RuntimeObject*)il2cpp_codegen_delegate_begin_invoke((RuntimeDelegate*)__this, __d_args, (RuntimeDelegate*)___callback1, (RuntimeObject*)___object2);
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_UpdateHandler::EndInvoke(System.IAsyncResult)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void UpdateHandler_EndInvoke_m296DE353BFA3A2D8B88177315D3095A388729149 (UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * __this, RuntimeObject* ___result0, const RuntimeMethod* method)
{
	il2cpp_codegen_delegate_end_invoke((Il2CppAsyncResult*) ___result0, 0);
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Void Valve.VR.SteamVR_Action_Skeleton_ValidPoseChangeHandler::.ctor(System.Object,System.IntPtr)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ValidPoseChangeHandler__ctor_mD7B232F12363616301CEA8FDBB39A363C755DB55 (ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * __this, RuntimeObject * ___object0, intptr_t ___method1, const RuntimeMethod* method)
{
	__this->set_method_ptr_0(il2cpp_codegen_get_method_pointer((RuntimeMethod*)___method1));
	__this->set_method_3(___method1);
	__this->set_m_target_2(___object0);
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_ValidPoseChangeHandler::Invoke(Valve.VR.SteamVR_Action_Skeleton,System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ValidPoseChangeHandler_Invoke_mD8DAEE4D2F6111ED348DE9E66E194F66E2E89024 (ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * __this, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * ___fromAction0, bool ___validPose1, const RuntimeMethod* method)
{
	DelegateU5BU5D_tDFCDEE2A6322F96C0FE49AF47E9ADB8C4B294E86* delegateArrayToInvoke = __this->get_delegates_11();
	Delegate_t** delegatesToInvoke;
	il2cpp_array_size_t length;
	if (delegateArrayToInvoke != NULL)
	{
		length = delegateArrayToInvoke->max_length;
		delegatesToInvoke = reinterpret_cast<Delegate_t**>(delegateArrayToInvoke->GetAddressAtUnchecked(0));
	}
	else
	{
		length = 1;
		delegatesToInvoke = reinterpret_cast<Delegate_t**>(&__this);
	}

	for (il2cpp_array_size_t i = 0; i < length; i++)
	{
		Delegate_t* currentDelegate = delegatesToInvoke[i];
		Il2CppMethodPointer targetMethodPointer = currentDelegate->get_method_ptr_0();
		RuntimeObject* targetThis = currentDelegate->get_m_target_2();
		RuntimeMethod* targetMethod = (RuntimeMethod*)(currentDelegate->get_method_3());
		if (!il2cpp_codegen_method_is_virtual(targetMethod))
		{
			il2cpp_codegen_raise_execution_engine_exception_if_method_is_not_found(targetMethod);
		}
		bool ___methodIsStatic = MethodIsStatic(targetMethod);
		int ___parameterCount = il2cpp_codegen_method_parameter_count(targetMethod);
		if (___methodIsStatic)
		{
			if (___parameterCount == 2)
			{
				// open
				typedef void (*FunctionPointerType) (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, bool, const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(___fromAction0, ___validPose1, targetMethod);
			}
			else
			{
				// closed
				typedef void (*FunctionPointerType) (void*, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, bool, const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(targetThis, ___fromAction0, ___validPose1, targetMethod);
			}
		}
		else if (___parameterCount != 2)
		{
			// open
			if (il2cpp_codegen_method_is_virtual(targetMethod) && il2cpp_codegen_delegate_has_invoker((Il2CppDelegate*)__this))
			{
				if (il2cpp_codegen_method_is_generic_instance(targetMethod))
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						GenericInterfaceActionInvoker1< bool >::Invoke(targetMethod, ___fromAction0, ___validPose1);
					else
						GenericVirtActionInvoker1< bool >::Invoke(targetMethod, ___fromAction0, ___validPose1);
				}
				else
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						InterfaceActionInvoker1< bool >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), il2cpp_codegen_method_get_declaring_type(targetMethod), ___fromAction0, ___validPose1);
					else
						VirtActionInvoker1< bool >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), ___fromAction0, ___validPose1);
				}
			}
			else
			{
				if (targetThis == NULL && il2cpp_codegen_class_is_value_type(il2cpp_codegen_method_get_declaring_type(targetMethod)))
				{
					typedef void (*FunctionPointerType) (RuntimeObject*, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)((reinterpret_cast<RuntimeObject*>(&___validPose1) - 1), targetMethod);
				}
				typedef void (*FunctionPointerType) (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, bool, const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(___fromAction0, ___validPose1, targetMethod);
			}
		}
		else
		{
			// closed
			if (targetThis != NULL && il2cpp_codegen_method_is_virtual(targetMethod) && !il2cpp_codegen_object_is_of_sealed_type(targetThis) && il2cpp_codegen_delegate_has_invoker((Il2CppDelegate*)__this))
			{
				if (il2cpp_codegen_method_is_generic_instance(targetMethod))
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						GenericInterfaceActionInvoker2< SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, bool >::Invoke(targetMethod, targetThis, ___fromAction0, ___validPose1);
					else
						GenericVirtActionInvoker2< SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, bool >::Invoke(targetMethod, targetThis, ___fromAction0, ___validPose1);
				}
				else
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						InterfaceActionInvoker2< SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, bool >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), il2cpp_codegen_method_get_declaring_type(targetMethod), targetThis, ___fromAction0, ___validPose1);
					else
						VirtActionInvoker2< SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, bool >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), targetThis, ___fromAction0, ___validPose1);
				}
			}
			else
			{
				if (targetThis == NULL && il2cpp_codegen_class_is_value_type(il2cpp_codegen_method_get_declaring_type(targetMethod)))
				{
					typedef void (*FunctionPointerType) (RuntimeObject*, bool, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)((reinterpret_cast<RuntimeObject*>(___fromAction0) - 1), ___validPose1, targetMethod);
				}
				if (targetThis == NULL)
				{
					typedef void (*FunctionPointerType) (SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, bool, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)(___fromAction0, ___validPose1, targetMethod);
				}
				else
				{
					typedef void (*FunctionPointerType) (void*, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *, bool, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)(targetThis, ___fromAction0, ___validPose1, targetMethod);
				}
			}
		}
	}
}
// System.IAsyncResult Valve.VR.SteamVR_Action_Skeleton_ValidPoseChangeHandler::BeginInvoke(Valve.VR.SteamVR_Action_Skeleton,System.Boolean,System.AsyncCallback,System.Object)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RuntimeObject* ValidPoseChangeHandler_BeginInvoke_m3BEFCC52268F783010319929B644B5D756E0D1C6 (ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * __this, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * ___fromAction0, bool ___validPose1, AsyncCallback_t3F3DA3BEDAEE81DD1D24125DF8EB30E85EE14DA4 * ___callback2, RuntimeObject * ___object3, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ValidPoseChangeHandler_BeginInvoke_m3BEFCC52268F783010319929B644B5D756E0D1C6_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	void *__d_args[3] = {0};
	__d_args[0] = ___fromAction0;
	__d_args[1] = Box(Boolean_tB53F6830F670160873277339AA58F15CAED4399C_il2cpp_TypeInfo_var, &___validPose1);
	return (RuntimeObject*)il2cpp_codegen_delegate_begin_invoke((RuntimeDelegate*)__this, __d_args, (RuntimeDelegate*)___callback2, (RuntimeObject*)___object3);
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_ValidPoseChangeHandler::EndInvoke(System.IAsyncResult)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ValidPoseChangeHandler_EndInvoke_mB220001C63CE909A46115EE79CB9E9468E1E95B8 (ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * __this, RuntimeObject* ___result0, const RuntimeMethod* method)
{
	il2cpp_codegen_delegate_end_invoke((Il2CppAsyncResult*) ___result0, 0);
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::add_onActiveChange(Valve.VR.SteamVR_Action_Skeleton_ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_add_onActiveChange_mE0FC38C5C6749C482B67CA8FC2017969A0BE37F6 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_add_onActiveChange_mE0FC38C5C6749C482B67CA8FC2017969A0BE37F6_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * V_0 = NULL;
	ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * V_1 = NULL;
	ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_add_onActiveChange_mE0FC38C5C6749C482B67CA8FC2017969A0BE37F6_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_0 = __this->get_onActiveChange_37();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_1 = V_0;
		V_1 = L_1;
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_2 = V_1;
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Combine_mC25D2F7DECAFBA6D9A2F9EBA8A77063F0658ECF1(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 *)CastclassSealed((RuntimeObject*)L_4, ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4_il2cpp_TypeInfo_var));
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 ** L_5 = __this->get_address_of_onActiveChange_37();
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_6 = V_2;
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_7 = V_1;
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_8 = InterlockedCompareExchangeImpl<ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 *>((ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 **)L_5, L_6, L_7);
		V_0 = L_8;
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_9 = V_0;
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_10 = V_1;
		if ((!(((RuntimeObject*)(ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 *)L_9) == ((RuntimeObject*)(ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::remove_onActiveChange(Valve.VR.SteamVR_Action_Skeleton_ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_remove_onActiveChange_m02B106748649E99F649EC24789D36D5DB0577965 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_remove_onActiveChange_m02B106748649E99F649EC24789D36D5DB0577965_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * V_0 = NULL;
	ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * V_1 = NULL;
	ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_remove_onActiveChange_m02B106748649E99F649EC24789D36D5DB0577965_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_0 = __this->get_onActiveChange_37();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_1 = V_0;
		V_1 = L_1;
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_2 = V_1;
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Remove_m0B0DB7D1B3AF96B71AFAA72BA0EFE32FBBC2932D(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 *)CastclassSealed((RuntimeObject*)L_4, ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4_il2cpp_TypeInfo_var));
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 ** L_5 = __this->get_address_of_onActiveChange_37();
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_6 = V_2;
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_7 = V_1;
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_8 = InterlockedCompareExchangeImpl<ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 *>((ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 **)L_5, L_6, L_7);
		V_0 = L_8;
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_9 = V_0;
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_10 = V_1;
		if ((!(((RuntimeObject*)(ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 *)L_9) == ((RuntimeObject*)(ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::add_onActiveBindingChange(Valve.VR.SteamVR_Action_Skeleton_ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_add_onActiveBindingChange_m4DC3513C7C9507997D9D34F1A514F152B2D38CFA (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_add_onActiveBindingChange_m4DC3513C7C9507997D9D34F1A514F152B2D38CFA_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * V_0 = NULL;
	ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * V_1 = NULL;
	ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_add_onActiveBindingChange_m4DC3513C7C9507997D9D34F1A514F152B2D38CFA_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_0 = __this->get_onActiveBindingChange_38();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_1 = V_0;
		V_1 = L_1;
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_2 = V_1;
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Combine_mC25D2F7DECAFBA6D9A2F9EBA8A77063F0658ECF1(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 *)CastclassSealed((RuntimeObject*)L_4, ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4_il2cpp_TypeInfo_var));
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 ** L_5 = __this->get_address_of_onActiveBindingChange_38();
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_6 = V_2;
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_7 = V_1;
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_8 = InterlockedCompareExchangeImpl<ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 *>((ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 **)L_5, L_6, L_7);
		V_0 = L_8;
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_9 = V_0;
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_10 = V_1;
		if ((!(((RuntimeObject*)(ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 *)L_9) == ((RuntimeObject*)(ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::remove_onActiveBindingChange(Valve.VR.SteamVR_Action_Skeleton_ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_remove_onActiveBindingChange_m8B778606DA02C1FB1A23C1A955951094E261F2AF (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_remove_onActiveBindingChange_m8B778606DA02C1FB1A23C1A955951094E261F2AF_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * V_0 = NULL;
	ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * V_1 = NULL;
	ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_remove_onActiveBindingChange_m8B778606DA02C1FB1A23C1A955951094E261F2AF_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_0 = __this->get_onActiveBindingChange_38();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_1 = V_0;
		V_1 = L_1;
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_2 = V_1;
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Remove_m0B0DB7D1B3AF96B71AFAA72BA0EFE32FBBC2932D(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 *)CastclassSealed((RuntimeObject*)L_4, ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4_il2cpp_TypeInfo_var));
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 ** L_5 = __this->get_address_of_onActiveBindingChange_38();
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_6 = V_2;
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_7 = V_1;
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_8 = InterlockedCompareExchangeImpl<ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 *>((ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 **)L_5, L_6, L_7);
		V_0 = L_8;
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_9 = V_0;
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_10 = V_1;
		if ((!(((RuntimeObject*)(ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 *)L_9) == ((RuntimeObject*)(ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::add_onChange(Valve.VR.SteamVR_Action_Skeleton_ChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_add_onChange_m36F08DE1097970DE49B839792F1935A218E92ADA (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_add_onChange_m36F08DE1097970DE49B839792F1935A218E92ADA_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * V_0 = NULL;
	ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * V_1 = NULL;
	ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_add_onChange_m36F08DE1097970DE49B839792F1935A218E92ADA_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * L_0 = __this->get_onChange_39();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * L_1 = V_0;
		V_1 = L_1;
		ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * L_2 = V_1;
		ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Combine_mC25D2F7DECAFBA6D9A2F9EBA8A77063F0658ECF1(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 *)CastclassSealed((RuntimeObject*)L_4, ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7_il2cpp_TypeInfo_var));
		ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 ** L_5 = __this->get_address_of_onChange_39();
		ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * L_6 = V_2;
		ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * L_7 = V_1;
		ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * L_8 = InterlockedCompareExchangeImpl<ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 *>((ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 **)L_5, L_6, L_7);
		V_0 = L_8;
		ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * L_9 = V_0;
		ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * L_10 = V_1;
		if ((!(((RuntimeObject*)(ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 *)L_9) == ((RuntimeObject*)(ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::remove_onChange(Valve.VR.SteamVR_Action_Skeleton_ChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_remove_onChange_m9AE202076C862455102381B3DD4AA5E98D8E7DB0 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_remove_onChange_m9AE202076C862455102381B3DD4AA5E98D8E7DB0_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * V_0 = NULL;
	ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * V_1 = NULL;
	ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_remove_onChange_m9AE202076C862455102381B3DD4AA5E98D8E7DB0_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * L_0 = __this->get_onChange_39();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * L_1 = V_0;
		V_1 = L_1;
		ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * L_2 = V_1;
		ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Remove_m0B0DB7D1B3AF96B71AFAA72BA0EFE32FBBC2932D(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 *)CastclassSealed((RuntimeObject*)L_4, ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7_il2cpp_TypeInfo_var));
		ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 ** L_5 = __this->get_address_of_onChange_39();
		ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * L_6 = V_2;
		ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * L_7 = V_1;
		ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * L_8 = InterlockedCompareExchangeImpl<ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 *>((ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 **)L_5, L_6, L_7);
		V_0 = L_8;
		ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * L_9 = V_0;
		ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * L_10 = V_1;
		if ((!(((RuntimeObject*)(ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 *)L_9) == ((RuntimeObject*)(ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::add_onUpdate(Valve.VR.SteamVR_Action_Skeleton_UpdateHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_add_onUpdate_m7E46F0BA1CFA58A2B4CD7E9937AF913E21B597E4 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_add_onUpdate_m7E46F0BA1CFA58A2B4CD7E9937AF913E21B597E4_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * V_0 = NULL;
	UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * V_1 = NULL;
	UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_add_onUpdate_m7E46F0BA1CFA58A2B4CD7E9937AF913E21B597E4_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * L_0 = __this->get_onUpdate_40();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * L_1 = V_0;
		V_1 = L_1;
		UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * L_2 = V_1;
		UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Combine_mC25D2F7DECAFBA6D9A2F9EBA8A77063F0658ECF1(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 *)CastclassSealed((RuntimeObject*)L_4, UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046_il2cpp_TypeInfo_var));
		UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 ** L_5 = __this->get_address_of_onUpdate_40();
		UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * L_6 = V_2;
		UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * L_7 = V_1;
		UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * L_8 = InterlockedCompareExchangeImpl<UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 *>((UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 **)L_5, L_6, L_7);
		V_0 = L_8;
		UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * L_9 = V_0;
		UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * L_10 = V_1;
		if ((!(((RuntimeObject*)(UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 *)L_9) == ((RuntimeObject*)(UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::remove_onUpdate(Valve.VR.SteamVR_Action_Skeleton_UpdateHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_remove_onUpdate_m3DAC62A7DE38AF1BA67D76654BDC0CECB0296FAF (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_remove_onUpdate_m3DAC62A7DE38AF1BA67D76654BDC0CECB0296FAF_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * V_0 = NULL;
	UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * V_1 = NULL;
	UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_remove_onUpdate_m3DAC62A7DE38AF1BA67D76654BDC0CECB0296FAF_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * L_0 = __this->get_onUpdate_40();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * L_1 = V_0;
		V_1 = L_1;
		UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * L_2 = V_1;
		UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Remove_m0B0DB7D1B3AF96B71AFAA72BA0EFE32FBBC2932D(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 *)CastclassSealed((RuntimeObject*)L_4, UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046_il2cpp_TypeInfo_var));
		UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 ** L_5 = __this->get_address_of_onUpdate_40();
		UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * L_6 = V_2;
		UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * L_7 = V_1;
		UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * L_8 = InterlockedCompareExchangeImpl<UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 *>((UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 **)L_5, L_6, L_7);
		V_0 = L_8;
		UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * L_9 = V_0;
		UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * L_10 = V_1;
		if ((!(((RuntimeObject*)(UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 *)L_9) == ((RuntimeObject*)(UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::add_onTrackingChanged(Valve.VR.SteamVR_Action_Skeleton_TrackingChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_add_onTrackingChanged_m1214E513861191327AAAF65D11DDA8E978F2EAD0 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_add_onTrackingChanged_m1214E513861191327AAAF65D11DDA8E978F2EAD0_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * V_0 = NULL;
	TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * V_1 = NULL;
	TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_add_onTrackingChanged_m1214E513861191327AAAF65D11DDA8E978F2EAD0_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * L_0 = __this->get_onTrackingChanged_41();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * L_1 = V_0;
		V_1 = L_1;
		TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * L_2 = V_1;
		TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Combine_mC25D2F7DECAFBA6D9A2F9EBA8A77063F0658ECF1(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 *)CastclassSealed((RuntimeObject*)L_4, TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4_il2cpp_TypeInfo_var));
		TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 ** L_5 = __this->get_address_of_onTrackingChanged_41();
		TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * L_6 = V_2;
		TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * L_7 = V_1;
		TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * L_8 = InterlockedCompareExchangeImpl<TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 *>((TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 **)L_5, L_6, L_7);
		V_0 = L_8;
		TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * L_9 = V_0;
		TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * L_10 = V_1;
		if ((!(((RuntimeObject*)(TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 *)L_9) == ((RuntimeObject*)(TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::remove_onTrackingChanged(Valve.VR.SteamVR_Action_Skeleton_TrackingChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_remove_onTrackingChanged_mD1990275D9A505E92742B063863D9F1BE96BFDB0 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_remove_onTrackingChanged_mD1990275D9A505E92742B063863D9F1BE96BFDB0_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * V_0 = NULL;
	TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * V_1 = NULL;
	TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_remove_onTrackingChanged_mD1990275D9A505E92742B063863D9F1BE96BFDB0_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * L_0 = __this->get_onTrackingChanged_41();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * L_1 = V_0;
		V_1 = L_1;
		TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * L_2 = V_1;
		TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Remove_m0B0DB7D1B3AF96B71AFAA72BA0EFE32FBBC2932D(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 *)CastclassSealed((RuntimeObject*)L_4, TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4_il2cpp_TypeInfo_var));
		TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 ** L_5 = __this->get_address_of_onTrackingChanged_41();
		TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * L_6 = V_2;
		TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * L_7 = V_1;
		TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * L_8 = InterlockedCompareExchangeImpl<TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 *>((TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 **)L_5, L_6, L_7);
		V_0 = L_8;
		TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * L_9 = V_0;
		TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * L_10 = V_1;
		if ((!(((RuntimeObject*)(TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 *)L_9) == ((RuntimeObject*)(TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::add_onValidPoseChanged(Valve.VR.SteamVR_Action_Skeleton_ValidPoseChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_add_onValidPoseChanged_m2A4D3F3E5FEFDD0ACBBCA7018AD94DF8EDA37A24 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_add_onValidPoseChanged_m2A4D3F3E5FEFDD0ACBBCA7018AD94DF8EDA37A24_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * V_0 = NULL;
	ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * V_1 = NULL;
	ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_add_onValidPoseChanged_m2A4D3F3E5FEFDD0ACBBCA7018AD94DF8EDA37A24_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * L_0 = __this->get_onValidPoseChanged_42();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * L_1 = V_0;
		V_1 = L_1;
		ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * L_2 = V_1;
		ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Combine_mC25D2F7DECAFBA6D9A2F9EBA8A77063F0658ECF1(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 *)CastclassSealed((RuntimeObject*)L_4, ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7_il2cpp_TypeInfo_var));
		ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 ** L_5 = __this->get_address_of_onValidPoseChanged_42();
		ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * L_6 = V_2;
		ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * L_7 = V_1;
		ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * L_8 = InterlockedCompareExchangeImpl<ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 *>((ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 **)L_5, L_6, L_7);
		V_0 = L_8;
		ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * L_9 = V_0;
		ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * L_10 = V_1;
		if ((!(((RuntimeObject*)(ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 *)L_9) == ((RuntimeObject*)(ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::remove_onValidPoseChanged(Valve.VR.SteamVR_Action_Skeleton_ValidPoseChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_remove_onValidPoseChanged_mA00A29139A1727456784ECF81C9009BAD9B2D8D0 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_remove_onValidPoseChanged_mA00A29139A1727456784ECF81C9009BAD9B2D8D0_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * V_0 = NULL;
	ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * V_1 = NULL;
	ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_remove_onValidPoseChanged_mA00A29139A1727456784ECF81C9009BAD9B2D8D0_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * L_0 = __this->get_onValidPoseChanged_42();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * L_1 = V_0;
		V_1 = L_1;
		ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * L_2 = V_1;
		ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Remove_m0B0DB7D1B3AF96B71AFAA72BA0EFE32FBBC2932D(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 *)CastclassSealed((RuntimeObject*)L_4, ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7_il2cpp_TypeInfo_var));
		ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 ** L_5 = __this->get_address_of_onValidPoseChanged_42();
		ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * L_6 = V_2;
		ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * L_7 = V_1;
		ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * L_8 = InterlockedCompareExchangeImpl<ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 *>((ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 **)L_5, L_6, L_7);
		V_0 = L_8;
		ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * L_9 = V_0;
		ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * L_10 = V_1;
		if ((!(((RuntimeObject*)(ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 *)L_9) == ((RuntimeObject*)(ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::add_onDeviceConnectedChanged(Valve.VR.SteamVR_Action_Skeleton_DeviceConnectedChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_add_onDeviceConnectedChanged_m65E5DE81AF451EF0B00E214FA8E5034E29FA3EC7 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_add_onDeviceConnectedChanged_m65E5DE81AF451EF0B00E214FA8E5034E29FA3EC7_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * V_0 = NULL;
	DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * V_1 = NULL;
	DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_add_onDeviceConnectedChanged_m65E5DE81AF451EF0B00E214FA8E5034E29FA3EC7_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * L_0 = __this->get_onDeviceConnectedChanged_43();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * L_1 = V_0;
		V_1 = L_1;
		DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * L_2 = V_1;
		DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Combine_mC25D2F7DECAFBA6D9A2F9EBA8A77063F0658ECF1(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 *)CastclassSealed((RuntimeObject*)L_4, DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592_il2cpp_TypeInfo_var));
		DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 ** L_5 = __this->get_address_of_onDeviceConnectedChanged_43();
		DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * L_6 = V_2;
		DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * L_7 = V_1;
		DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * L_8 = InterlockedCompareExchangeImpl<DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 *>((DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 **)L_5, L_6, L_7);
		V_0 = L_8;
		DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * L_9 = V_0;
		DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * L_10 = V_1;
		if ((!(((RuntimeObject*)(DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 *)L_9) == ((RuntimeObject*)(DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::remove_onDeviceConnectedChanged(Valve.VR.SteamVR_Action_Skeleton_DeviceConnectedChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_remove_onDeviceConnectedChanged_mB24005D6459F7B8D170E3445BF5B95405871AF13 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_remove_onDeviceConnectedChanged_mB24005D6459F7B8D170E3445BF5B95405871AF13_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * V_0 = NULL;
	DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * V_1 = NULL;
	DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_remove_onDeviceConnectedChanged_mB24005D6459F7B8D170E3445BF5B95405871AF13_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * L_0 = __this->get_onDeviceConnectedChanged_43();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * L_1 = V_0;
		V_1 = L_1;
		DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * L_2 = V_1;
		DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Remove_m0B0DB7D1B3AF96B71AFAA72BA0EFE32FBBC2932D(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 *)CastclassSealed((RuntimeObject*)L_4, DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592_il2cpp_TypeInfo_var));
		DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 ** L_5 = __this->get_address_of_onDeviceConnectedChanged_43();
		DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * L_6 = V_2;
		DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * L_7 = V_1;
		DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * L_8 = InterlockedCompareExchangeImpl<DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 *>((DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 **)L_5, L_6, L_7);
		V_0 = L_8;
		DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * L_9 = V_0;
		DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * L_10 = V_1;
		if ((!(((RuntimeObject*)(DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 *)L_9) == ((RuntimeObject*)(DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Boolean Valve.VR.SteamVR_Action_Skeleton_Source::get_activeBinding()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Skeleton_Source_get_activeBinding_m541AE099F07A8283CC85D9CDBAB6C52DF84935C6 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_activeBinding_m541AE099F07A8283CC85D9CDBAB6C52DF84935C6_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_activeBinding_m541AE099F07A8283CC85D9CDBAB6C52DF84935C6_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7293));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7294));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7295));
		// public override bool activeBinding { get { return skeletonActionData.bActive; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7296));
		InputSkeletalActionData_t_tA39C0A0FE4DBB8966D852B4FFC7D3A6D8F887430 * L_0 = __this->get_address_of_skeletonActionData_61();
		bool L_1 = L_0->get_bActive_0();
		V_0 = L_1;
		goto IL_000f;
	}

IL_000f:
	{
		// public override bool activeBinding { get { return skeletonActionData.bActive; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7297));
		bool L_2 = V_0;
		return L_2;
	}
}
// System.Boolean Valve.VR.SteamVR_Action_Skeleton_Source::get_lastActiveBinding()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Skeleton_Source_get_lastActiveBinding_mE814471BA5DA727D7AFC082907D4EA51AF0650C5 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_lastActiveBinding_mE814471BA5DA727D7AFC082907D4EA51AF0650C5_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_lastActiveBinding_mE814471BA5DA727D7AFC082907D4EA51AF0650C5_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7298));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7299));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7300));
		// public override bool lastActiveBinding { get { return lastSkeletonActionData.bActive; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7301));
		InputSkeletalActionData_t_tA39C0A0FE4DBB8966D852B4FFC7D3A6D8F887430 * L_0 = __this->get_address_of_lastSkeletonActionData_62();
		bool L_1 = L_0->get_bActive_0();
		V_0 = L_1;
		goto IL_000f;
	}

IL_000f:
	{
		// public override bool lastActiveBinding { get { return lastSkeletonActionData.bActive; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7302));
		bool L_2 = V_0;
		return L_2;
	}
}
// UnityEngine.Vector3[] Valve.VR.SteamVR_Action_Skeleton_Source::get_bonePositions()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* SteamVR_Action_Skeleton_Source_get_bonePositions_mA0C01DDB9EAB9749BBBEDBCFF72582812AB9C195 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_bonePositions_mA0C01DDB9EAB9749BBBEDBCFF72582812AB9C195_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_bonePositions_mA0C01DDB9EAB9749BBBEDBCFF72582812AB9C195_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7303));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7304));
	{
		// public Vector3[] bonePositions { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7305));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_0 = __this->get_U3CbonePositionsU3Ek__BackingField_44();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::set_bonePositions(UnityEngine.Vector3[])
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_bonePositions_m6E2F4BC8D0DB6C17A44D1DD390933B195C8F0BE7 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_set_bonePositions_m6E2F4BC8D0DB6C17A44D1DD390933B195C8F0BE7_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_set_bonePositions_m6E2F4BC8D0DB6C17A44D1DD390933B195C8F0BE7_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7306));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7307));
	{
		// public Vector3[] bonePositions { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7308));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_0 = ___value0;
		__this->set_U3CbonePositionsU3Ek__BackingField_44(L_0);
		return;
	}
}
// UnityEngine.Quaternion[] Valve.VR.SteamVR_Action_Skeleton_Source::get_boneRotations()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* SteamVR_Action_Skeleton_Source_get_boneRotations_mCD0B038517CA7A79945AD615082F05B25B0EDA20 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_boneRotations_mCD0B038517CA7A79945AD615082F05B25B0EDA20_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_boneRotations_mCD0B038517CA7A79945AD615082F05B25B0EDA20_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7309));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7310));
	{
		// public Quaternion[] boneRotations { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7311));
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_0 = __this->get_U3CboneRotationsU3Ek__BackingField_45();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::set_boneRotations(UnityEngine.Quaternion[])
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_boneRotations_m04DF922F78BEB4B48C610E5263CB5A56723BFE11 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_set_boneRotations_m04DF922F78BEB4B48C610E5263CB5A56723BFE11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_set_boneRotations_m04DF922F78BEB4B48C610E5263CB5A56723BFE11_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7312));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7313));
	{
		// public Quaternion[] boneRotations { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7314));
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_0 = ___value0;
		__this->set_U3CboneRotationsU3Ek__BackingField_45(L_0);
		return;
	}
}
// UnityEngine.Vector3[] Valve.VR.SteamVR_Action_Skeleton_Source::get_lastBonePositions()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* SteamVR_Action_Skeleton_Source_get_lastBonePositions_m99D1C7B8A05E646777AC85CFC0ED2FF0953C3AB9 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_lastBonePositions_m99D1C7B8A05E646777AC85CFC0ED2FF0953C3AB9_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_lastBonePositions_m99D1C7B8A05E646777AC85CFC0ED2FF0953C3AB9_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7315));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7316));
	{
		// public Vector3[] lastBonePositions { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7317));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_0 = __this->get_U3ClastBonePositionsU3Ek__BackingField_46();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::set_lastBonePositions(UnityEngine.Vector3[])
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_lastBonePositions_m7B9C3EC1294D432EBF5834AA2FD1518F398C771B (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_set_lastBonePositions_m7B9C3EC1294D432EBF5834AA2FD1518F398C771B_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_set_lastBonePositions_m7B9C3EC1294D432EBF5834AA2FD1518F398C771B_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7318));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7319));
	{
		// public Vector3[] lastBonePositions { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7320));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_0 = ___value0;
		__this->set_U3ClastBonePositionsU3Ek__BackingField_46(L_0);
		return;
	}
}
// UnityEngine.Quaternion[] Valve.VR.SteamVR_Action_Skeleton_Source::get_lastBoneRotations()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* SteamVR_Action_Skeleton_Source_get_lastBoneRotations_m14A98028FB99C0404733364FFD3C187D2A53261C (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_lastBoneRotations_m14A98028FB99C0404733364FFD3C187D2A53261C_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_lastBoneRotations_m14A98028FB99C0404733364FFD3C187D2A53261C_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7321));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7322));
	{
		// public Quaternion[] lastBoneRotations { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7323));
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_0 = __this->get_U3ClastBoneRotationsU3Ek__BackingField_47();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::set_lastBoneRotations(UnityEngine.Quaternion[])
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_lastBoneRotations_mAF79C76574CD9C644F280B1E5DCBF068D84C0C71 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_set_lastBoneRotations_mAF79C76574CD9C644F280B1E5DCBF068D84C0C71_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_set_lastBoneRotations_mAF79C76574CD9C644F280B1E5DCBF068D84C0C71_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7324));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7325));
	{
		// public Quaternion[] lastBoneRotations { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7326));
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_0 = ___value0;
		__this->set_U3ClastBoneRotationsU3Ek__BackingField_47(L_0);
		return;
	}
}
// Valve.VR.EVRSkeletalMotionRange Valve.VR.SteamVR_Action_Skeleton_Source::get_rangeOfMotion()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Skeleton_Source_get_rangeOfMotion_mCEFC5B01B736A3B6218C5C91A0AEF272FFD88B47 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_rangeOfMotion_mCEFC5B01B736A3B6218C5C91A0AEF272FFD88B47_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_rangeOfMotion_mCEFC5B01B736A3B6218C5C91A0AEF272FFD88B47_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7327));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7328));
	{
		// public EVRSkeletalMotionRange rangeOfMotion { get; set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7329));
		int32_t L_0 = __this->get_U3CrangeOfMotionU3Ek__BackingField_48();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::set_rangeOfMotion(Valve.VR.EVRSkeletalMotionRange)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_rangeOfMotion_m01A4338F1C4D57E5691A2F8EA861BAD76DA75619 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_set_rangeOfMotion_m01A4338F1C4D57E5691A2F8EA861BAD76DA75619_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_set_rangeOfMotion_m01A4338F1C4D57E5691A2F8EA861BAD76DA75619_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7330));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7331));
	{
		// public EVRSkeletalMotionRange rangeOfMotion { get; set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7332));
		int32_t L_0 = ___value0;
		__this->set_U3CrangeOfMotionU3Ek__BackingField_48(L_0);
		return;
	}
}
// Valve.VR.EVRSkeletalTransformSpace Valve.VR.SteamVR_Action_Skeleton_Source::get_skeletalTransformSpace()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Skeleton_Source_get_skeletalTransformSpace_m0D9D61CC1BC50CC7FA1F9AD5192FBC418009F3F3 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_skeletalTransformSpace_m0D9D61CC1BC50CC7FA1F9AD5192FBC418009F3F3_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_skeletalTransformSpace_m0D9D61CC1BC50CC7FA1F9AD5192FBC418009F3F3_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7333));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7334));
	{
		// public EVRSkeletalTransformSpace skeletalTransformSpace { get; set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7335));
		int32_t L_0 = __this->get_U3CskeletalTransformSpaceU3Ek__BackingField_49();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::set_skeletalTransformSpace(Valve.VR.EVRSkeletalTransformSpace)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_skeletalTransformSpace_m851FCD54C037B0D6CF78F14CBF0BF7B44EE86FA8 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_set_skeletalTransformSpace_m851FCD54C037B0D6CF78F14CBF0BF7B44EE86FA8_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_set_skeletalTransformSpace_m851FCD54C037B0D6CF78F14CBF0BF7B44EE86FA8_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7336));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7337));
	{
		// public EVRSkeletalTransformSpace skeletalTransformSpace { get; set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7338));
		int32_t L_0 = ___value0;
		__this->set_U3CskeletalTransformSpaceU3Ek__BackingField_49(L_0);
		return;
	}
}
// Valve.VR.EVRSummaryType Valve.VR.SteamVR_Action_Skeleton_Source::get_summaryDataType()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Skeleton_Source_get_summaryDataType_mE0AB648E0339C2A082B81B15AA2D97854E8BB8CC (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_summaryDataType_mE0AB648E0339C2A082B81B15AA2D97854E8BB8CC_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_summaryDataType_mE0AB648E0339C2A082B81B15AA2D97854E8BB8CC_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7339));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7340));
	{
		// public EVRSummaryType summaryDataType { get; set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7341));
		int32_t L_0 = __this->get_U3CsummaryDataTypeU3Ek__BackingField_50();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::set_summaryDataType(Valve.VR.EVRSummaryType)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_summaryDataType_m99B705C8282316AC52EBA3A718C998FE46329E1F (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_set_summaryDataType_m99B705C8282316AC52EBA3A718C998FE46329E1F_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_set_summaryDataType_m99B705C8282316AC52EBA3A718C998FE46329E1F_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7342));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7343));
	{
		// public EVRSummaryType summaryDataType { get; set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7344));
		int32_t L_0 = ___value0;
		__this->set_U3CsummaryDataTypeU3Ek__BackingField_50(L_0);
		return;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_thumbCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_thumbCurl_m7C48F880AFC6164499E9E23B8D1F413B4AC9A98E (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_thumbCurl_m7C48F880AFC6164499E9E23B8D1F413B4AC9A98E_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_thumbCurl_m7C48F880AFC6164499E9E23B8D1F413B4AC9A98E_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7345));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7346));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7347));
		// public float thumbCurl { get { return fingerCurls[SteamVR_Skeleton_FingerIndexes.thumb]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7348));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7350));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = SteamVR_Action_Skeleton_Source_get_fingerCurls_mD56D63D01414ED3D7D6074DB29C81AAC3C490479_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7350));
		NullCheck(L_0);
		int32_t L_1 = 0;
		float L_2 = (L_0)->GetAt(static_cast<il2cpp_array_size_t>(L_1));
		V_0 = L_2;
		goto IL_000c;
	}

IL_000c:
	{
		// public float thumbCurl { get { return fingerCurls[SteamVR_Skeleton_FingerIndexes.thumb]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7349));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_indexCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_indexCurl_m06230658C52C5E441A49AD40313C608619196B5B (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_indexCurl_m06230658C52C5E441A49AD40313C608619196B5B_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_indexCurl_m06230658C52C5E441A49AD40313C608619196B5B_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7351));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7352));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7353));
		// public float indexCurl { get { return fingerCurls[SteamVR_Skeleton_FingerIndexes.index]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7354));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7356));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = SteamVR_Action_Skeleton_Source_get_fingerCurls_mD56D63D01414ED3D7D6074DB29C81AAC3C490479_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7356));
		NullCheck(L_0);
		int32_t L_1 = 1;
		float L_2 = (L_0)->GetAt(static_cast<il2cpp_array_size_t>(L_1));
		V_0 = L_2;
		goto IL_000c;
	}

IL_000c:
	{
		// public float indexCurl { get { return fingerCurls[SteamVR_Skeleton_FingerIndexes.index]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7355));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_middleCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_middleCurl_mE52CDCDA31A963E723E4BDCC3F3B618FC97CBBE8 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_middleCurl_mE52CDCDA31A963E723E4BDCC3F3B618FC97CBBE8_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_middleCurl_mE52CDCDA31A963E723E4BDCC3F3B618FC97CBBE8_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7357));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7358));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7359));
		// public float middleCurl { get { return fingerCurls[SteamVR_Skeleton_FingerIndexes.middle]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7360));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7362));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = SteamVR_Action_Skeleton_Source_get_fingerCurls_mD56D63D01414ED3D7D6074DB29C81AAC3C490479_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7362));
		NullCheck(L_0);
		int32_t L_1 = 2;
		float L_2 = (L_0)->GetAt(static_cast<il2cpp_array_size_t>(L_1));
		V_0 = L_2;
		goto IL_000c;
	}

IL_000c:
	{
		// public float middleCurl { get { return fingerCurls[SteamVR_Skeleton_FingerIndexes.middle]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7361));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_ringCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_ringCurl_m779E5E61A32799167B43551CB36FE864A6413868 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_ringCurl_m779E5E61A32799167B43551CB36FE864A6413868_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_ringCurl_m779E5E61A32799167B43551CB36FE864A6413868_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7363));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7364));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7365));
		// public float ringCurl { get { return fingerCurls[SteamVR_Skeleton_FingerIndexes.ring]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7366));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7368));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = SteamVR_Action_Skeleton_Source_get_fingerCurls_mD56D63D01414ED3D7D6074DB29C81AAC3C490479_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7368));
		NullCheck(L_0);
		int32_t L_1 = 3;
		float L_2 = (L_0)->GetAt(static_cast<il2cpp_array_size_t>(L_1));
		V_0 = L_2;
		goto IL_000c;
	}

IL_000c:
	{
		// public float ringCurl { get { return fingerCurls[SteamVR_Skeleton_FingerIndexes.ring]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7367));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_pinkyCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_pinkyCurl_m0E983BD50EB9B7AEB30874395070AE5E86C66FBB (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_pinkyCurl_m0E983BD50EB9B7AEB30874395070AE5E86C66FBB_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_pinkyCurl_m0E983BD50EB9B7AEB30874395070AE5E86C66FBB_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7369));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7370));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7371));
		// public float pinkyCurl { get { return fingerCurls[SteamVR_Skeleton_FingerIndexes.pinky]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7372));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7374));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = SteamVR_Action_Skeleton_Source_get_fingerCurls_mD56D63D01414ED3D7D6074DB29C81AAC3C490479_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7374));
		NullCheck(L_0);
		int32_t L_1 = 4;
		float L_2 = (L_0)->GetAt(static_cast<il2cpp_array_size_t>(L_1));
		V_0 = L_2;
		goto IL_000c;
	}

IL_000c:
	{
		// public float pinkyCurl { get { return fingerCurls[SteamVR_Skeleton_FingerIndexes.pinky]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7373));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_thumbIndexSplay()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_thumbIndexSplay_mEA2624540878BDB6DA6344334535F817583A97B0 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_thumbIndexSplay_mEA2624540878BDB6DA6344334535F817583A97B0_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_thumbIndexSplay_mEA2624540878BDB6DA6344334535F817583A97B0_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7375));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7376));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7377));
		// public float thumbIndexSplay { get { return fingerSplays[SteamVR_Skeleton_FingerSplayIndexes.thumbIndex]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7378));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7380));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = SteamVR_Action_Skeleton_Source_get_fingerSplays_m5461F8E49017BD6579CC10D8D0783642DEDE37D0_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7380));
		NullCheck(L_0);
		int32_t L_1 = 0;
		float L_2 = (L_0)->GetAt(static_cast<il2cpp_array_size_t>(L_1));
		V_0 = L_2;
		goto IL_000c;
	}

IL_000c:
	{
		// public float thumbIndexSplay { get { return fingerSplays[SteamVR_Skeleton_FingerSplayIndexes.thumbIndex]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7379));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_indexMiddleSplay()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_indexMiddleSplay_mC5FC7F51CDCC049B987DB60C5686335125255583 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_indexMiddleSplay_mC5FC7F51CDCC049B987DB60C5686335125255583_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_indexMiddleSplay_mC5FC7F51CDCC049B987DB60C5686335125255583_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7381));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7382));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7383));
		// public float indexMiddleSplay { get { return fingerSplays[SteamVR_Skeleton_FingerSplayIndexes.indexMiddle]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7384));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7386));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = SteamVR_Action_Skeleton_Source_get_fingerSplays_m5461F8E49017BD6579CC10D8D0783642DEDE37D0_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7386));
		NullCheck(L_0);
		int32_t L_1 = 1;
		float L_2 = (L_0)->GetAt(static_cast<il2cpp_array_size_t>(L_1));
		V_0 = L_2;
		goto IL_000c;
	}

IL_000c:
	{
		// public float indexMiddleSplay { get { return fingerSplays[SteamVR_Skeleton_FingerSplayIndexes.indexMiddle]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7385));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_middleRingSplay()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_middleRingSplay_m3FCE7BEB2171ACEFCFD9A0E4169AB0BAD6BFEA62 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_middleRingSplay_m3FCE7BEB2171ACEFCFD9A0E4169AB0BAD6BFEA62_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_middleRingSplay_m3FCE7BEB2171ACEFCFD9A0E4169AB0BAD6BFEA62_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7387));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7388));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7389));
		// public float middleRingSplay { get { return fingerSplays[SteamVR_Skeleton_FingerSplayIndexes.middleRing]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7390));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7392));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = SteamVR_Action_Skeleton_Source_get_fingerSplays_m5461F8E49017BD6579CC10D8D0783642DEDE37D0_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7392));
		NullCheck(L_0);
		int32_t L_1 = 2;
		float L_2 = (L_0)->GetAt(static_cast<il2cpp_array_size_t>(L_1));
		V_0 = L_2;
		goto IL_000c;
	}

IL_000c:
	{
		// public float middleRingSplay { get { return fingerSplays[SteamVR_Skeleton_FingerSplayIndexes.middleRing]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7391));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_ringPinkySplay()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_ringPinkySplay_mCAFFCF55E8363259B27670F7193D8B85AA934BC7 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_ringPinkySplay_mCAFFCF55E8363259B27670F7193D8B85AA934BC7_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_ringPinkySplay_mCAFFCF55E8363259B27670F7193D8B85AA934BC7_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7393));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7394));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7395));
		// public float ringPinkySplay { get { return fingerSplays[SteamVR_Skeleton_FingerSplayIndexes.ringPinky]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7396));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7398));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = SteamVR_Action_Skeleton_Source_get_fingerSplays_m5461F8E49017BD6579CC10D8D0783642DEDE37D0_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7398));
		NullCheck(L_0);
		int32_t L_1 = 3;
		float L_2 = (L_0)->GetAt(static_cast<il2cpp_array_size_t>(L_1));
		V_0 = L_2;
		goto IL_000c;
	}

IL_000c:
	{
		// public float ringPinkySplay { get { return fingerSplays[SteamVR_Skeleton_FingerSplayIndexes.ringPinky]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7397));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_lastThumbCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_lastThumbCurl_m55C39AD1FA31B45A7C19348451F25A0488D13241 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_lastThumbCurl_m55C39AD1FA31B45A7C19348451F25A0488D13241_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_lastThumbCurl_m55C39AD1FA31B45A7C19348451F25A0488D13241_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7399));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7400));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7401));
		// public float lastThumbCurl { get { return lastFingerCurls[SteamVR_Skeleton_FingerIndexes.thumb]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7402));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7404));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = SteamVR_Action_Skeleton_Source_get_lastFingerCurls_m00C4EB3059A4427EF390371B7B56077017F42C2C_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7404));
		NullCheck(L_0);
		int32_t L_1 = 0;
		float L_2 = (L_0)->GetAt(static_cast<il2cpp_array_size_t>(L_1));
		V_0 = L_2;
		goto IL_000c;
	}

IL_000c:
	{
		// public float lastThumbCurl { get { return lastFingerCurls[SteamVR_Skeleton_FingerIndexes.thumb]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7403));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_lastIndexCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_lastIndexCurl_m400F28379D6657033E67D29F2B6376654E71440F (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_lastIndexCurl_m400F28379D6657033E67D29F2B6376654E71440F_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_lastIndexCurl_m400F28379D6657033E67D29F2B6376654E71440F_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7405));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7406));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7407));
		// public float lastIndexCurl { get { return lastFingerCurls[SteamVR_Skeleton_FingerIndexes.index]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7408));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7410));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = SteamVR_Action_Skeleton_Source_get_lastFingerCurls_m00C4EB3059A4427EF390371B7B56077017F42C2C_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7410));
		NullCheck(L_0);
		int32_t L_1 = 1;
		float L_2 = (L_0)->GetAt(static_cast<il2cpp_array_size_t>(L_1));
		V_0 = L_2;
		goto IL_000c;
	}

IL_000c:
	{
		// public float lastIndexCurl { get { return lastFingerCurls[SteamVR_Skeleton_FingerIndexes.index]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7409));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_lastMiddleCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_lastMiddleCurl_m32F8B6C010E5EDEFE25465EAFCCEE7CEBBEC8F36 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_lastMiddleCurl_m32F8B6C010E5EDEFE25465EAFCCEE7CEBBEC8F36_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_lastMiddleCurl_m32F8B6C010E5EDEFE25465EAFCCEE7CEBBEC8F36_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7411));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7412));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7413));
		// public float lastMiddleCurl { get { return lastFingerCurls[SteamVR_Skeleton_FingerIndexes.middle]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7414));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7416));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = SteamVR_Action_Skeleton_Source_get_lastFingerCurls_m00C4EB3059A4427EF390371B7B56077017F42C2C_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7416));
		NullCheck(L_0);
		int32_t L_1 = 2;
		float L_2 = (L_0)->GetAt(static_cast<il2cpp_array_size_t>(L_1));
		V_0 = L_2;
		goto IL_000c;
	}

IL_000c:
	{
		// public float lastMiddleCurl { get { return lastFingerCurls[SteamVR_Skeleton_FingerIndexes.middle]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7415));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_lastRingCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_lastRingCurl_m79AD5ABC922A559F034B53F25848FCCB8F80C35D (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_lastRingCurl_m79AD5ABC922A559F034B53F25848FCCB8F80C35D_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_lastRingCurl_m79AD5ABC922A559F034B53F25848FCCB8F80C35D_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7417));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7418));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7419));
		// public float lastRingCurl { get { return lastFingerCurls[SteamVR_Skeleton_FingerIndexes.ring]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7420));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7422));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = SteamVR_Action_Skeleton_Source_get_lastFingerCurls_m00C4EB3059A4427EF390371B7B56077017F42C2C_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7422));
		NullCheck(L_0);
		int32_t L_1 = 3;
		float L_2 = (L_0)->GetAt(static_cast<il2cpp_array_size_t>(L_1));
		V_0 = L_2;
		goto IL_000c;
	}

IL_000c:
	{
		// public float lastRingCurl { get { return lastFingerCurls[SteamVR_Skeleton_FingerIndexes.ring]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7421));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_lastPinkyCurl()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_lastPinkyCurl_m40495088AE01BE4B8AE90499CE0A5AEC0673EB13 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_lastPinkyCurl_m40495088AE01BE4B8AE90499CE0A5AEC0673EB13_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_lastPinkyCurl_m40495088AE01BE4B8AE90499CE0A5AEC0673EB13_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7423));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7424));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7425));
		// public float lastPinkyCurl { get { return lastFingerCurls[SteamVR_Skeleton_FingerIndexes.pinky]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7426));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7428));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = SteamVR_Action_Skeleton_Source_get_lastFingerCurls_m00C4EB3059A4427EF390371B7B56077017F42C2C_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7428));
		NullCheck(L_0);
		int32_t L_1 = 4;
		float L_2 = (L_0)->GetAt(static_cast<il2cpp_array_size_t>(L_1));
		V_0 = L_2;
		goto IL_000c;
	}

IL_000c:
	{
		// public float lastPinkyCurl { get { return lastFingerCurls[SteamVR_Skeleton_FingerIndexes.pinky]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7427));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_lastThumbIndexSplay()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_lastThumbIndexSplay_m990D77456F84B5E00C2DD1A5BEC36B915213B1FA (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_lastThumbIndexSplay_m990D77456F84B5E00C2DD1A5BEC36B915213B1FA_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_lastThumbIndexSplay_m990D77456F84B5E00C2DD1A5BEC36B915213B1FA_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7429));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7430));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7431));
		// public float lastThumbIndexSplay { get { return lastFingerSplays[SteamVR_Skeleton_FingerSplayIndexes.thumbIndex]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7432));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7434));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = SteamVR_Action_Skeleton_Source_get_lastFingerSplays_mC1CF900637C3FB99B1DE3F4BE06452EC07264747_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7434));
		NullCheck(L_0);
		int32_t L_1 = 0;
		float L_2 = (L_0)->GetAt(static_cast<il2cpp_array_size_t>(L_1));
		V_0 = L_2;
		goto IL_000c;
	}

IL_000c:
	{
		// public float lastThumbIndexSplay { get { return lastFingerSplays[SteamVR_Skeleton_FingerSplayIndexes.thumbIndex]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7433));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_lastIndexMiddleSplay()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_lastIndexMiddleSplay_m328634EB394F9D2A6370F481BC35EF947462AB2E (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_lastIndexMiddleSplay_m328634EB394F9D2A6370F481BC35EF947462AB2E_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_lastIndexMiddleSplay_m328634EB394F9D2A6370F481BC35EF947462AB2E_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7435));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7436));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7437));
		// public float lastIndexMiddleSplay { get { return lastFingerSplays[SteamVR_Skeleton_FingerSplayIndexes.indexMiddle]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7438));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7440));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = SteamVR_Action_Skeleton_Source_get_lastFingerSplays_mC1CF900637C3FB99B1DE3F4BE06452EC07264747_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7440));
		NullCheck(L_0);
		int32_t L_1 = 1;
		float L_2 = (L_0)->GetAt(static_cast<il2cpp_array_size_t>(L_1));
		V_0 = L_2;
		goto IL_000c;
	}

IL_000c:
	{
		// public float lastIndexMiddleSplay { get { return lastFingerSplays[SteamVR_Skeleton_FingerSplayIndexes.indexMiddle]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7439));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_lastMiddleRingSplay()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_lastMiddleRingSplay_m33B09DF71ADF6FF1BA42C31E2ACD6D3E5C258845 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_lastMiddleRingSplay_m33B09DF71ADF6FF1BA42C31E2ACD6D3E5C258845_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_lastMiddleRingSplay_m33B09DF71ADF6FF1BA42C31E2ACD6D3E5C258845_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7441));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7442));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7443));
		// public float lastMiddleRingSplay { get { return lastFingerSplays[SteamVR_Skeleton_FingerSplayIndexes.middleRing]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7444));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7446));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = SteamVR_Action_Skeleton_Source_get_lastFingerSplays_mC1CF900637C3FB99B1DE3F4BE06452EC07264747_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7446));
		NullCheck(L_0);
		int32_t L_1 = 2;
		float L_2 = (L_0)->GetAt(static_cast<il2cpp_array_size_t>(L_1));
		V_0 = L_2;
		goto IL_000c;
	}

IL_000c:
	{
		// public float lastMiddleRingSplay { get { return lastFingerSplays[SteamVR_Skeleton_FingerSplayIndexes.middleRing]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7445));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single Valve.VR.SteamVR_Action_Skeleton_Source::get_lastRingPinkySplay()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR float SteamVR_Action_Skeleton_Source_get_lastRingPinkySplay_mFD509B1C21CF79C88833690ECDB237D307AAC531 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_lastRingPinkySplay_mFD509B1C21CF79C88833690ECDB237D307AAC531_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	float V_0 = 0.0f;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_lastRingPinkySplay_mFD509B1C21CF79C88833690ECDB237D307AAC531_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7447));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7448));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7449));
		// public float lastRingPinkySplay { get { return lastFingerSplays[SteamVR_Skeleton_FingerSplayIndexes.ringPinky]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7450));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7452));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = SteamVR_Action_Skeleton_Source_get_lastFingerSplays_mC1CF900637C3FB99B1DE3F4BE06452EC07264747_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7452));
		NullCheck(L_0);
		int32_t L_1 = 3;
		float L_2 = (L_0)->GetAt(static_cast<il2cpp_array_size_t>(L_1));
		V_0 = L_2;
		goto IL_000c;
	}

IL_000c:
	{
		// public float lastRingPinkySplay { get { return lastFingerSplays[SteamVR_Skeleton_FingerSplayIndexes.ringPinky]; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7451));
		float L_3 = V_0;
		return L_3;
	}
}
// System.Single[] Valve.VR.SteamVR_Action_Skeleton_Source::get_fingerCurls()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* SteamVR_Action_Skeleton_Source_get_fingerCurls_mD56D63D01414ED3D7D6074DB29C81AAC3C490479 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_fingerCurls_mD56D63D01414ED3D7D6074DB29C81AAC3C490479_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_fingerCurls_mD56D63D01414ED3D7D6074DB29C81AAC3C490479_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7453));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7454));
	{
		// public float[] fingerCurls { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7455));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = __this->get_U3CfingerCurlsU3Ek__BackingField_51();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::set_fingerCurls(System.Single[])
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_fingerCurls_m8A5B299B1D9CA30852BCFDF4439985C7C67607D5 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_set_fingerCurls_m8A5B299B1D9CA30852BCFDF4439985C7C67607D5_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_set_fingerCurls_m8A5B299B1D9CA30852BCFDF4439985C7C67607D5_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7456));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7457));
	{
		// public float[] fingerCurls { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7458));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = ___value0;
		__this->set_U3CfingerCurlsU3Ek__BackingField_51(L_0);
		return;
	}
}
// System.Single[] Valve.VR.SteamVR_Action_Skeleton_Source::get_fingerSplays()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* SteamVR_Action_Skeleton_Source_get_fingerSplays_m5461F8E49017BD6579CC10D8D0783642DEDE37D0 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_fingerSplays_m5461F8E49017BD6579CC10D8D0783642DEDE37D0_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_fingerSplays_m5461F8E49017BD6579CC10D8D0783642DEDE37D0_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7459));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7460));
	{
		// public float[] fingerSplays { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7461));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = __this->get_U3CfingerSplaysU3Ek__BackingField_52();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::set_fingerSplays(System.Single[])
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_fingerSplays_mEC48DADE504DBFF9AB6B0D16ED35C39CE97F2EBD (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_set_fingerSplays_mEC48DADE504DBFF9AB6B0D16ED35C39CE97F2EBD_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_set_fingerSplays_mEC48DADE504DBFF9AB6B0D16ED35C39CE97F2EBD_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7462));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7463));
	{
		// public float[] fingerSplays { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7464));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = ___value0;
		__this->set_U3CfingerSplaysU3Ek__BackingField_52(L_0);
		return;
	}
}
// System.Single[] Valve.VR.SteamVR_Action_Skeleton_Source::get_lastFingerCurls()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* SteamVR_Action_Skeleton_Source_get_lastFingerCurls_m00C4EB3059A4427EF390371B7B56077017F42C2C (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_lastFingerCurls_m00C4EB3059A4427EF390371B7B56077017F42C2C_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_lastFingerCurls_m00C4EB3059A4427EF390371B7B56077017F42C2C_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7465));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7466));
	{
		// public float[] lastFingerCurls { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7467));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = __this->get_U3ClastFingerCurlsU3Ek__BackingField_53();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::set_lastFingerCurls(System.Single[])
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_lastFingerCurls_m87DEB2959B20AD607470B75C837EE42754040CFF (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_set_lastFingerCurls_m87DEB2959B20AD607470B75C837EE42754040CFF_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_set_lastFingerCurls_m87DEB2959B20AD607470B75C837EE42754040CFF_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7468));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7469));
	{
		// public float[] lastFingerCurls { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7470));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = ___value0;
		__this->set_U3ClastFingerCurlsU3Ek__BackingField_53(L_0);
		return;
	}
}
// System.Single[] Valve.VR.SteamVR_Action_Skeleton_Source::get_lastFingerSplays()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* SteamVR_Action_Skeleton_Source_get_lastFingerSplays_mC1CF900637C3FB99B1DE3F4BE06452EC07264747 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_lastFingerSplays_mC1CF900637C3FB99B1DE3F4BE06452EC07264747_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_lastFingerSplays_mC1CF900637C3FB99B1DE3F4BE06452EC07264747_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7471));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7472));
	{
		// public float[] lastFingerSplays { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7473));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = __this->get_U3ClastFingerSplaysU3Ek__BackingField_54();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::set_lastFingerSplays(System.Single[])
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_lastFingerSplays_mA14C6FC07879D8ED956F931D74A2DF14526476E9 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_set_lastFingerSplays_mA14C6FC07879D8ED956F931D74A2DF14526476E9_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_set_lastFingerSplays_mA14C6FC07879D8ED956F931D74A2DF14526476E9_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7474));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7475));
	{
		// public float[] lastFingerSplays { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7476));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = ___value0;
		__this->set_U3ClastFingerSplaysU3Ek__BackingField_54(L_0);
		return;
	}
}
// System.Boolean Valve.VR.SteamVR_Action_Skeleton_Source::get_poseChanged()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Skeleton_Source_get_poseChanged_m00A9DB3FFD0499D982FC39500D115B4968518988 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_poseChanged_m00A9DB3FFD0499D982FC39500D115B4968518988_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_poseChanged_m00A9DB3FFD0499D982FC39500D115B4968518988_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7477));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7478));
	{
		// public bool poseChanged { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7479));
		bool L_0 = __this->get_U3CposeChangedU3Ek__BackingField_55();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::set_poseChanged(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_poseChanged_m91451416B46D3849E217C7FBAAA96F28364E94B0 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, bool ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_set_poseChanged_m91451416B46D3849E217C7FBAAA96F28364E94B0_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_set_poseChanged_m91451416B46D3849E217C7FBAAA96F28364E94B0_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7480));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7481));
	{
		// public bool poseChanged { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7482));
		bool L_0 = ___value0;
		__this->set_U3CposeChangedU3Ek__BackingField_55(L_0);
		return;
	}
}
// System.Boolean Valve.VR.SteamVR_Action_Skeleton_Source::get_onlyUpdateSummaryData()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Skeleton_Source_get_onlyUpdateSummaryData_m3AC011DB8ED08B67F124368EEA9934C5FACA5920 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_onlyUpdateSummaryData_m3AC011DB8ED08B67F124368EEA9934C5FACA5920_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_onlyUpdateSummaryData_m3AC011DB8ED08B67F124368EEA9934C5FACA5920_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7483));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7484));
	{
		// public bool onlyUpdateSummaryData { get; set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7485));
		bool L_0 = __this->get_U3ConlyUpdateSummaryDataU3Ek__BackingField_56();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::set_onlyUpdateSummaryData(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_onlyUpdateSummaryData_m49C580092D3CDFD2E8D1D98D06026C2FF6F73BCA (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, bool ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_set_onlyUpdateSummaryData_m49C580092D3CDFD2E8D1D98D06026C2FF6F73BCA_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_set_onlyUpdateSummaryData_m49C580092D3CDFD2E8D1D98D06026C2FF6F73BCA_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7486));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7487));
	{
		// public bool onlyUpdateSummaryData { get; set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7488));
		bool L_0 = ___value0;
		__this->set_U3ConlyUpdateSummaryDataU3Ek__BackingField_56(L_0);
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::Preinitialize(Valve.VR.SteamVR_Action,Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_Preinitialize_mC689B2C9BDC3CB56B8539484F3B370FA955C0A45 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 * ___wrappingAction0, int32_t ___forInputSource1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_Preinitialize_mC689B2C9BDC3CB56B8539484F3B370FA955C0A45_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___wrappingAction0), (&___forInputSource1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_Preinitialize_mC689B2C9BDC3CB56B8539484F3B370FA955C0A45_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7489));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7490));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7491));
		// base.Preinitialize(wrappingAction, forInputSource);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7492));
		SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 * L_0 = ___wrappingAction0;
		int32_t L_1 = ___forInputSource1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7505));
		SteamVR_Action_Pose_Source_Preinitialize_m9D4858F6CD07854B44FEABF972A396AD52BF2979(__this, L_0, L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7505));
		// skeletonAction = (SteamVR_Action_Skeleton)wrappingAction;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7493));
		SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 * L_2 = ___wrappingAction0;
		__this->set_skeletonAction_59(((SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 *)CastclassClass((RuntimeObject*)L_2, SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504_il2cpp_TypeInfo_var)));
		// bonePositions = new Vector3[SteamVR_Action_Skeleton.numBones];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7494));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_3 = (Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28*)(Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28*)SZArrayNew(Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28_il2cpp_TypeInfo_var, (uint32_t)((int32_t)31));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7506));
		SteamVR_Action_Skeleton_Source_set_bonePositions_m6E2F4BC8D0DB6C17A44D1DD390933B195C8F0BE7_inline(__this, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7506));
		// lastBonePositions = new Vector3[SteamVR_Action_Skeleton.numBones];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7495));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_4 = (Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28*)(Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28*)SZArrayNew(Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28_il2cpp_TypeInfo_var, (uint32_t)((int32_t)31));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7507));
		SteamVR_Action_Skeleton_Source_set_lastBonePositions_m7B9C3EC1294D432EBF5834AA2FD1518F398C771B_inline(__this, L_4, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7507));
		// boneRotations = new Quaternion[SteamVR_Action_Skeleton.numBones];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7496));
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_5 = (QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3*)(QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3*)SZArrayNew(QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3_il2cpp_TypeInfo_var, (uint32_t)((int32_t)31));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7508));
		SteamVR_Action_Skeleton_Source_set_boneRotations_m04DF922F78BEB4B48C610E5263CB5A56723BFE11_inline(__this, L_5, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7508));
		// lastBoneRotations = new Quaternion[SteamVR_Action_Skeleton.numBones];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7497));
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_6 = (QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3*)(QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3*)SZArrayNew(QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3_il2cpp_TypeInfo_var, (uint32_t)((int32_t)31));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7509));
		SteamVR_Action_Skeleton_Source_set_lastBoneRotations_mAF79C76574CD9C644F280B1E5DCBF068D84C0C71_inline(__this, L_6, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7509));
		// rangeOfMotion = EVRSkeletalMotionRange.WithController;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7498));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7510));
		SteamVR_Action_Skeleton_Source_set_rangeOfMotion_m01A4338F1C4D57E5691A2F8EA861BAD76DA75619_inline(__this, 0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7510));
		// skeletalTransformSpace = EVRSkeletalTransformSpace.Parent;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7499));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7511));
		SteamVR_Action_Skeleton_Source_set_skeletalTransformSpace_m851FCD54C037B0D6CF78F14CBF0BF7B44EE86FA8_inline(__this, 1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7511));
		// fingerCurls = new float[SteamVR_Skeleton_FingerIndexes.enumArray.Length];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7500));
		IL2CPP_RUNTIME_CLASS_INIT(SteamVR_Skeleton_FingerIndexes_t23102EBBB267071AC40CD07242EE4C746DC7F020_il2cpp_TypeInfo_var);
		SteamVR_Skeleton_FingerIndexEnumU5BU5D_t972F21E674536524E0BFB5F382CFD0ACA1714DB7* L_7 = ((SteamVR_Skeleton_FingerIndexes_t23102EBBB267071AC40CD07242EE4C746DC7F020_StaticFields*)il2cpp_codegen_static_fields_for(SteamVR_Skeleton_FingerIndexes_t23102EBBB267071AC40CD07242EE4C746DC7F020_il2cpp_TypeInfo_var))->get_enumArray_5();
		NullCheck(L_7);
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_8 = (SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5*)(SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5*)SZArrayNew(SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5_il2cpp_TypeInfo_var, (uint32_t)(((int32_t)((int32_t)(((RuntimeArray*)L_7)->max_length)))));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7512));
		SteamVR_Action_Skeleton_Source_set_fingerCurls_m8A5B299B1D9CA30852BCFDF4439985C7C67607D5_inline(__this, L_8, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7512));
		// fingerSplays = new float[SteamVR_Skeleton_FingerSplayIndexes.enumArray.Length];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7501));
		IL2CPP_RUNTIME_CLASS_INIT(SteamVR_Skeleton_FingerSplayIndexes_t0141FA1AFC8CF87E917B728EEBBA9186F26D3246_il2cpp_TypeInfo_var);
		SteamVR_Skeleton_FingerSplayIndexEnumU5BU5D_t92DED5924CD2E6B494B9ABD5961F9BC65373A81B* L_9 = ((SteamVR_Skeleton_FingerSplayIndexes_t0141FA1AFC8CF87E917B728EEBBA9186F26D3246_StaticFields*)il2cpp_codegen_static_fields_for(SteamVR_Skeleton_FingerSplayIndexes_t0141FA1AFC8CF87E917B728EEBBA9186F26D3246_il2cpp_TypeInfo_var))->get_enumArray_4();
		NullCheck(L_9);
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_10 = (SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5*)(SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5*)SZArrayNew(SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5_il2cpp_TypeInfo_var, (uint32_t)(((int32_t)((int32_t)(((RuntimeArray*)L_9)->max_length)))));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7513));
		SteamVR_Action_Skeleton_Source_set_fingerSplays_mEC48DADE504DBFF9AB6B0D16ED35C39CE97F2EBD_inline(__this, L_10, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7513));
		// lastFingerCurls = new float[SteamVR_Skeleton_FingerIndexes.enumArray.Length];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7502));
		SteamVR_Skeleton_FingerIndexEnumU5BU5D_t972F21E674536524E0BFB5F382CFD0ACA1714DB7* L_11 = ((SteamVR_Skeleton_FingerIndexes_t23102EBBB267071AC40CD07242EE4C746DC7F020_StaticFields*)il2cpp_codegen_static_fields_for(SteamVR_Skeleton_FingerIndexes_t23102EBBB267071AC40CD07242EE4C746DC7F020_il2cpp_TypeInfo_var))->get_enumArray_5();
		NullCheck(L_11);
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_12 = (SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5*)(SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5*)SZArrayNew(SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5_il2cpp_TypeInfo_var, (uint32_t)(((int32_t)((int32_t)(((RuntimeArray*)L_11)->max_length)))));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7514));
		SteamVR_Action_Skeleton_Source_set_lastFingerCurls_m87DEB2959B20AD607470B75C837EE42754040CFF_inline(__this, L_12, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7514));
		// lastFingerSplays = new float[SteamVR_Skeleton_FingerSplayIndexes.enumArray.Length];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7503));
		SteamVR_Skeleton_FingerSplayIndexEnumU5BU5D_t92DED5924CD2E6B494B9ABD5961F9BC65373A81B* L_13 = ((SteamVR_Skeleton_FingerSplayIndexes_t0141FA1AFC8CF87E917B728EEBBA9186F26D3246_StaticFields*)il2cpp_codegen_static_fields_for(SteamVR_Skeleton_FingerSplayIndexes_t0141FA1AFC8CF87E917B728EEBBA9186F26D3246_il2cpp_TypeInfo_var))->get_enumArray_4();
		NullCheck(L_13);
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_14 = (SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5*)(SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5*)SZArrayNew(SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5_il2cpp_TypeInfo_var, (uint32_t)(((int32_t)((int32_t)(((RuntimeArray*)L_13)->max_length)))));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7515));
		SteamVR_Action_Skeleton_Source_set_lastFingerSplays_mA14C6FC07879D8ED956F931D74A2DF14526476E9_inline(__this, L_14, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7515));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7504));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::Initialize()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_Initialize_mAC7E24B466C1A3D77533F0A1C76F5E1F3C0D704A (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_Initialize_mAC7E24B466C1A3D77533F0A1C76F5E1F3C0D704A_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_Initialize_mAC7E24B466C1A3D77533F0A1C76F5E1F3C0D704A_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7516));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7517));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7518));
		// base.Initialize();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7519));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7524));
		SteamVR_Action_Pose_Source_Initialize_mE07A70E1AF9A3257AFD2BB0C4FA228D748F88B43(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7524));
		// if (skeletonActionData_size == 0)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7520));
		IL2CPP_RUNTIME_CLASS_INIT(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72_il2cpp_TypeInfo_var);
		uint32_t L_0 = ((SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72_StaticFields*)il2cpp_codegen_static_fields_for(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72_il2cpp_TypeInfo_var))->get_skeletonActionData_size_36();
		V_0 = (bool)((((int32_t)L_0) == ((int32_t)0))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7521));
		bool L_1 = V_0;
		if (!L_1)
		{
			goto IL_0028;
		}
	}
	{
		// skeletonActionData_size = (uint)Marshal.SizeOf(typeof(InputSkeletalActionData_t));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7522));
		RuntimeTypeHandle_t7B542280A22F0EC4EAC2061C29178845847A8B2D  L_2 = { reinterpret_cast<intptr_t> (InputSkeletalActionData_t_tA39C0A0FE4DBB8966D852B4FFC7D3A6D8F887430_0_0_0_var) };
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7525));
		IL2CPP_RUNTIME_CLASS_INIT(Type_t_il2cpp_TypeInfo_var);
		Type_t * L_3 = Type_GetTypeFromHandle_m9DC58ADF0512987012A8A016FB64B068F3B1AFF6(L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7525));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7526));
		IL2CPP_RUNTIME_CLASS_INIT(Marshal_tC795CE9CC2FFBA41EDB1AC1C0FEC04607DFA8A40_il2cpp_TypeInfo_var);
		int32_t L_4 = Marshal_SizeOf_m4F7DA827FA7A720395E6FDD2ABE78D4B00D43130(L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7526));
		IL2CPP_RUNTIME_CLASS_INIT(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72_il2cpp_TypeInfo_var);
		((SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72_StaticFields*)il2cpp_codegen_static_fields_for(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72_il2cpp_TypeInfo_var))->set_skeletonActionData_size_36(L_4);
	}

IL_0028:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7523));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::UpdateValue()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_UpdateValue_mE924A6C6CFD9CD77209E2FE67B60B8D7D2FFA3A9 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_UpdateValue_mE924A6C6CFD9CD77209E2FE67B60B8D7D2FFA3A9_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_UpdateValue_mE924A6C6CFD9CD77209E2FE67B60B8D7D2FFA3A9_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7527));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7528));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7529));
		// UpdateValue(false);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7530));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7532));
		VirtActionInvoker1< bool >::Invoke(50 /* System.Void Valve.VR.SteamVR_Action_Pose_Source::UpdateValue(System.Boolean) */, __this, (bool)0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7532));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7531));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::UpdateValue(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_UpdateValue_m973732FC7285143B7F0ABF27A4DD83041EA2FB82 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, bool ___skipStateAndEventUpdates0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_UpdateValue_m973732FC7285143B7F0ABF27A4DD83041EA2FB82_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	bool V_1 = false;
	int32_t V_2 = 0;
	bool V_3 = false;
	int32_t V_4 = 0;
	bool V_5 = false;
	int32_t V_6 = 0;
	bool V_7 = false;
	bool V_8 = false;
	uint64_t V_9 = 0;
	bool V_10 = false;
	bool V_11 = false;
	bool V_12 = false;
	int32_t V_13 = 0;
	bool V_14 = false;
	bool V_15 = false;
	int32_t V_16 = 0;
	bool V_17 = false;
	bool V_18 = false;
	bool V_19 = false;
	bool V_20 = false;
	bool V_21 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___skipStateAndEventUpdates0));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_2), (&V_4), (&V_6), (&V_13), (&V_16));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_UpdateValue_m973732FC7285143B7F0ABF27A4DD83041EA2FB82_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7533));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7534));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7535));
		// lastActive = active;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7536));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7632));
		bool L_0 = VirtFuncInvoker0< bool >::Invoke(12 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_active() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7632));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7633));
		VirtActionInvoker1< bool >::Invoke(15 /* System.Void Valve.VR.SteamVR_Action_Source::set_lastActive(System.Boolean) */, __this, L_0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7633));
		// lastSkeletonActionData = skeletonActionData;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7537));
		InputSkeletalActionData_t_tA39C0A0FE4DBB8966D852B4FFC7D3A6D8F887430  L_1 = __this->get_skeletonActionData_61();
		__this->set_lastSkeletonActionData_62(L_1);
		// lastSkeletalSummaryData = skeletalSummaryData;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7538));
		VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831  L_2 = __this->get_skeletalSummaryData_57();
		__this->set_lastSkeletalSummaryData_58(L_2);
		// if (onlyUpdateSummaryData == false)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7539));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7634));
		bool L_3 = SteamVR_Action_Skeleton_Source_get_onlyUpdateSummaryData_m3AC011DB8ED08B67F124368EEA9934C5FACA5920_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7634));
		V_1 = (bool)((((int32_t)L_3) == ((int32_t)0))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7540));
		bool L_4 = V_1;
		if (!L_4)
		{
			goto IL_0078;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7541));
		// for (int boneIndex = 0; boneIndex < SteamVR_Action_Skeleton.numBones; boneIndex++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7542));
		V_2 = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7543));
		goto IL_006e;
	}

IL_0038:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7544));
		// lastBonePositions[boneIndex] = bonePositions[boneIndex];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7545));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7635));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_5 = SteamVR_Action_Skeleton_Source_get_lastBonePositions_m99D1C7B8A05E646777AC85CFC0ED2FF0953C3AB9_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7635));
		int32_t L_6 = V_2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7636));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_7 = SteamVR_Action_Skeleton_Source_get_bonePositions_mA0C01DDB9EAB9749BBBEDBCFF72582812AB9C195_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7636));
		int32_t L_8 = V_2;
		NullCheck(L_7);
		int32_t L_9 = L_8;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_10 = (L_7)->GetAt(static_cast<il2cpp_array_size_t>(L_9));
		NullCheck(L_5);
		(L_5)->SetAt(static_cast<il2cpp_array_size_t>(L_6), (Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 )L_10);
		// lastBoneRotations[boneIndex] = boneRotations[boneIndex];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7546));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7637));
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_11 = SteamVR_Action_Skeleton_Source_get_lastBoneRotations_m14A98028FB99C0404733364FFD3C187D2A53261C_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7637));
		int32_t L_12 = V_2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7638));
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_13 = SteamVR_Action_Skeleton_Source_get_boneRotations_mCD0B038517CA7A79945AD615082F05B25B0EDA20_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7638));
		int32_t L_14 = V_2;
		NullCheck(L_13);
		int32_t L_15 = L_14;
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_16 = (L_13)->GetAt(static_cast<il2cpp_array_size_t>(L_15));
		NullCheck(L_11);
		(L_11)->SetAt(static_cast<il2cpp_array_size_t>(L_12), (Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 )L_16);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7547));
		// for (int boneIndex = 0; boneIndex < SteamVR_Action_Skeleton.numBones; boneIndex++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7548));
		int32_t L_17 = V_2;
		V_2 = ((int32_t)il2cpp_codegen_add((int32_t)L_17, (int32_t)1));
	}

IL_006e:
	{
		// for (int boneIndex = 0; boneIndex < SteamVR_Action_Skeleton.numBones; boneIndex++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7549));
		int32_t L_18 = V_2;
		V_3 = (bool)((((int32_t)L_18) < ((int32_t)((int32_t)31)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7550));
		bool L_19 = V_3;
		if (L_19)
		{
			goto IL_0038;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7551));
	}

IL_0078:
	{
		// for (int fingerIndex = 0; fingerIndex < SteamVR_Skeleton_FingerIndexes.enumArray.Length; fingerIndex++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7552));
		V_4 = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7553));
		goto IL_0097;
	}

IL_007d:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7554));
		// lastFingerCurls[fingerIndex] = fingerCurls[fingerIndex];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7555));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7639));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_20 = SteamVR_Action_Skeleton_Source_get_lastFingerCurls_m00C4EB3059A4427EF390371B7B56077017F42C2C_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7639));
		int32_t L_21 = V_4;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7640));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_22 = SteamVR_Action_Skeleton_Source_get_fingerCurls_mD56D63D01414ED3D7D6074DB29C81AAC3C490479_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7640));
		int32_t L_23 = V_4;
		NullCheck(L_22);
		int32_t L_24 = L_23;
		float L_25 = (L_22)->GetAt(static_cast<il2cpp_array_size_t>(L_24));
		NullCheck(L_20);
		(L_20)->SetAt(static_cast<il2cpp_array_size_t>(L_21), (float)L_25);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7556));
		// for (int fingerIndex = 0; fingerIndex < SteamVR_Skeleton_FingerIndexes.enumArray.Length; fingerIndex++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7557));
		int32_t L_26 = V_4;
		V_4 = ((int32_t)il2cpp_codegen_add((int32_t)L_26, (int32_t)1));
	}

IL_0097:
	{
		// for (int fingerIndex = 0; fingerIndex < SteamVR_Skeleton_FingerIndexes.enumArray.Length; fingerIndex++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7558));
		int32_t L_27 = V_4;
		IL2CPP_RUNTIME_CLASS_INIT(SteamVR_Skeleton_FingerIndexes_t23102EBBB267071AC40CD07242EE4C746DC7F020_il2cpp_TypeInfo_var);
		SteamVR_Skeleton_FingerIndexEnumU5BU5D_t972F21E674536524E0BFB5F382CFD0ACA1714DB7* L_28 = ((SteamVR_Skeleton_FingerIndexes_t23102EBBB267071AC40CD07242EE4C746DC7F020_StaticFields*)il2cpp_codegen_static_fields_for(SteamVR_Skeleton_FingerIndexes_t23102EBBB267071AC40CD07242EE4C746DC7F020_il2cpp_TypeInfo_var))->get_enumArray_5();
		NullCheck(L_28);
		V_5 = (bool)((((int32_t)L_27) < ((int32_t)(((int32_t)((int32_t)(((RuntimeArray*)L_28)->max_length))))))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7559));
		bool L_29 = V_5;
		if (L_29)
		{
			goto IL_007d;
		}
	}
	{
		// for (int fingerIndex = 0; fingerIndex < SteamVR_Skeleton_FingerSplayIndexes.enumArray.Length; fingerIndex++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7560));
		V_6 = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7561));
		goto IL_00c7;
	}

IL_00ad:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7562));
		// lastFingerSplays[fingerIndex] = fingerSplays[fingerIndex];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7563));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7641));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_30 = SteamVR_Action_Skeleton_Source_get_lastFingerSplays_mC1CF900637C3FB99B1DE3F4BE06452EC07264747_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7641));
		int32_t L_31 = V_6;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7642));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_32 = SteamVR_Action_Skeleton_Source_get_fingerSplays_m5461F8E49017BD6579CC10D8D0783642DEDE37D0_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7642));
		int32_t L_33 = V_6;
		NullCheck(L_32);
		int32_t L_34 = L_33;
		float L_35 = (L_32)->GetAt(static_cast<il2cpp_array_size_t>(L_34));
		NullCheck(L_30);
		(L_30)->SetAt(static_cast<il2cpp_array_size_t>(L_31), (float)L_35);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7564));
		// for (int fingerIndex = 0; fingerIndex < SteamVR_Skeleton_FingerSplayIndexes.enumArray.Length; fingerIndex++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7565));
		int32_t L_36 = V_6;
		V_6 = ((int32_t)il2cpp_codegen_add((int32_t)L_36, (int32_t)1));
	}

IL_00c7:
	{
		// for (int fingerIndex = 0; fingerIndex < SteamVR_Skeleton_FingerSplayIndexes.enumArray.Length; fingerIndex++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7566));
		int32_t L_37 = V_6;
		IL2CPP_RUNTIME_CLASS_INIT(SteamVR_Skeleton_FingerSplayIndexes_t0141FA1AFC8CF87E917B728EEBBA9186F26D3246_il2cpp_TypeInfo_var);
		SteamVR_Skeleton_FingerSplayIndexEnumU5BU5D_t92DED5924CD2E6B494B9ABD5961F9BC65373A81B* L_38 = ((SteamVR_Skeleton_FingerSplayIndexes_t0141FA1AFC8CF87E917B728EEBBA9186F26D3246_StaticFields*)il2cpp_codegen_static_fields_for(SteamVR_Skeleton_FingerSplayIndexes_t0141FA1AFC8CF87E917B728EEBBA9186F26D3246_il2cpp_TypeInfo_var))->get_enumArray_4();
		NullCheck(L_38);
		V_7 = (bool)((((int32_t)L_37) < ((int32_t)(((int32_t)((int32_t)(((RuntimeArray*)L_38)->max_length))))))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7567));
		bool L_39 = V_7;
		if (L_39)
		{
			goto IL_00ad;
		}
	}
	{
		// base.UpdateValue(true);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7568));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7643));
		SteamVR_Action_Pose_Source_UpdateValue_mD4FCEA491C3040D805773739C9A00420DB876447(__this, (bool)1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7643));
		// poseChanged = changed;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7569));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7644));
		bool L_40 = VirtFuncInvoker0< bool >::Invoke(31 /* System.Boolean Valve.VR.SteamVR_Action_In_Source::get_changed() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7644));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7645));
		SteamVR_Action_Skeleton_Source_set_poseChanged_m91451416B46D3849E217C7FBAAA96F28364E94B0_inline(__this, L_40, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7645));
		// EVRInputError error = OpenVR.Input.GetSkeletalActionData(handle, ref skeletonActionData, skeletonActionData_size);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7570));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7646));
		IL2CPP_RUNTIME_CLASS_INIT(OpenVR_tE75A98955EC4AA4B219CE822AA43E79E4CB99DB3_il2cpp_TypeInfo_var);
		CVRInput_t2BE4417A3C1EA0C6CF647B0706BF37F886CE599B * L_41 = OpenVR_get_Input_m904FD790D785E944EE58513F589E862530386414(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7646));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7647));
		uint64_t L_42 = SteamVR_Action_Source_get_handle_mE4C63F9ADB5ACA5E72265B62C0908ACF8EF73A01(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7647));
		InputSkeletalActionData_t_tA39C0A0FE4DBB8966D852B4FFC7D3A6D8F887430 * L_43 = __this->get_address_of_skeletonActionData_61();
		IL2CPP_RUNTIME_CLASS_INIT(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72_il2cpp_TypeInfo_var);
		uint32_t L_44 = ((SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72_StaticFields*)il2cpp_codegen_static_fields_for(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72_il2cpp_TypeInfo_var))->get_skeletonActionData_size_36();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7648));
		NullCheck(L_41);
		int32_t L_45 = CVRInput_GetSkeletalActionData_m89A0A431E11AD9772CA2724D8F45583146BB9C66(L_41, L_42, (InputSkeletalActionData_t_tA39C0A0FE4DBB8966D852B4FFC7D3A6D8F887430 *)L_43, L_44, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7648));
		V_0 = L_45;
		// if (error != EVRInputError.None)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7571));
		int32_t L_46 = V_0;
		V_8 = (bool)((!(((uint32_t)L_46) <= ((uint32_t)0)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7572));
		bool L_47 = V_8;
		if (!L_47)
		{
			goto IL_016d;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7573));
		// Debug.LogError("<b>[SteamVR]</b> GetSkeletalActionData error (" + fullPath + "): " + error.ToString() + " handle: " + handle.ToString());
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7574));
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_48 = (StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E*)(StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E*)SZArrayNew(StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E_il2cpp_TypeInfo_var, (uint32_t)6);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_49 = L_48;
		NullCheck(L_49);
		ArrayElementTypeCheck (L_49, _stringLiteralA98667A476D022EB9B2CF25800415760BE586401);
		(L_49)->SetAt(static_cast<il2cpp_array_size_t>(0), (String_t*)_stringLiteralA98667A476D022EB9B2CF25800415760BE586401);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_50 = L_49;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7649));
		String_t* L_51 = SteamVR_Action_Source_get_fullPath_mB0C33E6C1B4F91E908236055FFAE027ECB3ED996(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7649));
		NullCheck(L_50);
		ArrayElementTypeCheck (L_50, L_51);
		(L_50)->SetAt(static_cast<il2cpp_array_size_t>(1), (String_t*)L_51);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_52 = L_50;
		NullCheck(L_52);
		ArrayElementTypeCheck (L_52, _stringLiteralE6D56E05F32996CA7E5AE21BC90D49044C0BF356);
		(L_52)->SetAt(static_cast<il2cpp_array_size_t>(2), (String_t*)_stringLiteralE6D56E05F32996CA7E5AE21BC90D49044C0BF356);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_53 = L_52;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7650));
		RuntimeObject * L_54 = Box(EVRInputError_tC8741BE3044407E8FA26F282526B259D93DBF22F_il2cpp_TypeInfo_var, (&V_0));
		NullCheck(L_54);
		String_t* L_55 = VirtFuncInvoker0< String_t* >::Invoke(3 /* System.String System.Object::ToString() */, L_54);
		V_0 = *(int32_t*)UnBox(L_54);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7650));
		NullCheck(L_53);
		ArrayElementTypeCheck (L_53, L_55);
		(L_53)->SetAt(static_cast<il2cpp_array_size_t>(3), (String_t*)L_55);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_56 = L_53;
		NullCheck(L_56);
		ArrayElementTypeCheck (L_56, _stringLiteral18B39452A606090B97AA8D84240CC83BE3E5D62B);
		(L_56)->SetAt(static_cast<il2cpp_array_size_t>(4), (String_t*)_stringLiteral18B39452A606090B97AA8D84240CC83BE3E5D62B);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_57 = L_56;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7651));
		uint64_t L_58 = SteamVR_Action_Source_get_handle_mE4C63F9ADB5ACA5E72265B62C0908ACF8EF73A01(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7651));
		V_9 = L_58;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7652));
		String_t* L_59 = UInt64_ToString_mF0E40B7459C207B89A1C8C04CE7F183AC0E6D672((uint64_t*)(&V_9), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7652));
		NullCheck(L_57);
		ArrayElementTypeCheck (L_57, L_59);
		(L_57)->SetAt(static_cast<il2cpp_array_size_t>(5), (String_t*)L_59);
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7653));
		String_t* L_60 = String_Concat_m232E857CA5107EA6AC52E7DD7018716C021F237B(L_57, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7653));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7654));
		IL2CPP_RUNTIME_CLASS_INIT(Debug_t7B5FCB117E2FD63B6838BC52821B252E2BFB61C4_il2cpp_TypeInfo_var);
		Debug_LogError_m3BCF9B78263152261565DCA9DB7D55F0C391ED29(L_60, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7654));
		// return;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7575));
		goto IL_045e;
	}

IL_016d:
	{
		// if (active)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7576));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7655));
		bool L_61 = VirtFuncInvoker0< bool >::Invoke(12 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_active() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7655));
		V_10 = L_61;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7577));
		bool L_62 = V_10;
		if (!L_62)
		{
			goto IL_038a;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7578));
		// if (onlyUpdateSummaryData == false)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7579));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7656));
		bool L_63 = SteamVR_Action_Skeleton_Source_get_onlyUpdateSummaryData_m3AC011DB8ED08B67F124368EEA9934C5FACA5920_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7656));
		V_11 = (bool)((((int32_t)L_63) == ((int32_t)0))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7580));
		bool L_64 = V_11;
		if (!L_64)
		{
			goto IL_037b;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7581));
		// error = OpenVR.Input.GetSkeletalBoneData(handle, skeletalTransformSpace, rangeOfMotion, tempBoneTransforms);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7582));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7657));
		IL2CPP_RUNTIME_CLASS_INIT(OpenVR_tE75A98955EC4AA4B219CE822AA43E79E4CB99DB3_il2cpp_TypeInfo_var);
		CVRInput_t2BE4417A3C1EA0C6CF647B0706BF37F886CE599B * L_65 = OpenVR_get_Input_m904FD790D785E944EE58513F589E862530386414(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7657));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7658));
		uint64_t L_66 = SteamVR_Action_Source_get_handle_mE4C63F9ADB5ACA5E72265B62C0908ACF8EF73A01(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7658));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7659));
		int32_t L_67 = SteamVR_Action_Skeleton_Source_get_skeletalTransformSpace_m0D9D61CC1BC50CC7FA1F9AD5192FBC418009F3F3_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7659));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7660));
		int32_t L_68 = SteamVR_Action_Skeleton_Source_get_rangeOfMotion_mCEFC5B01B736A3B6218C5C91A0AEF272FFD88B47_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7660));
		VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B* L_69 = __this->get_tempBoneTransforms_60();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7661));
		NullCheck(L_65);
		int32_t L_70 = CVRInput_GetSkeletalBoneData_mAE9C9E6EA4EBA38EF94D4849A702F5519E343CF7(L_65, L_66, L_67, L_68, L_69, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7661));
		V_0 = L_70;
		// if (error != EVRInputError.None)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7583));
		int32_t L_71 = V_0;
		V_12 = (bool)((!(((uint32_t)L_71) <= ((uint32_t)0)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7584));
		bool L_72 = V_12;
		if (!L_72)
		{
			goto IL_0211;
		}
	}
	{
		// Debug.LogError("<b>[SteamVR]</b> GetSkeletalBoneData error (" + fullPath + "): " + error.ToString() + " handle: " + handle.ToString());
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7585));
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_73 = (StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E*)(StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E*)SZArrayNew(StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E_il2cpp_TypeInfo_var, (uint32_t)6);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_74 = L_73;
		NullCheck(L_74);
		ArrayElementTypeCheck (L_74, _stringLiteralAD66C391DC6C51CA381EB74E3DAFDAF54D01F3C2);
		(L_74)->SetAt(static_cast<il2cpp_array_size_t>(0), (String_t*)_stringLiteralAD66C391DC6C51CA381EB74E3DAFDAF54D01F3C2);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_75 = L_74;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7662));
		String_t* L_76 = SteamVR_Action_Source_get_fullPath_mB0C33E6C1B4F91E908236055FFAE027ECB3ED996(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7662));
		NullCheck(L_75);
		ArrayElementTypeCheck (L_75, L_76);
		(L_75)->SetAt(static_cast<il2cpp_array_size_t>(1), (String_t*)L_76);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_77 = L_75;
		NullCheck(L_77);
		ArrayElementTypeCheck (L_77, _stringLiteralE6D56E05F32996CA7E5AE21BC90D49044C0BF356);
		(L_77)->SetAt(static_cast<il2cpp_array_size_t>(2), (String_t*)_stringLiteralE6D56E05F32996CA7E5AE21BC90D49044C0BF356);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_78 = L_77;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7663));
		RuntimeObject * L_79 = Box(EVRInputError_tC8741BE3044407E8FA26F282526B259D93DBF22F_il2cpp_TypeInfo_var, (&V_0));
		NullCheck(L_79);
		String_t* L_80 = VirtFuncInvoker0< String_t* >::Invoke(3 /* System.String System.Object::ToString() */, L_79);
		V_0 = *(int32_t*)UnBox(L_79);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7663));
		NullCheck(L_78);
		ArrayElementTypeCheck (L_78, L_80);
		(L_78)->SetAt(static_cast<il2cpp_array_size_t>(3), (String_t*)L_80);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_81 = L_78;
		NullCheck(L_81);
		ArrayElementTypeCheck (L_81, _stringLiteral18B39452A606090B97AA8D84240CC83BE3E5D62B);
		(L_81)->SetAt(static_cast<il2cpp_array_size_t>(4), (String_t*)_stringLiteral18B39452A606090B97AA8D84240CC83BE3E5D62B);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_82 = L_81;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7664));
		uint64_t L_83 = SteamVR_Action_Source_get_handle_mE4C63F9ADB5ACA5E72265B62C0908ACF8EF73A01(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7664));
		V_9 = L_83;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7665));
		String_t* L_84 = UInt64_ToString_mF0E40B7459C207B89A1C8C04CE7F183AC0E6D672((uint64_t*)(&V_9), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7665));
		NullCheck(L_82);
		ArrayElementTypeCheck (L_82, L_84);
		(L_82)->SetAt(static_cast<il2cpp_array_size_t>(5), (String_t*)L_84);
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7666));
		String_t* L_85 = String_Concat_m232E857CA5107EA6AC52E7DD7018716C021F237B(L_82, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7666));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7667));
		IL2CPP_RUNTIME_CLASS_INIT(Debug_t7B5FCB117E2FD63B6838BC52821B252E2BFB61C4_il2cpp_TypeInfo_var);
		Debug_LogError_m3BCF9B78263152261565DCA9DB7D55F0C391ED29(L_85, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7667));
	}

IL_0211:
	{
		// for (int boneIndex = 0; boneIndex < tempBoneTransforms.Length; boneIndex++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7586));
		V_13 = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7587));
		goto IL_0343;
	}

IL_0219:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7588));
		// bonePositions[boneIndex].x = -tempBoneTransforms[boneIndex].position.v0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7589));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7668));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_86 = SteamVR_Action_Skeleton_Source_get_bonePositions_mA0C01DDB9EAB9749BBBEDBCFF72582812AB9C195_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7668));
		int32_t L_87 = V_13;
		NullCheck(L_86);
		VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B* L_88 = __this->get_tempBoneTransforms_60();
		int32_t L_89 = V_13;
		NullCheck(L_88);
		HmdVector4_t_t97F0B9E146F0A0E38B243B3317E4B1095A8DD0C9 * L_90 = ((L_88)->GetAddressAt(static_cast<il2cpp_array_size_t>(L_89)))->get_address_of_position_0();
		float L_91 = L_90->get_v0_0();
		((L_86)->GetAddressAt(static_cast<il2cpp_array_size_t>(L_87)))->set_x_2(((-L_91)));
		// bonePositions[boneIndex].y = tempBoneTransforms[boneIndex].position.v1;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7590));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7669));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_92 = SteamVR_Action_Skeleton_Source_get_bonePositions_mA0C01DDB9EAB9749BBBEDBCFF72582812AB9C195_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7669));
		int32_t L_93 = V_13;
		NullCheck(L_92);
		VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B* L_94 = __this->get_tempBoneTransforms_60();
		int32_t L_95 = V_13;
		NullCheck(L_94);
		HmdVector4_t_t97F0B9E146F0A0E38B243B3317E4B1095A8DD0C9 * L_96 = ((L_94)->GetAddressAt(static_cast<il2cpp_array_size_t>(L_95)))->get_address_of_position_0();
		float L_97 = L_96->get_v1_1();
		((L_92)->GetAddressAt(static_cast<il2cpp_array_size_t>(L_93)))->set_y_3(L_97);
		// bonePositions[boneIndex].z = tempBoneTransforms[boneIndex].position.v2;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7591));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7670));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_98 = SteamVR_Action_Skeleton_Source_get_bonePositions_mA0C01DDB9EAB9749BBBEDBCFF72582812AB9C195_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7670));
		int32_t L_99 = V_13;
		NullCheck(L_98);
		VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B* L_100 = __this->get_tempBoneTransforms_60();
		int32_t L_101 = V_13;
		NullCheck(L_100);
		HmdVector4_t_t97F0B9E146F0A0E38B243B3317E4B1095A8DD0C9 * L_102 = ((L_100)->GetAddressAt(static_cast<il2cpp_array_size_t>(L_101)))->get_address_of_position_0();
		float L_103 = L_102->get_v2_2();
		((L_98)->GetAddressAt(static_cast<il2cpp_array_size_t>(L_99)))->set_z_4(L_103);
		// boneRotations[boneIndex].x = tempBoneTransforms[boneIndex].orientation.x;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7592));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7671));
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_104 = SteamVR_Action_Skeleton_Source_get_boneRotations_mCD0B038517CA7A79945AD615082F05B25B0EDA20_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7671));
		int32_t L_105 = V_13;
		NullCheck(L_104);
		VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B* L_106 = __this->get_tempBoneTransforms_60();
		int32_t L_107 = V_13;
		NullCheck(L_106);
		HmdQuaternionf_t_t83752025A54692367798FA15BDC82F30F4D97C11 * L_108 = ((L_106)->GetAddressAt(static_cast<il2cpp_array_size_t>(L_107)))->get_address_of_orientation_1();
		float L_109 = L_108->get_x_1();
		((L_104)->GetAddressAt(static_cast<il2cpp_array_size_t>(L_105)))->set_x_0(L_109);
		// boneRotations[boneIndex].y = -tempBoneTransforms[boneIndex].orientation.y;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7593));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7672));
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_110 = SteamVR_Action_Skeleton_Source_get_boneRotations_mCD0B038517CA7A79945AD615082F05B25B0EDA20_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7672));
		int32_t L_111 = V_13;
		NullCheck(L_110);
		VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B* L_112 = __this->get_tempBoneTransforms_60();
		int32_t L_113 = V_13;
		NullCheck(L_112);
		HmdQuaternionf_t_t83752025A54692367798FA15BDC82F30F4D97C11 * L_114 = ((L_112)->GetAddressAt(static_cast<il2cpp_array_size_t>(L_113)))->get_address_of_orientation_1();
		float L_115 = L_114->get_y_2();
		((L_110)->GetAddressAt(static_cast<il2cpp_array_size_t>(L_111)))->set_y_1(((-L_115)));
		// boneRotations[boneIndex].z = -tempBoneTransforms[boneIndex].orientation.z;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7594));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7673));
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_116 = SteamVR_Action_Skeleton_Source_get_boneRotations_mCD0B038517CA7A79945AD615082F05B25B0EDA20_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7673));
		int32_t L_117 = V_13;
		NullCheck(L_116);
		VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B* L_118 = __this->get_tempBoneTransforms_60();
		int32_t L_119 = V_13;
		NullCheck(L_118);
		HmdQuaternionf_t_t83752025A54692367798FA15BDC82F30F4D97C11 * L_120 = ((L_118)->GetAddressAt(static_cast<il2cpp_array_size_t>(L_119)))->get_address_of_orientation_1();
		float L_121 = L_120->get_z_3();
		((L_116)->GetAddressAt(static_cast<il2cpp_array_size_t>(L_117)))->set_z_2(((-L_121)));
		// boneRotations[boneIndex].w = tempBoneTransforms[boneIndex].orientation.w;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7595));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7674));
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_122 = SteamVR_Action_Skeleton_Source_get_boneRotations_mCD0B038517CA7A79945AD615082F05B25B0EDA20_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7674));
		int32_t L_123 = V_13;
		NullCheck(L_122);
		VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B* L_124 = __this->get_tempBoneTransforms_60();
		int32_t L_125 = V_13;
		NullCheck(L_124);
		HmdQuaternionf_t_t83752025A54692367798FA15BDC82F30F4D97C11 * L_126 = ((L_124)->GetAddressAt(static_cast<il2cpp_array_size_t>(L_125)))->get_address_of_orientation_1();
		float L_127 = L_126->get_w_0();
		((L_122)->GetAddressAt(static_cast<il2cpp_array_size_t>(L_123)))->set_w_3(L_127);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7596));
		// for (int boneIndex = 0; boneIndex < tempBoneTransforms.Length; boneIndex++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7597));
		int32_t L_128 = V_13;
		V_13 = ((int32_t)il2cpp_codegen_add((int32_t)L_128, (int32_t)1));
	}

IL_0343:
	{
		// for (int boneIndex = 0; boneIndex < tempBoneTransforms.Length; boneIndex++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7598));
		int32_t L_129 = V_13;
		VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B* L_130 = __this->get_tempBoneTransforms_60();
		NullCheck(L_130);
		V_14 = (bool)((((int32_t)L_129) < ((int32_t)(((int32_t)((int32_t)(((RuntimeArray*)L_130)->max_length))))))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7599));
		bool L_131 = V_14;
		if (L_131)
		{
			goto IL_0219;
		}
	}
	{
		// boneRotations[0] = SteamVR_Action_Skeleton.steamVRFixUpRotation * boneRotations[0];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7600));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7675));
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_132 = SteamVR_Action_Skeleton_Source_get_boneRotations_mCD0B038517CA7A79945AD615082F05B25B0EDA20_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7675));
		IL2CPP_RUNTIME_CLASS_INIT(SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_133 = ((SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504_StaticFields*)il2cpp_codegen_static_fields_for(SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504_il2cpp_TypeInfo_var))->get_steamVRFixUpRotation_7();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7676));
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_134 = SteamVR_Action_Skeleton_Source_get_boneRotations_mCD0B038517CA7A79945AD615082F05B25B0EDA20_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7676));
		NullCheck(L_134);
		int32_t L_135 = 0;
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_136 = (L_134)->GetAt(static_cast<il2cpp_array_size_t>(L_135));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7677));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_137 = Quaternion_op_Multiply_mDB9F738AA8160E3D85549F4FEDA23BC658B5A790(L_133, L_136, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7677));
		NullCheck(L_132);
		(L_132)->SetAt(static_cast<il2cpp_array_size_t>(0), (Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 )L_137);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7601));
	}

IL_037b:
	{
		// UpdateSkeletalSummaryData(summaryDataType, true);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7602));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7678));
		int32_t L_138 = SteamVR_Action_Skeleton_Source_get_summaryDataType_mE0AB648E0339C2A082B81B15AA2D97854E8BB8CC_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7678));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7679));
		SteamVR_Action_Skeleton_Source_UpdateSkeletalSummaryData_m66FD26ED63C98F872AB1DB6810616785C96BE3A2(__this, L_138, (bool)1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7679));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7603));
	}

IL_038a:
	{
		// if (changed == false)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7604));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7680));
		bool L_139 = VirtFuncInvoker0< bool >::Invoke(31 /* System.Boolean Valve.VR.SteamVR_Action_In_Source::get_changed() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7680));
		V_15 = (bool)((((int32_t)L_139) == ((int32_t)0))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7605));
		bool L_140 = V_15;
		if (!L_140)
		{
			goto IL_0435;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7606));
		// for (int boneIndex = 0; boneIndex < tempBoneTransforms.Length; boneIndex++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7607));
		V_16 = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7608));
		goto IL_041f;
	}

IL_03a2:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7609));
		// if (Vector3.Distance(lastBonePositions[boneIndex], bonePositions[boneIndex]) > changeTolerance)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7610));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7681));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_141 = SteamVR_Action_Skeleton_Source_get_lastBonePositions_m99D1C7B8A05E646777AC85CFC0ED2FF0953C3AB9_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7681));
		int32_t L_142 = V_16;
		NullCheck(L_141);
		int32_t L_143 = L_142;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_144 = (L_141)->GetAt(static_cast<il2cpp_array_size_t>(L_143));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7682));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_145 = SteamVR_Action_Skeleton_Source_get_bonePositions_mA0C01DDB9EAB9749BBBEDBCFF72582812AB9C195_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7682));
		int32_t L_146 = V_16;
		NullCheck(L_145);
		int32_t L_147 = L_146;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_148 = (L_145)->GetAt(static_cast<il2cpp_array_size_t>(L_147));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7683));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		float L_149 = Vector3_Distance_mE316E10B9B319A5C2A29F86E028740FD528149E7(L_144, L_148, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7683));
		float L_150 = ((SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 *)__this)->get_changeTolerance_12();
		V_17 = (bool)((((float)L_149) > ((float)L_150))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7611));
		bool L_151 = V_17;
		if (!L_151)
		{
			goto IL_03db;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7612));
		// changed = true;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7613));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7684));
		VirtActionInvoker1< bool >::Invoke(32 /* System.Void Valve.VR.SteamVR_Action_In_Source::set_changed(System.Boolean) */, __this, (bool)1);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7684));
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7614));
		goto IL_0434;
	}

IL_03db:
	{
		// if (Mathf.Abs(Quaternion.Angle(lastBoneRotations[boneIndex], boneRotations[boneIndex])) > changeTolerance)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7615));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7685));
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_152 = SteamVR_Action_Skeleton_Source_get_lastBoneRotations_m14A98028FB99C0404733364FFD3C187D2A53261C_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7685));
		int32_t L_153 = V_16;
		NullCheck(L_152);
		int32_t L_154 = L_153;
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_155 = (L_152)->GetAt(static_cast<il2cpp_array_size_t>(L_154));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7686));
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_156 = SteamVR_Action_Skeleton_Source_get_boneRotations_mCD0B038517CA7A79945AD615082F05B25B0EDA20_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7686));
		int32_t L_157 = V_16;
		NullCheck(L_156);
		int32_t L_158 = L_157;
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_159 = (L_156)->GetAt(static_cast<il2cpp_array_size_t>(L_158));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7687));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		float L_160 = Quaternion_Angle_m09599D660B724D330E5C7FE2FB1C8716161B3DD1(L_155, L_159, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7687));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7688));
		IL2CPP_RUNTIME_CLASS_INIT(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var);
		float L_161 = fabsf(L_160);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7688));
		float L_162 = ((SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 *)__this)->get_changeTolerance_12();
		V_18 = (bool)((((float)L_161) > ((float)L_162))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7616));
		bool L_163 = V_18;
		if (!L_163)
		{
			goto IL_0418;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7617));
		// changed = true;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7618));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7689));
		VirtActionInvoker1< bool >::Invoke(32 /* System.Void Valve.VR.SteamVR_Action_In_Source::set_changed(System.Boolean) */, __this, (bool)1);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7689));
		// break;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7619));
		goto IL_0434;
	}

IL_0418:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7620));
		// for (int boneIndex = 0; boneIndex < tempBoneTransforms.Length; boneIndex++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7621));
		int32_t L_164 = V_16;
		V_16 = ((int32_t)il2cpp_codegen_add((int32_t)L_164, (int32_t)1));
	}

IL_041f:
	{
		// for (int boneIndex = 0; boneIndex < tempBoneTransforms.Length; boneIndex++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7622));
		int32_t L_165 = V_16;
		VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B* L_166 = __this->get_tempBoneTransforms_60();
		NullCheck(L_166);
		V_19 = (bool)((((int32_t)L_165) < ((int32_t)(((int32_t)((int32_t)(((RuntimeArray*)L_166)->max_length))))))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7623));
		bool L_167 = V_19;
		if (L_167)
		{
			goto IL_03a2;
		}
	}

IL_0434:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7624));
	}

IL_0435:
	{
		// if (changed)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7625));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7690));
		bool L_168 = VirtFuncInvoker0< bool >::Invoke(31 /* System.Boolean Valve.VR.SteamVR_Action_In_Source::get_changed() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7690));
		V_20 = L_168;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7626));
		bool L_169 = V_20;
		if (!L_169)
		{
			goto IL_044d;
		}
	}
	{
		// changedTime = Time.realtimeSinceStartup;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7627));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7691));
		float L_170 = Time_get_realtimeSinceStartup_mCA1086EC9DFCF135F77BC46D3B7127711EA3DE03(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7691));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7692));
		SteamVR_Action_In_Source_set_changedTime_mD1EE7D0BD28058E1901FF671FB77587F2FCA35DA_inline(__this, L_170, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7692));
	}

IL_044d:
	{
		// if (skipStateAndEventUpdates == false)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7628));
		bool L_171 = ___skipStateAndEventUpdates0;
		V_21 = (bool)((((int32_t)L_171) == ((int32_t)0))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7629));
		bool L_172 = V_21;
		if (!L_172)
		{
			goto IL_045e;
		}
	}
	{
		// CheckAndSendEvents();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7630));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7693));
		VirtActionInvoker0::Invoke(51 /* System.Void Valve.VR.SteamVR_Action_Pose_Source::CheckAndSendEvents() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7693));
	}

IL_045e:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7631));
		return;
	}
}
// System.Int32 Valve.VR.SteamVR_Action_Skeleton_Source::get_boneCount()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Skeleton_Source_get_boneCount_m993C474DB459FA2B9A75B36F266729761AF99FFC (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_boneCount_m993C474DB459FA2B9A75B36F266729761AF99FFC_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_boneCount_m993C474DB459FA2B9A75B36F266729761AF99FFC_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7694));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7695));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7696));
		// public int boneCount { get { return (int)GetBoneCount(); } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7697));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7699));
		uint32_t L_0 = SteamVR_Action_Skeleton_Source_GetBoneCount_m4EC7F17792380A78FF5B7699E35FB98ED5081E8C(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7699));
		V_0 = L_0;
		goto IL_000a;
	}

IL_000a:
	{
		// public int boneCount { get { return (int)GetBoneCount(); } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7698));
		int32_t L_1 = V_0;
		return L_1;
	}
}
// System.UInt32 Valve.VR.SteamVR_Action_Skeleton_Source::GetBoneCount()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR uint32_t SteamVR_Action_Skeleton_Source_GetBoneCount_m4EC7F17792380A78FF5B7699E35FB98ED5081E8C (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_GetBoneCount_m4EC7F17792380A78FF5B7699E35FB98ED5081E8C_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	uint32_t V_0 = 0;
	int32_t V_1 = 0;
	bool V_2 = false;
	uint64_t V_3 = 0;
	uint32_t V_4 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_GetBoneCount_m4EC7F17792380A78FF5B7699E35FB98ED5081E8C_RuntimeMethod_var, methodExecutionContextThis, NULL, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7700));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7701));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7702));
		// uint boneCount = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7703));
		V_0 = 0;
		// EVRInputError error = OpenVR.Input.GetBoneCount(handle, ref boneCount);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7704));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7710));
		IL2CPP_RUNTIME_CLASS_INIT(OpenVR_tE75A98955EC4AA4B219CE822AA43E79E4CB99DB3_il2cpp_TypeInfo_var);
		CVRInput_t2BE4417A3C1EA0C6CF647B0706BF37F886CE599B * L_0 = OpenVR_get_Input_m904FD790D785E944EE58513F589E862530386414(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7710));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7711));
		uint64_t L_1 = SteamVR_Action_Source_get_handle_mE4C63F9ADB5ACA5E72265B62C0908ACF8EF73A01(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7711));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7712));
		NullCheck(L_0);
		int32_t L_2 = CVRInput_GetBoneCount_m2D8616427315CB0D0C2C46CA302B10E51E5CB43E(L_0, L_1, (uint32_t*)(&V_0), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7712));
		V_1 = L_2;
		// if (error != EVRInputError.None)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7705));
		int32_t L_3 = V_1;
		V_2 = (bool)((!(((uint32_t)L_3) <= ((uint32_t)0)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7706));
		bool L_4 = V_2;
		if (!L_4)
		{
			goto IL_0071;
		}
	}
	{
		// Debug.LogError("<b>[SteamVR]</b> GetBoneCount error (" + fullPath + "): " + error.ToString() + " handle: " + handle.ToString());
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7707));
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_5 = (StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E*)(StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E*)SZArrayNew(StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E_il2cpp_TypeInfo_var, (uint32_t)6);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_6 = L_5;
		NullCheck(L_6);
		ArrayElementTypeCheck (L_6, _stringLiteral74FBFA22F0AC7FDD2F060A9187A8A74078A10F16);
		(L_6)->SetAt(static_cast<il2cpp_array_size_t>(0), (String_t*)_stringLiteral74FBFA22F0AC7FDD2F060A9187A8A74078A10F16);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_7 = L_6;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7713));
		String_t* L_8 = SteamVR_Action_Source_get_fullPath_mB0C33E6C1B4F91E908236055FFAE027ECB3ED996(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7713));
		NullCheck(L_7);
		ArrayElementTypeCheck (L_7, L_8);
		(L_7)->SetAt(static_cast<il2cpp_array_size_t>(1), (String_t*)L_8);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_9 = L_7;
		NullCheck(L_9);
		ArrayElementTypeCheck (L_9, _stringLiteralE6D56E05F32996CA7E5AE21BC90D49044C0BF356);
		(L_9)->SetAt(static_cast<il2cpp_array_size_t>(2), (String_t*)_stringLiteralE6D56E05F32996CA7E5AE21BC90D49044C0BF356);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_10 = L_9;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7714));
		RuntimeObject * L_11 = Box(EVRInputError_tC8741BE3044407E8FA26F282526B259D93DBF22F_il2cpp_TypeInfo_var, (&V_1));
		NullCheck(L_11);
		String_t* L_12 = VirtFuncInvoker0< String_t* >::Invoke(3 /* System.String System.Object::ToString() */, L_11);
		V_1 = *(int32_t*)UnBox(L_11);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7714));
		NullCheck(L_10);
		ArrayElementTypeCheck (L_10, L_12);
		(L_10)->SetAt(static_cast<il2cpp_array_size_t>(3), (String_t*)L_12);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_13 = L_10;
		NullCheck(L_13);
		ArrayElementTypeCheck (L_13, _stringLiteral18B39452A606090B97AA8D84240CC83BE3E5D62B);
		(L_13)->SetAt(static_cast<il2cpp_array_size_t>(4), (String_t*)_stringLiteral18B39452A606090B97AA8D84240CC83BE3E5D62B);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_14 = L_13;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7715));
		uint64_t L_15 = SteamVR_Action_Source_get_handle_mE4C63F9ADB5ACA5E72265B62C0908ACF8EF73A01(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7715));
		V_3 = L_15;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7716));
		String_t* L_16 = UInt64_ToString_mF0E40B7459C207B89A1C8C04CE7F183AC0E6D672((uint64_t*)(&V_3), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7716));
		NullCheck(L_14);
		ArrayElementTypeCheck (L_14, L_16);
		(L_14)->SetAt(static_cast<il2cpp_array_size_t>(5), (String_t*)L_16);
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7717));
		String_t* L_17 = String_Concat_m232E857CA5107EA6AC52E7DD7018716C021F237B(L_14, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7717));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7718));
		IL2CPP_RUNTIME_CLASS_INIT(Debug_t7B5FCB117E2FD63B6838BC52821B252E2BFB61C4_il2cpp_TypeInfo_var);
		Debug_LogError_m3BCF9B78263152261565DCA9DB7D55F0C391ED29(L_17, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7718));
	}

IL_0071:
	{
		// return boneCount;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7708));
		uint32_t L_18 = V_0;
		V_4 = L_18;
		goto IL_0076;
	}

IL_0076:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7709));
		uint32_t L_19 = V_4;
		return L_19;
	}
}
// System.Int32[] Valve.VR.SteamVR_Action_Skeleton_Source::get_boneHierarchy()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83* SteamVR_Action_Skeleton_Source_get_boneHierarchy_mEB8E9840922D07A185E20B6DC5BF23BABE6E36CE (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_boneHierarchy_mEB8E9840922D07A185E20B6DC5BF23BABE6E36CE_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83* V_0 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_boneHierarchy_mEB8E9840922D07A185E20B6DC5BF23BABE6E36CE_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7719));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7720));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7721));
		// public int[] boneHierarchy { get { return GetBoneHierarchy(); } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7722));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7724));
		Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83* L_0 = SteamVR_Action_Skeleton_Source_GetBoneHierarchy_m87C2A7C088DCA2527B23F2054C62EB27234DFF78(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7724));
		V_0 = L_0;
		goto IL_000a;
	}

IL_000a:
	{
		// public int[] boneHierarchy { get { return GetBoneHierarchy(); } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7723));
		Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83* L_1 = V_0;
		return L_1;
	}
}
// System.Int32[] Valve.VR.SteamVR_Action_Skeleton_Source::GetBoneHierarchy()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83* SteamVR_Action_Skeleton_Source_GetBoneHierarchy_m87C2A7C088DCA2527B23F2054C62EB27234DFF78 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_GetBoneHierarchy_m87C2A7C088DCA2527B23F2054C62EB27234DFF78_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83* V_1 = NULL;
	int32_t V_2 = 0;
	bool V_3 = false;
	uint64_t V_4 = 0;
	Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83* V_5 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1), (&V_2));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_GetBoneHierarchy_m87C2A7C088DCA2527B23F2054C62EB27234DFF78_RuntimeMethod_var, methodExecutionContextThis, NULL, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7725));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7726));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7727));
		// int boneCount = (int)GetBoneCount();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7728));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7736));
		uint32_t L_0 = SteamVR_Action_Skeleton_Source_GetBoneCount_m4EC7F17792380A78FF5B7699E35FB98ED5081E8C(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7736));
		V_0 = L_0;
		// int[] parentIndicies = new int[boneCount];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7729));
		int32_t L_1 = V_0;
		Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83* L_2 = (Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83*)(Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83*)SZArrayNew(Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83_il2cpp_TypeInfo_var, (uint32_t)L_1);
		V_1 = L_2;
		// EVRInputError error = OpenVR.Input.GetBoneHierarchy(handle, parentIndicies);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7730));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7737));
		IL2CPP_RUNTIME_CLASS_INIT(OpenVR_tE75A98955EC4AA4B219CE822AA43E79E4CB99DB3_il2cpp_TypeInfo_var);
		CVRInput_t2BE4417A3C1EA0C6CF647B0706BF37F886CE599B * L_3 = OpenVR_get_Input_m904FD790D785E944EE58513F589E862530386414(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7737));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7738));
		uint64_t L_4 = SteamVR_Action_Source_get_handle_mE4C63F9ADB5ACA5E72265B62C0908ACF8EF73A01(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7738));
		Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83* L_5 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7739));
		NullCheck(L_3);
		int32_t L_6 = CVRInput_GetBoneHierarchy_mC4643B8296FB4397833F6BB337B93B21D69312F2(L_3, L_4, L_5, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7739));
		V_2 = L_6;
		// if (error != EVRInputError.None)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7731));
		int32_t L_7 = V_2;
		V_3 = (bool)((!(((uint32_t)L_7) <= ((uint32_t)0)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7732));
		bool L_8 = V_3;
		if (!L_8)
		{
			goto IL_007d;
		}
	}
	{
		// Debug.LogError("<b>[SteamVR]</b> GetBoneHierarchy error (" + fullPath + "): " + error.ToString() + " handle: " + handle.ToString());
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7733));
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_9 = (StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E*)(StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E*)SZArrayNew(StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E_il2cpp_TypeInfo_var, (uint32_t)6);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_10 = L_9;
		NullCheck(L_10);
		ArrayElementTypeCheck (L_10, _stringLiteral973389CC7163D5EF9A40BE4685E4E55B5CBBC66F);
		(L_10)->SetAt(static_cast<il2cpp_array_size_t>(0), (String_t*)_stringLiteral973389CC7163D5EF9A40BE4685E4E55B5CBBC66F);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_11 = L_10;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7740));
		String_t* L_12 = SteamVR_Action_Source_get_fullPath_mB0C33E6C1B4F91E908236055FFAE027ECB3ED996(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7740));
		NullCheck(L_11);
		ArrayElementTypeCheck (L_11, L_12);
		(L_11)->SetAt(static_cast<il2cpp_array_size_t>(1), (String_t*)L_12);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_13 = L_11;
		NullCheck(L_13);
		ArrayElementTypeCheck (L_13, _stringLiteralE6D56E05F32996CA7E5AE21BC90D49044C0BF356);
		(L_13)->SetAt(static_cast<il2cpp_array_size_t>(2), (String_t*)_stringLiteralE6D56E05F32996CA7E5AE21BC90D49044C0BF356);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_14 = L_13;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7741));
		RuntimeObject * L_15 = Box(EVRInputError_tC8741BE3044407E8FA26F282526B259D93DBF22F_il2cpp_TypeInfo_var, (&V_2));
		NullCheck(L_15);
		String_t* L_16 = VirtFuncInvoker0< String_t* >::Invoke(3 /* System.String System.Object::ToString() */, L_15);
		V_2 = *(int32_t*)UnBox(L_15);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7741));
		NullCheck(L_14);
		ArrayElementTypeCheck (L_14, L_16);
		(L_14)->SetAt(static_cast<il2cpp_array_size_t>(3), (String_t*)L_16);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_17 = L_14;
		NullCheck(L_17);
		ArrayElementTypeCheck (L_17, _stringLiteral18B39452A606090B97AA8D84240CC83BE3E5D62B);
		(L_17)->SetAt(static_cast<il2cpp_array_size_t>(4), (String_t*)_stringLiteral18B39452A606090B97AA8D84240CC83BE3E5D62B);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_18 = L_17;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7742));
		uint64_t L_19 = SteamVR_Action_Source_get_handle_mE4C63F9ADB5ACA5E72265B62C0908ACF8EF73A01(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7742));
		V_4 = L_19;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7743));
		String_t* L_20 = UInt64_ToString_mF0E40B7459C207B89A1C8C04CE7F183AC0E6D672((uint64_t*)(&V_4), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7743));
		NullCheck(L_18);
		ArrayElementTypeCheck (L_18, L_20);
		(L_18)->SetAt(static_cast<il2cpp_array_size_t>(5), (String_t*)L_20);
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7744));
		String_t* L_21 = String_Concat_m232E857CA5107EA6AC52E7DD7018716C021F237B(L_18, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7744));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7745));
		IL2CPP_RUNTIME_CLASS_INIT(Debug_t7B5FCB117E2FD63B6838BC52821B252E2BFB61C4_il2cpp_TypeInfo_var);
		Debug_LogError_m3BCF9B78263152261565DCA9DB7D55F0C391ED29(L_21, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7745));
	}

IL_007d:
	{
		// return parentIndicies;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7734));
		Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83* L_22 = V_1;
		V_5 = L_22;
		goto IL_0082;
	}

IL_0082:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7735));
		Int32U5BU5D_t2B9E4FDDDB9F0A00EC0AC631BA2DA915EB1ECF83* L_23 = V_5;
		return L_23;
	}
}
// System.String Valve.VR.SteamVR_Action_Skeleton_Source::GetBoneName(System.Int32)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR String_t* SteamVR_Action_Skeleton_Source_GetBoneName_m67234F0D980501AD00E029B0B30415B8F18856F9 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, int32_t ___boneIndex0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_GetBoneName_m67234F0D980501AD00E029B0B30415B8F18856F9_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	StringBuilder_t * V_0 = NULL;
	int32_t V_1 = 0;
	bool V_2 = false;
	uint64_t V_3 = 0;
	String_t* V_4 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___boneIndex0));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_GetBoneName_m67234F0D980501AD00E029B0B30415B8F18856F9_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7746));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7747));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7748));
		// StringBuilder stringBuilder = new StringBuilder(255);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7749));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7756));
		StringBuilder_t * L_0 = (StringBuilder_t *)il2cpp_codegen_object_new(StringBuilder_t_il2cpp_TypeInfo_var);
		StringBuilder__ctor_m1C0F2D97B838537A2D0F64033AE4EF02D150A956(L_0, ((int32_t)255), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7756));
		V_0 = L_0;
		// EVRInputError error = OpenVR.Input.GetBoneName(handle, boneIndex, stringBuilder, 255);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7750));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7757));
		IL2CPP_RUNTIME_CLASS_INIT(OpenVR_tE75A98955EC4AA4B219CE822AA43E79E4CB99DB3_il2cpp_TypeInfo_var);
		CVRInput_t2BE4417A3C1EA0C6CF647B0706BF37F886CE599B * L_1 = OpenVR_get_Input_m904FD790D785E944EE58513F589E862530386414(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7757));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7758));
		uint64_t L_2 = SteamVR_Action_Source_get_handle_mE4C63F9ADB5ACA5E72265B62C0908ACF8EF73A01(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7758));
		int32_t L_3 = ___boneIndex0;
		StringBuilder_t * L_4 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7759));
		NullCheck(L_1);
		int32_t L_5 = CVRInput_GetBoneName_m8A4CA5E250538DBE77B7B80D9D3F8EA438AB2063(L_1, L_2, L_3, L_4, ((int32_t)255), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7759));
		V_1 = L_5;
		// if (error != EVRInputError.None)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7751));
		int32_t L_6 = V_1;
		V_2 = (bool)((!(((uint32_t)L_6) <= ((uint32_t)0)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7752));
		bool L_7 = V_2;
		if (!L_7)
		{
			goto IL_007f;
		}
	}
	{
		// Debug.LogError("<b>[SteamVR]</b> GetBoneName error (" + fullPath + "): " + error.ToString() + " handle: " + handle.ToString());
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7753));
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_8 = (StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E*)(StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E*)SZArrayNew(StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E_il2cpp_TypeInfo_var, (uint32_t)6);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_9 = L_8;
		NullCheck(L_9);
		ArrayElementTypeCheck (L_9, _stringLiteral7025DBCB2822E392650101D811F717F7B853C54B);
		(L_9)->SetAt(static_cast<il2cpp_array_size_t>(0), (String_t*)_stringLiteral7025DBCB2822E392650101D811F717F7B853C54B);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_10 = L_9;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7760));
		String_t* L_11 = SteamVR_Action_Source_get_fullPath_mB0C33E6C1B4F91E908236055FFAE027ECB3ED996(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7760));
		NullCheck(L_10);
		ArrayElementTypeCheck (L_10, L_11);
		(L_10)->SetAt(static_cast<il2cpp_array_size_t>(1), (String_t*)L_11);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_12 = L_10;
		NullCheck(L_12);
		ArrayElementTypeCheck (L_12, _stringLiteralE6D56E05F32996CA7E5AE21BC90D49044C0BF356);
		(L_12)->SetAt(static_cast<il2cpp_array_size_t>(2), (String_t*)_stringLiteralE6D56E05F32996CA7E5AE21BC90D49044C0BF356);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_13 = L_12;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7761));
		RuntimeObject * L_14 = Box(EVRInputError_tC8741BE3044407E8FA26F282526B259D93DBF22F_il2cpp_TypeInfo_var, (&V_1));
		NullCheck(L_14);
		String_t* L_15 = VirtFuncInvoker0< String_t* >::Invoke(3 /* System.String System.Object::ToString() */, L_14);
		V_1 = *(int32_t*)UnBox(L_14);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7761));
		NullCheck(L_13);
		ArrayElementTypeCheck (L_13, L_15);
		(L_13)->SetAt(static_cast<il2cpp_array_size_t>(3), (String_t*)L_15);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_16 = L_13;
		NullCheck(L_16);
		ArrayElementTypeCheck (L_16, _stringLiteral18B39452A606090B97AA8D84240CC83BE3E5D62B);
		(L_16)->SetAt(static_cast<il2cpp_array_size_t>(4), (String_t*)_stringLiteral18B39452A606090B97AA8D84240CC83BE3E5D62B);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_17 = L_16;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7762));
		uint64_t L_18 = SteamVR_Action_Source_get_handle_mE4C63F9ADB5ACA5E72265B62C0908ACF8EF73A01(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7762));
		V_3 = L_18;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7763));
		String_t* L_19 = UInt64_ToString_mF0E40B7459C207B89A1C8C04CE7F183AC0E6D672((uint64_t*)(&V_3), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7763));
		NullCheck(L_17);
		ArrayElementTypeCheck (L_17, L_19);
		(L_17)->SetAt(static_cast<il2cpp_array_size_t>(5), (String_t*)L_19);
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7764));
		String_t* L_20 = String_Concat_m232E857CA5107EA6AC52E7DD7018716C021F237B(L_17, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7764));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7765));
		IL2CPP_RUNTIME_CLASS_INIT(Debug_t7B5FCB117E2FD63B6838BC52821B252E2BFB61C4_il2cpp_TypeInfo_var);
		Debug_LogError_m3BCF9B78263152261565DCA9DB7D55F0C391ED29(L_20, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7765));
	}

IL_007f:
	{
		// return stringBuilder.ToString();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7754));
		StringBuilder_t * L_21 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7766));
		NullCheck(L_21);
		String_t* L_22 = VirtFuncInvoker0< String_t* >::Invoke(3 /* System.String System.Object::ToString() */, L_21);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7766));
		V_4 = L_22;
		goto IL_0089;
	}

IL_0089:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7755));
		String_t* L_23 = V_4;
		return L_23;
	}
}
// SteamVR_Utils_RigidTransform[] Valve.VR.SteamVR_Action_Skeleton_Source::GetReferenceTransforms(Valve.VR.EVRSkeletalTransformSpace,Valve.VR.EVRSkeletalReferencePose)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RigidTransformU5BU5D_tC98EB3576009E5D825D0D43671A65D32A2449ECC* SteamVR_Action_Skeleton_Source_GetReferenceTransforms_mD97ED9032334370252095D9ABCED25D4D5533B92 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, int32_t ___transformSpace0, int32_t ___referencePose1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_GetReferenceTransforms_mD97ED9032334370252095D9ABCED25D4D5533B92_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	RigidTransformU5BU5D_tC98EB3576009E5D825D0D43671A65D32A2449ECC* V_0 = NULL;
	VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B* V_1 = NULL;
	int32_t V_2 = 0;
	bool V_3 = false;
	uint64_t V_4 = 0;
	int32_t V_5 = 0;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_6;
	memset((&V_6), 0, sizeof(V_6));
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  V_7;
	memset((&V_7), 0, sizeof(V_7));
	bool V_8 = false;
	bool V_9 = false;
	Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  V_10;
	memset((&V_10), 0, sizeof(V_10));
	RigidTransformU5BU5D_tC98EB3576009E5D825D0D43671A65D32A2449ECC* V_11 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___transformSpace0), (&___referencePose1));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1), (&V_2), (&V_5), (&V_6), (&V_7), (&V_10));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_GetReferenceTransforms_mD97ED9032334370252095D9ABCED25D4D5533B92_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7767));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7768));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7769));
		// SteamVR_Utils.RigidTransform[] transforms = new SteamVR_Utils.RigidTransform[GetBoneCount()];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7770));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7794));
		uint32_t L_0 = SteamVR_Action_Skeleton_Source_GetBoneCount_m4EC7F17792380A78FF5B7699E35FB98ED5081E8C(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7794));
		RigidTransformU5BU5D_tC98EB3576009E5D825D0D43671A65D32A2449ECC* L_1 = (RigidTransformU5BU5D_tC98EB3576009E5D825D0D43671A65D32A2449ECC*)(RigidTransformU5BU5D_tC98EB3576009E5D825D0D43671A65D32A2449ECC*)SZArrayNew(RigidTransformU5BU5D_tC98EB3576009E5D825D0D43671A65D32A2449ECC_il2cpp_TypeInfo_var, (uint32_t)L_0);
		V_0 = L_1;
		// VRBoneTransform_t[] boneTransforms = new VRBoneTransform_t[transforms.Length];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7771));
		RigidTransformU5BU5D_tC98EB3576009E5D825D0D43671A65D32A2449ECC* L_2 = V_0;
		NullCheck(L_2);
		VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B* L_3 = (VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B*)(VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B*)SZArrayNew(VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B_il2cpp_TypeInfo_var, (uint32_t)(((int32_t)((int32_t)(((RuntimeArray*)L_2)->max_length)))));
		V_1 = L_3;
		// EVRInputError error = OpenVR.Input.GetSkeletalReferenceTransforms(handle, transformSpace, referencePose, boneTransforms);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7772));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7795));
		IL2CPP_RUNTIME_CLASS_INIT(OpenVR_tE75A98955EC4AA4B219CE822AA43E79E4CB99DB3_il2cpp_TypeInfo_var);
		CVRInput_t2BE4417A3C1EA0C6CF647B0706BF37F886CE599B * L_4 = OpenVR_get_Input_m904FD790D785E944EE58513F589E862530386414(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7795));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7796));
		uint64_t L_5 = SteamVR_Action_Source_get_handle_mE4C63F9ADB5ACA5E72265B62C0908ACF8EF73A01(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7796));
		int32_t L_6 = ___transformSpace0;
		int32_t L_7 = ___referencePose1;
		VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B* L_8 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7797));
		NullCheck(L_4);
		int32_t L_9 = CVRInput_GetSkeletalReferenceTransforms_m917C75E8B7E3378FE568EBFD4B594C9731FA0B9B(L_4, L_5, L_6, L_7, L_8, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7797));
		V_2 = L_9;
		// if (error != EVRInputError.None)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7773));
		int32_t L_10 = V_2;
		V_3 = (bool)((!(((uint32_t)L_10) <= ((uint32_t)0)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7774));
		bool L_11 = V_3;
		if (!L_11)
		{
			goto IL_0086;
		}
	}
	{
		// Debug.LogError("<b>[SteamVR]</b> GetSkeletalReferenceTransforms error (" + fullPath + "): " + error.ToString() + " handle: " + handle.ToString());
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7775));
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_12 = (StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E*)(StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E*)SZArrayNew(StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E_il2cpp_TypeInfo_var, (uint32_t)6);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_13 = L_12;
		NullCheck(L_13);
		ArrayElementTypeCheck (L_13, _stringLiteral1315AF0D095A22997AA7C177E47A3203C2139E1F);
		(L_13)->SetAt(static_cast<il2cpp_array_size_t>(0), (String_t*)_stringLiteral1315AF0D095A22997AA7C177E47A3203C2139E1F);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_14 = L_13;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7798));
		String_t* L_15 = SteamVR_Action_Source_get_fullPath_mB0C33E6C1B4F91E908236055FFAE027ECB3ED996(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7798));
		NullCheck(L_14);
		ArrayElementTypeCheck (L_14, L_15);
		(L_14)->SetAt(static_cast<il2cpp_array_size_t>(1), (String_t*)L_15);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_16 = L_14;
		NullCheck(L_16);
		ArrayElementTypeCheck (L_16, _stringLiteralE6D56E05F32996CA7E5AE21BC90D49044C0BF356);
		(L_16)->SetAt(static_cast<il2cpp_array_size_t>(2), (String_t*)_stringLiteralE6D56E05F32996CA7E5AE21BC90D49044C0BF356);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_17 = L_16;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7799));
		RuntimeObject * L_18 = Box(EVRInputError_tC8741BE3044407E8FA26F282526B259D93DBF22F_il2cpp_TypeInfo_var, (&V_2));
		NullCheck(L_18);
		String_t* L_19 = VirtFuncInvoker0< String_t* >::Invoke(3 /* System.String System.Object::ToString() */, L_18);
		V_2 = *(int32_t*)UnBox(L_18);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7799));
		NullCheck(L_17);
		ArrayElementTypeCheck (L_17, L_19);
		(L_17)->SetAt(static_cast<il2cpp_array_size_t>(3), (String_t*)L_19);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_20 = L_17;
		NullCheck(L_20);
		ArrayElementTypeCheck (L_20, _stringLiteral18B39452A606090B97AA8D84240CC83BE3E5D62B);
		(L_20)->SetAt(static_cast<il2cpp_array_size_t>(4), (String_t*)_stringLiteral18B39452A606090B97AA8D84240CC83BE3E5D62B);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_21 = L_20;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7800));
		uint64_t L_22 = SteamVR_Action_Source_get_handle_mE4C63F9ADB5ACA5E72265B62C0908ACF8EF73A01(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7800));
		V_4 = L_22;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7801));
		String_t* L_23 = UInt64_ToString_mF0E40B7459C207B89A1C8C04CE7F183AC0E6D672((uint64_t*)(&V_4), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7801));
		NullCheck(L_21);
		ArrayElementTypeCheck (L_21, L_23);
		(L_21)->SetAt(static_cast<il2cpp_array_size_t>(5), (String_t*)L_23);
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7802));
		String_t* L_24 = String_Concat_m232E857CA5107EA6AC52E7DD7018716C021F237B(L_21, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7802));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7803));
		IL2CPP_RUNTIME_CLASS_INIT(Debug_t7B5FCB117E2FD63B6838BC52821B252E2BFB61C4_il2cpp_TypeInfo_var);
		Debug_LogError_m3BCF9B78263152261565DCA9DB7D55F0C391ED29(L_24, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7803));
	}

IL_0086:
	{
		// for (int transformIndex = 0; transformIndex < boneTransforms.Length; transformIndex++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7776));
		V_5 = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7777));
		goto IL_0136;
	}

IL_008e:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7778));
		// Vector3 position = new Vector3(-boneTransforms[transformIndex].position.v0, boneTransforms[transformIndex].position.v1, boneTransforms[transformIndex].position.v2);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7779));
		VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B* L_25 = V_1;
		int32_t L_26 = V_5;
		NullCheck(L_25);
		HmdVector4_t_t97F0B9E146F0A0E38B243B3317E4B1095A8DD0C9 * L_27 = ((L_25)->GetAddressAt(static_cast<il2cpp_array_size_t>(L_26)))->get_address_of_position_0();
		float L_28 = L_27->get_v0_0();
		VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B* L_29 = V_1;
		int32_t L_30 = V_5;
		NullCheck(L_29);
		HmdVector4_t_t97F0B9E146F0A0E38B243B3317E4B1095A8DD0C9 * L_31 = ((L_29)->GetAddressAt(static_cast<il2cpp_array_size_t>(L_30)))->get_address_of_position_0();
		float L_32 = L_31->get_v1_1();
		VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B* L_33 = V_1;
		int32_t L_34 = V_5;
		NullCheck(L_33);
		HmdVector4_t_t97F0B9E146F0A0E38B243B3317E4B1095A8DD0C9 * L_35 = ((L_33)->GetAddressAt(static_cast<il2cpp_array_size_t>(L_34)))->get_address_of_position_0();
		float L_36 = L_35->get_v2_2();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7804));
		Vector3__ctor_m08F61F548AA5836D8789843ACB4A81E4963D2EE1((Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&V_6), ((-L_28)), L_32, L_36, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7804));
		// Quaternion rotation = new Quaternion(boneTransforms[transformIndex].orientation.x, -boneTransforms[transformIndex].orientation.y, -boneTransforms[transformIndex].orientation.z, boneTransforms[transformIndex].orientation.w);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7780));
		VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B* L_37 = V_1;
		int32_t L_38 = V_5;
		NullCheck(L_37);
		HmdQuaternionf_t_t83752025A54692367798FA15BDC82F30F4D97C11 * L_39 = ((L_37)->GetAddressAt(static_cast<il2cpp_array_size_t>(L_38)))->get_address_of_orientation_1();
		float L_40 = L_39->get_x_1();
		VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B* L_41 = V_1;
		int32_t L_42 = V_5;
		NullCheck(L_41);
		HmdQuaternionf_t_t83752025A54692367798FA15BDC82F30F4D97C11 * L_43 = ((L_41)->GetAddressAt(static_cast<il2cpp_array_size_t>(L_42)))->get_address_of_orientation_1();
		float L_44 = L_43->get_y_2();
		VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B* L_45 = V_1;
		int32_t L_46 = V_5;
		NullCheck(L_45);
		HmdQuaternionf_t_t83752025A54692367798FA15BDC82F30F4D97C11 * L_47 = ((L_45)->GetAddressAt(static_cast<il2cpp_array_size_t>(L_46)))->get_address_of_orientation_1();
		float L_48 = L_47->get_z_3();
		VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B* L_49 = V_1;
		int32_t L_50 = V_5;
		NullCheck(L_49);
		HmdQuaternionf_t_t83752025A54692367798FA15BDC82F30F4D97C11 * L_51 = ((L_49)->GetAddressAt(static_cast<il2cpp_array_size_t>(L_50)))->get_address_of_orientation_1();
		float L_52 = L_51->get_w_0();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7805));
		Quaternion__ctor_m7502F0C38E04C6DE24C965D1CAF278DDD02B9D61((Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357 *)(&V_7), L_40, ((-L_44)), ((-L_48)), L_52, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7805));
		// transforms[transformIndex] = new SteamVR_Utils.RigidTransform(position, rotation);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7781));
		RigidTransformU5BU5D_tC98EB3576009E5D825D0D43671A65D32A2449ECC* L_53 = V_0;
		int32_t L_54 = V_5;
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_55 = V_6;
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_56 = V_7;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7806));
		RigidTransform_t0E8A00F7013270B6B2254F29B4FFEAA6783CD905  L_57;
		memset((&L_57), 0, sizeof(L_57));
		RigidTransform__ctor_m8A80800C27705F4AF5CA6D008A8B6A74AFCCA1F2((&L_57), L_55, L_56, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7806));
		NullCheck(L_53);
		(L_53)->SetAt(static_cast<il2cpp_array_size_t>(L_54), (RigidTransform_t0E8A00F7013270B6B2254F29B4FFEAA6783CD905 )L_57);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7782));
		// for (int transformIndex = 0; transformIndex < boneTransforms.Length; transformIndex++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7783));
		int32_t L_58 = V_5;
		V_5 = ((int32_t)il2cpp_codegen_add((int32_t)L_58, (int32_t)1));
	}

IL_0136:
	{
		// for (int transformIndex = 0; transformIndex < boneTransforms.Length; transformIndex++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7784));
		int32_t L_59 = V_5;
		VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B* L_60 = V_1;
		NullCheck(L_60);
		V_8 = (bool)((((int32_t)L_59) < ((int32_t)(((int32_t)((int32_t)(((RuntimeArray*)L_60)->max_length))))))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7785));
		bool L_61 = V_8;
		if (L_61)
		{
			goto IL_008e;
		}
	}
	{
		// if (transforms.Length > 0)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7786));
		RigidTransformU5BU5D_tC98EB3576009E5D825D0D43671A65D32A2449ECC* L_62 = V_0;
		NullCheck(L_62);
		V_9 = (bool)((!(((uint32_t)(((RuntimeArray*)L_62)->max_length)) <= ((uint32_t)0)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7787));
		bool L_63 = V_9;
		if (!L_63)
		{
			goto IL_0183;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7788));
		// Quaternion qFixUpRot = Quaternion.AngleAxis(Mathf.PI * Mathf.Rad2Deg, Vector3.up);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7789));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7807));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_64 = Vector3_get_up_m6309EBC4E42D6D0B3D28056BD23D0331275306F7(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7807));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7808));
		IL2CPP_RUNTIME_CLASS_INIT(Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357_il2cpp_TypeInfo_var);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_65 = Quaternion_AngleAxis_m07DACF59F0403451DABB9BC991C53EE3301E88B0((180.0f), L_64, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7808));
		V_10 = L_65;
		// transforms[0].rot = qFixUpRot * transforms[0].rot;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7790));
		RigidTransformU5BU5D_tC98EB3576009E5D825D0D43671A65D32A2449ECC* L_66 = V_0;
		NullCheck(L_66);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_67 = V_10;
		RigidTransformU5BU5D_tC98EB3576009E5D825D0D43671A65D32A2449ECC* L_68 = V_0;
		NullCheck(L_68);
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_69 = ((L_68)->GetAddressAt(static_cast<il2cpp_array_size_t>(0)))->get_rot_1();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7809));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_70 = Quaternion_op_Multiply_mDB9F738AA8160E3D85549F4FEDA23BC658B5A790(L_67, L_69, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7809));
		((L_66)->GetAddressAt(static_cast<il2cpp_array_size_t>(0)))->set_rot_1(L_70);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7791));
	}

IL_0183:
	{
		// return transforms;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7792));
		RigidTransformU5BU5D_tC98EB3576009E5D825D0D43671A65D32A2449ECC* L_71 = V_0;
		V_11 = L_71;
		goto IL_0188;
	}

IL_0188:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7793));
		RigidTransformU5BU5D_tC98EB3576009E5D825D0D43671A65D32A2449ECC* L_72 = V_11;
		return L_72;
	}
}
// Valve.VR.EVRSkeletalTrackingLevel Valve.VR.SteamVR_Action_Skeleton_Source::get_skeletalTrackingLevel()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Skeleton_Source_get_skeletalTrackingLevel_mD592F4C9B67DBFB75FD15DF4755E51FC24C32769 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_skeletalTrackingLevel_mD592F4C9B67DBFB75FD15DF4755E51FC24C32769_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_skeletalTrackingLevel_mD592F4C9B67DBFB75FD15DF4755E51FC24C32769_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7810));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7811));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7812));
		// public EVRSkeletalTrackingLevel skeletalTrackingLevel { get { return GetSkeletalTrackingLevel(); } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7813));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7815));
		int32_t L_0 = SteamVR_Action_Skeleton_Source_GetSkeletalTrackingLevel_mE38D26E81AA2C43A3BECB3EBEE02C2C632104C3B(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7815));
		V_0 = L_0;
		goto IL_000a;
	}

IL_000a:
	{
		// public EVRSkeletalTrackingLevel skeletalTrackingLevel { get { return GetSkeletalTrackingLevel(); } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7814));
		int32_t L_1 = V_0;
		return L_1;
	}
}
// Valve.VR.EVRSkeletalTrackingLevel Valve.VR.SteamVR_Action_Skeleton_Source::GetSkeletalTrackingLevel()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Skeleton_Source_GetSkeletalTrackingLevel_mE38D26E81AA2C43A3BECB3EBEE02C2C632104C3B (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_GetSkeletalTrackingLevel_mE38D26E81AA2C43A3BECB3EBEE02C2C632104C3B_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	int32_t V_1 = 0;
	bool V_2 = false;
	uint64_t V_3 = 0;
	int32_t V_4 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_GetSkeletalTrackingLevel_mE38D26E81AA2C43A3BECB3EBEE02C2C632104C3B_RuntimeMethod_var, methodExecutionContextThis, NULL, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7816));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7817));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7818));
		// EVRSkeletalTrackingLevel skeletalTrackingLevel = EVRSkeletalTrackingLevel.VRSkeletalTracking_Estimated;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7819));
		V_0 = 0;
		// EVRInputError error = OpenVR.Input.GetSkeletalTrackingLevel(handle, ref skeletalTrackingLevel);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7820));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7826));
		IL2CPP_RUNTIME_CLASS_INIT(OpenVR_tE75A98955EC4AA4B219CE822AA43E79E4CB99DB3_il2cpp_TypeInfo_var);
		CVRInput_t2BE4417A3C1EA0C6CF647B0706BF37F886CE599B * L_0 = OpenVR_get_Input_m904FD790D785E944EE58513F589E862530386414(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7826));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7827));
		uint64_t L_1 = SteamVR_Action_Source_get_handle_mE4C63F9ADB5ACA5E72265B62C0908ACF8EF73A01(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7827));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7828));
		NullCheck(L_0);
		int32_t L_2 = CVRInput_GetSkeletalTrackingLevel_m7A1E94ED9540ABE0D8A58936E3FDDD6F5558B219(L_0, L_1, (int32_t*)(&V_0), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7828));
		V_1 = L_2;
		// if (error != EVRInputError.None)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7821));
		int32_t L_3 = V_1;
		V_2 = (bool)((!(((uint32_t)L_3) <= ((uint32_t)0)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7822));
		bool L_4 = V_2;
		if (!L_4)
		{
			goto IL_0071;
		}
	}
	{
		// Debug.LogError("<b>[SteamVR]</b> GetSkeletalTrackingLevel error (" + fullPath + "): " + error.ToString() + " handle: " + handle.ToString());
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7823));
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_5 = (StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E*)(StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E*)SZArrayNew(StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E_il2cpp_TypeInfo_var, (uint32_t)6);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_6 = L_5;
		NullCheck(L_6);
		ArrayElementTypeCheck (L_6, _stringLiteral465EC1A5848524F5DC24880091A15CDE065E1E7E);
		(L_6)->SetAt(static_cast<il2cpp_array_size_t>(0), (String_t*)_stringLiteral465EC1A5848524F5DC24880091A15CDE065E1E7E);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_7 = L_6;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7829));
		String_t* L_8 = SteamVR_Action_Source_get_fullPath_mB0C33E6C1B4F91E908236055FFAE027ECB3ED996(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7829));
		NullCheck(L_7);
		ArrayElementTypeCheck (L_7, L_8);
		(L_7)->SetAt(static_cast<il2cpp_array_size_t>(1), (String_t*)L_8);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_9 = L_7;
		NullCheck(L_9);
		ArrayElementTypeCheck (L_9, _stringLiteralE6D56E05F32996CA7E5AE21BC90D49044C0BF356);
		(L_9)->SetAt(static_cast<il2cpp_array_size_t>(2), (String_t*)_stringLiteralE6D56E05F32996CA7E5AE21BC90D49044C0BF356);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_10 = L_9;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7830));
		RuntimeObject * L_11 = Box(EVRInputError_tC8741BE3044407E8FA26F282526B259D93DBF22F_il2cpp_TypeInfo_var, (&V_1));
		NullCheck(L_11);
		String_t* L_12 = VirtFuncInvoker0< String_t* >::Invoke(3 /* System.String System.Object::ToString() */, L_11);
		V_1 = *(int32_t*)UnBox(L_11);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7830));
		NullCheck(L_10);
		ArrayElementTypeCheck (L_10, L_12);
		(L_10)->SetAt(static_cast<il2cpp_array_size_t>(3), (String_t*)L_12);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_13 = L_10;
		NullCheck(L_13);
		ArrayElementTypeCheck (L_13, _stringLiteral18B39452A606090B97AA8D84240CC83BE3E5D62B);
		(L_13)->SetAt(static_cast<il2cpp_array_size_t>(4), (String_t*)_stringLiteral18B39452A606090B97AA8D84240CC83BE3E5D62B);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_14 = L_13;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7831));
		uint64_t L_15 = SteamVR_Action_Source_get_handle_mE4C63F9ADB5ACA5E72265B62C0908ACF8EF73A01(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7831));
		V_3 = L_15;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7832));
		String_t* L_16 = UInt64_ToString_mF0E40B7459C207B89A1C8C04CE7F183AC0E6D672((uint64_t*)(&V_3), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7832));
		NullCheck(L_14);
		ArrayElementTypeCheck (L_14, L_16);
		(L_14)->SetAt(static_cast<il2cpp_array_size_t>(5), (String_t*)L_16);
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7833));
		String_t* L_17 = String_Concat_m232E857CA5107EA6AC52E7DD7018716C021F237B(L_14, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7833));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7834));
		IL2CPP_RUNTIME_CLASS_INIT(Debug_t7B5FCB117E2FD63B6838BC52821B252E2BFB61C4_il2cpp_TypeInfo_var);
		Debug_LogError_m3BCF9B78263152261565DCA9DB7D55F0C391ED29(L_17, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7834));
	}

IL_0071:
	{
		// return skeletalTrackingLevel;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7824));
		int32_t L_18 = V_0;
		V_4 = L_18;
		goto IL_0076;
	}

IL_0076:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7825));
		int32_t L_19 = V_4;
		return L_19;
	}
}
// Valve.VR.VRSkeletalSummaryData_t Valve.VR.SteamVR_Action_Skeleton_Source::GetSkeletalSummaryData(Valve.VR.EVRSummaryType,System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831  SteamVR_Action_Skeleton_Source_GetSkeletalSummaryData_m0DAFEAB1629AF85F54F616FF08013251AC1281CF (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, int32_t ___summaryType0, bool ___force1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_GetSkeletalSummaryData_m0DAFEAB1629AF85F54F616FF08013251AC1281CF_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___summaryType0), (&___force1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_GetSkeletalSummaryData_m0DAFEAB1629AF85F54F616FF08013251AC1281CF_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7835));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7836));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7837));
		// UpdateSkeletalSummaryData(summaryType, force);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7838));
		int32_t L_0 = ___summaryType0;
		bool L_1 = ___force1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7841));
		SteamVR_Action_Skeleton_Source_UpdateSkeletalSummaryData_m66FD26ED63C98F872AB1DB6810616785C96BE3A2(__this, L_0, L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7841));
		// return skeletalSummaryData;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7839));
		VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831  L_2 = __this->get_skeletalSummaryData_57();
		V_0 = L_2;
		goto IL_0013;
	}

IL_0013:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7840));
		VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831  L_3 = V_0;
		return L_3;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::UpdateSkeletalSummaryData(Valve.VR.EVRSummaryType,System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_UpdateSkeletalSummaryData_m66FD26ED63C98F872AB1DB6810616785C96BE3A2 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, int32_t ___summaryType0, bool ___force1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_UpdateSkeletalSummaryData_m66FD26ED63C98F872AB1DB6810616785C96BE3A2_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	int32_t V_1 = 0;
	bool V_2 = false;
	uint64_t V_3 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___summaryType0), (&___force1));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_UpdateSkeletalSummaryData_m66FD26ED63C98F872AB1DB6810616785C96BE3A2_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7842));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7843));
	int32_t G_B4_0 = 0;
	int32_t G_B6_0 = 0;
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7844));
		// if (force || this.summaryDataType != summaryDataType && active)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7845));
		bool L_0 = ___force1;
		if (L_0)
		{
			goto IL_001d;
		}
	}
	{
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7863));
		int32_t L_1 = SteamVR_Action_Skeleton_Source_get_summaryDataType_mE0AB648E0339C2A082B81B15AA2D97854E8BB8CC_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7863));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7864));
		int32_t L_2 = SteamVR_Action_Skeleton_Source_get_summaryDataType_mE0AB648E0339C2A082B81B15AA2D97854E8BB8CC_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7864));
		if ((((int32_t)L_1) == ((int32_t)L_2)))
		{
			goto IL_001a;
		}
	}
	{
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7865));
		bool L_3 = VirtFuncInvoker0< bool >::Invoke(12 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_active() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7865));
		G_B4_0 = ((int32_t)(L_3));
		goto IL_001b;
	}

IL_001a:
	{
		G_B4_0 = 0;
	}

IL_001b:
	{
		G_B6_0 = G_B4_0;
		goto IL_001e;
	}

IL_001d:
	{
		G_B6_0 = 1;
	}

IL_001e:
	{
		V_0 = (bool)G_B6_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7846));
		bool L_4 = V_0;
		if (!L_4)
		{
			goto IL_0145;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7847));
		// EVRInputError error = OpenVR.Input.GetSkeletalSummaryData(handle, summaryType, ref skeletalSummaryData);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7848));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7866));
		IL2CPP_RUNTIME_CLASS_INIT(OpenVR_tE75A98955EC4AA4B219CE822AA43E79E4CB99DB3_il2cpp_TypeInfo_var);
		CVRInput_t2BE4417A3C1EA0C6CF647B0706BF37F886CE599B * L_5 = OpenVR_get_Input_m904FD790D785E944EE58513F589E862530386414(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7866));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7867));
		uint64_t L_6 = SteamVR_Action_Source_get_handle_mE4C63F9ADB5ACA5E72265B62C0908ACF8EF73A01(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7867));
		int32_t L_7 = ___summaryType0;
		VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831 * L_8 = __this->get_address_of_skeletalSummaryData_57();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7868));
		NullCheck(L_5);
		int32_t L_9 = CVRInput_GetSkeletalSummaryData_mCF15CA558E142D63A09747514588928C6D7152F0(L_5, L_6, L_7, (VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831 *)L_8, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7868));
		V_1 = L_9;
		// if (error != EVRInputError.None)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7849));
		int32_t L_10 = V_1;
		V_2 = (bool)((!(((uint32_t)L_10) <= ((uint32_t)0)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7850));
		bool L_11 = V_2;
		if (!L_11)
		{
			goto IL_0099;
		}
	}
	{
		// Debug.LogError("<b>[SteamVR]</b> GetSkeletalSummaryData error (" + fullPath + "): " + error.ToString() + " handle: " + handle.ToString());
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7851));
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_12 = (StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E*)(StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E*)SZArrayNew(StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E_il2cpp_TypeInfo_var, (uint32_t)6);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_13 = L_12;
		NullCheck(L_13);
		ArrayElementTypeCheck (L_13, _stringLiteral29F677B20F6C547FF7CEF8CAE9CF922165E48458);
		(L_13)->SetAt(static_cast<il2cpp_array_size_t>(0), (String_t*)_stringLiteral29F677B20F6C547FF7CEF8CAE9CF922165E48458);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_14 = L_13;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7869));
		String_t* L_15 = SteamVR_Action_Source_get_fullPath_mB0C33E6C1B4F91E908236055FFAE027ECB3ED996(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7869));
		NullCheck(L_14);
		ArrayElementTypeCheck (L_14, L_15);
		(L_14)->SetAt(static_cast<il2cpp_array_size_t>(1), (String_t*)L_15);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_16 = L_14;
		NullCheck(L_16);
		ArrayElementTypeCheck (L_16, _stringLiteralE6D56E05F32996CA7E5AE21BC90D49044C0BF356);
		(L_16)->SetAt(static_cast<il2cpp_array_size_t>(2), (String_t*)_stringLiteralE6D56E05F32996CA7E5AE21BC90D49044C0BF356);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_17 = L_16;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7870));
		RuntimeObject * L_18 = Box(EVRInputError_tC8741BE3044407E8FA26F282526B259D93DBF22F_il2cpp_TypeInfo_var, (&V_1));
		NullCheck(L_18);
		String_t* L_19 = VirtFuncInvoker0< String_t* >::Invoke(3 /* System.String System.Object::ToString() */, L_18);
		V_1 = *(int32_t*)UnBox(L_18);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7870));
		NullCheck(L_17);
		ArrayElementTypeCheck (L_17, L_19);
		(L_17)->SetAt(static_cast<il2cpp_array_size_t>(3), (String_t*)L_19);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_20 = L_17;
		NullCheck(L_20);
		ArrayElementTypeCheck (L_20, _stringLiteral18B39452A606090B97AA8D84240CC83BE3E5D62B);
		(L_20)->SetAt(static_cast<il2cpp_array_size_t>(4), (String_t*)_stringLiteral18B39452A606090B97AA8D84240CC83BE3E5D62B);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_21 = L_20;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7871));
		uint64_t L_22 = SteamVR_Action_Source_get_handle_mE4C63F9ADB5ACA5E72265B62C0908ACF8EF73A01(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7871));
		V_3 = L_22;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7872));
		String_t* L_23 = UInt64_ToString_mF0E40B7459C207B89A1C8C04CE7F183AC0E6D672((uint64_t*)(&V_3), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7872));
		NullCheck(L_21);
		ArrayElementTypeCheck (L_21, L_23);
		(L_21)->SetAt(static_cast<il2cpp_array_size_t>(5), (String_t*)L_23);
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7873));
		String_t* L_24 = String_Concat_m232E857CA5107EA6AC52E7DD7018716C021F237B(L_21, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7873));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7874));
		IL2CPP_RUNTIME_CLASS_INIT(Debug_t7B5FCB117E2FD63B6838BC52821B252E2BFB61C4_il2cpp_TypeInfo_var);
		Debug_LogError_m3BCF9B78263152261565DCA9DB7D55F0C391ED29(L_24, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7874));
	}

IL_0099:
	{
		// fingerCurls[0] = skeletalSummaryData.flFingerCurl0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7852));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7875));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_25 = SteamVR_Action_Skeleton_Source_get_fingerCurls_mD56D63D01414ED3D7D6074DB29C81AAC3C490479_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7875));
		VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831 * L_26 = __this->get_address_of_skeletalSummaryData_57();
		float L_27 = L_26->get_flFingerCurl0_0();
		NullCheck(L_25);
		(L_25)->SetAt(static_cast<il2cpp_array_size_t>(0), (float)L_27);
		// fingerCurls[1] = skeletalSummaryData.flFingerCurl1;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7853));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7876));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_28 = SteamVR_Action_Skeleton_Source_get_fingerCurls_mD56D63D01414ED3D7D6074DB29C81AAC3C490479_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7876));
		VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831 * L_29 = __this->get_address_of_skeletalSummaryData_57();
		float L_30 = L_29->get_flFingerCurl1_1();
		NullCheck(L_28);
		(L_28)->SetAt(static_cast<il2cpp_array_size_t>(1), (float)L_30);
		// fingerCurls[2] = skeletalSummaryData.flFingerCurl2;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7854));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7877));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_31 = SteamVR_Action_Skeleton_Source_get_fingerCurls_mD56D63D01414ED3D7D6074DB29C81AAC3C490479_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7877));
		VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831 * L_32 = __this->get_address_of_skeletalSummaryData_57();
		float L_33 = L_32->get_flFingerCurl2_2();
		NullCheck(L_31);
		(L_31)->SetAt(static_cast<il2cpp_array_size_t>(2), (float)L_33);
		// fingerCurls[3] = skeletalSummaryData.flFingerCurl3;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7855));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7878));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_34 = SteamVR_Action_Skeleton_Source_get_fingerCurls_mD56D63D01414ED3D7D6074DB29C81AAC3C490479_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7878));
		VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831 * L_35 = __this->get_address_of_skeletalSummaryData_57();
		float L_36 = L_35->get_flFingerCurl3_3();
		NullCheck(L_34);
		(L_34)->SetAt(static_cast<il2cpp_array_size_t>(3), (float)L_36);
		// fingerCurls[4] = skeletalSummaryData.flFingerCurl4;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7856));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7879));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_37 = SteamVR_Action_Skeleton_Source_get_fingerCurls_mD56D63D01414ED3D7D6074DB29C81AAC3C490479_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7879));
		VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831 * L_38 = __this->get_address_of_skeletalSummaryData_57();
		float L_39 = L_38->get_flFingerCurl4_4();
		NullCheck(L_37);
		(L_37)->SetAt(static_cast<il2cpp_array_size_t>(4), (float)L_39);
		// fingerSplays[0] = skeletalSummaryData.flFingerSplay0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7857));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7880));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_40 = SteamVR_Action_Skeleton_Source_get_fingerSplays_m5461F8E49017BD6579CC10D8D0783642DEDE37D0_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7880));
		VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831 * L_41 = __this->get_address_of_skeletalSummaryData_57();
		float L_42 = L_41->get_flFingerSplay0_5();
		NullCheck(L_40);
		(L_40)->SetAt(static_cast<il2cpp_array_size_t>(0), (float)L_42);
		// fingerSplays[1] = skeletalSummaryData.flFingerSplay1;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7858));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7881));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_43 = SteamVR_Action_Skeleton_Source_get_fingerSplays_m5461F8E49017BD6579CC10D8D0783642DEDE37D0_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7881));
		VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831 * L_44 = __this->get_address_of_skeletalSummaryData_57();
		float L_45 = L_44->get_flFingerSplay1_6();
		NullCheck(L_43);
		(L_43)->SetAt(static_cast<il2cpp_array_size_t>(1), (float)L_45);
		// fingerSplays[2] = skeletalSummaryData.flFingerSplay2;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7859));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7882));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_46 = SteamVR_Action_Skeleton_Source_get_fingerSplays_m5461F8E49017BD6579CC10D8D0783642DEDE37D0_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7882));
		VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831 * L_47 = __this->get_address_of_skeletalSummaryData_57();
		float L_48 = L_47->get_flFingerSplay2_7();
		NullCheck(L_46);
		(L_46)->SetAt(static_cast<il2cpp_array_size_t>(2), (float)L_48);
		// fingerSplays[3] = skeletalSummaryData.flFingerSplay3;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7860));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7883));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_49 = SteamVR_Action_Skeleton_Source_get_fingerSplays_m5461F8E49017BD6579CC10D8D0783642DEDE37D0_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7883));
		VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831 * L_50 = __this->get_address_of_skeletalSummaryData_57();
		float L_51 = L_50->get_flFingerSplay3_8();
		NullCheck(L_49);
		(L_49)->SetAt(static_cast<il2cpp_array_size_t>(3), (float)L_51);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7861));
	}

IL_0145:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7862));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::CheckAndSendEvents()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_CheckAndSendEvents_mA17AE6BAD4218E6BA1D54DF842DD117B20F8F115 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_CheckAndSendEvents_mA17AE6BAD4218E6BA1D54DF842DD117B20F8F115_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	bool V_1 = false;
	bool V_2 = false;
	bool V_3 = false;
	bool V_4 = false;
	bool V_5 = false;
	bool V_6 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_CheckAndSendEvents_mA17AE6BAD4218E6BA1D54DF842DD117B20F8F115_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7884));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7885));
	int32_t G_B3_0 = 0;
	int32_t G_B8_0 = 0;
	int32_t G_B13_0 = 0;
	int32_t G_B18_0 = 0;
	int32_t G_B23_0 = 0;
	int32_t G_B28_0 = 0;
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7886));
		// if (trackingState != lastTrackingState && onTrackingChanged != null)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7887));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7909));
		int32_t L_0 = SteamVR_Action_Pose_Source_get_trackingState_mAA7FE0C2B01A8508823AA7E0D8EED81D5DADCABD(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7909));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7910));
		int32_t L_1 = SteamVR_Action_Pose_Source_get_lastTrackingState_mC3978EC30F22D70155C39DDF5F263447D9273500(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7910));
		if ((((int32_t)L_0) == ((int32_t)L_1)))
		{
			goto IL_001a;
		}
	}
	{
		TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * L_2 = __this->get_onTrackingChanged_41();
		G_B3_0 = ((!(((RuntimeObject*)(TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 *)L_2) <= ((RuntimeObject*)(RuntimeObject *)NULL)))? 1 : 0);
		goto IL_001b;
	}

IL_001a:
	{
		G_B3_0 = 0;
	}

IL_001b:
	{
		V_0 = (bool)G_B3_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7888));
		bool L_3 = V_0;
		if (!L_3)
		{
			goto IL_0037;
		}
	}
	{
		// onTrackingChanged.Invoke(skeletonAction, trackingState);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7889));
		TrackingChangeHandler_t8AD34E45FED47F362BB0D3E5B6B950708A0EC6B4 * L_4 = __this->get_onTrackingChanged_41();
		SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * L_5 = __this->get_skeletonAction_59();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7911));
		int32_t L_6 = SteamVR_Action_Pose_Source_get_trackingState_mAA7FE0C2B01A8508823AA7E0D8EED81D5DADCABD(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7911));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7912));
		NullCheck(L_4);
		TrackingChangeHandler_Invoke_m1F5CBD749F6D72B0368116228975ED75A322FAF9(L_4, L_5, L_6, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7912));
	}

IL_0037:
	{
		// if (poseIsValid != lastPoseIsValid && onValidPoseChanged != null)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7890));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7913));
		bool L_7 = SteamVR_Action_Pose_Source_get_poseIsValid_m45C4445DBD635BF4EDAA590D30874EA233DED74D(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7913));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7914));
		bool L_8 = SteamVR_Action_Pose_Source_get_lastPoseIsValid_mED2AB07587C45C6503F49F9B165A0E4861C35202(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7914));
		if ((((int32_t)L_7) == ((int32_t)L_8)))
		{
			goto IL_0050;
		}
	}
	{
		ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * L_9 = __this->get_onValidPoseChanged_42();
		G_B8_0 = ((!(((RuntimeObject*)(ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 *)L_9) <= ((RuntimeObject*)(RuntimeObject *)NULL)))? 1 : 0);
		goto IL_0051;
	}

IL_0050:
	{
		G_B8_0 = 0;
	}

IL_0051:
	{
		V_1 = (bool)G_B8_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7891));
		bool L_10 = V_1;
		if (!L_10)
		{
			goto IL_006d;
		}
	}
	{
		// onValidPoseChanged.Invoke(skeletonAction, poseIsValid);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7892));
		ValidPoseChangeHandler_t66871BEC340B3CC65074111BDD9A4FF2794D17B7 * L_11 = __this->get_onValidPoseChanged_42();
		SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * L_12 = __this->get_skeletonAction_59();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7915));
		bool L_13 = SteamVR_Action_Pose_Source_get_poseIsValid_m45C4445DBD635BF4EDAA590D30874EA233DED74D(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7915));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7916));
		NullCheck(L_11);
		ValidPoseChangeHandler_Invoke_mD8DAEE4D2F6111ED348DE9E66E194F66E2E89024(L_11, L_12, L_13, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7916));
	}

IL_006d:
	{
		// if (deviceIsConnected != lastDeviceIsConnected && onDeviceConnectedChanged != null)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7893));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7917));
		bool L_14 = SteamVR_Action_Pose_Source_get_deviceIsConnected_mF1AE6114E98F19B5783F49FDB71381DF6D7CC963(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7917));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7918));
		bool L_15 = SteamVR_Action_Pose_Source_get_lastDeviceIsConnected_m13EFE0AE18A9B2F59BA86780A1A61B9BB367604D(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7918));
		if ((((int32_t)L_14) == ((int32_t)L_15)))
		{
			goto IL_0086;
		}
	}
	{
		DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * L_16 = __this->get_onDeviceConnectedChanged_43();
		G_B13_0 = ((!(((RuntimeObject*)(DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 *)L_16) <= ((RuntimeObject*)(RuntimeObject *)NULL)))? 1 : 0);
		goto IL_0087;
	}

IL_0086:
	{
		G_B13_0 = 0;
	}

IL_0087:
	{
		V_2 = (bool)G_B13_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7894));
		bool L_17 = V_2;
		if (!L_17)
		{
			goto IL_00a3;
		}
	}
	{
		// onDeviceConnectedChanged.Invoke(skeletonAction, deviceIsConnected);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7895));
		DeviceConnectedChangeHandler_tA531478A75E2F7B0C49D41DADBB9FD7BD46C4592 * L_18 = __this->get_onDeviceConnectedChanged_43();
		SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * L_19 = __this->get_skeletonAction_59();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7919));
		bool L_20 = SteamVR_Action_Pose_Source_get_deviceIsConnected_mF1AE6114E98F19B5783F49FDB71381DF6D7CC963(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7919));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7920));
		NullCheck(L_18);
		DeviceConnectedChangeHandler_Invoke_mFCAC042EA7E128B43D041E89C436CFAF4C340032(L_18, L_19, L_20, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7920));
	}

IL_00a3:
	{
		// if (changed && onChange != null)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7896));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7921));
		bool L_21 = VirtFuncInvoker0< bool >::Invoke(31 /* System.Boolean Valve.VR.SteamVR_Action_In_Source::get_changed() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7921));
		if (!L_21)
		{
			goto IL_00b6;
		}
	}
	{
		ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * L_22 = __this->get_onChange_39();
		G_B18_0 = ((!(((RuntimeObject*)(ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 *)L_22) <= ((RuntimeObject*)(RuntimeObject *)NULL)))? 1 : 0);
		goto IL_00b7;
	}

IL_00b6:
	{
		G_B18_0 = 0;
	}

IL_00b7:
	{
		V_3 = (bool)G_B18_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7897));
		bool L_23 = V_3;
		if (!L_23)
		{
			goto IL_00cd;
		}
	}
	{
		// onChange.Invoke(skeletonAction);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7898));
		ChangeHandler_tDC8DC867F411FB9DEE35044438893BCCF94311C7 * L_24 = __this->get_onChange_39();
		SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * L_25 = __this->get_skeletonAction_59();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7922));
		NullCheck(L_24);
		ChangeHandler_Invoke_m68EBE17205B49F58CC18575D9407E20E163CBE66(L_24, L_25, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7922));
	}

IL_00cd:
	{
		// if (active != lastActive && onActiveChange != null)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7899));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7923));
		bool L_26 = VirtFuncInvoker0< bool >::Invoke(12 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_active() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7923));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7924));
		bool L_27 = VirtFuncInvoker0< bool >::Invoke(14 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_lastActive() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7924));
		if ((((int32_t)L_26) == ((int32_t)L_27)))
		{
			goto IL_00e6;
		}
	}
	{
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_28 = __this->get_onActiveChange_37();
		G_B23_0 = ((!(((RuntimeObject*)(ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 *)L_28) <= ((RuntimeObject*)(RuntimeObject *)NULL)))? 1 : 0);
		goto IL_00e7;
	}

IL_00e6:
	{
		G_B23_0 = 0;
	}

IL_00e7:
	{
		V_4 = (bool)G_B23_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7900));
		bool L_29 = V_4;
		if (!L_29)
		{
			goto IL_0105;
		}
	}
	{
		// onActiveChange.Invoke(skeletonAction, active);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7901));
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_30 = __this->get_onActiveChange_37();
		SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * L_31 = __this->get_skeletonAction_59();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7925));
		bool L_32 = VirtFuncInvoker0< bool >::Invoke(12 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_active() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7925));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7926));
		NullCheck(L_30);
		ActiveChangeHandler_Invoke_m91B4ED8236F4EDF7B0D28988B02B1D9AC6C3A86A(L_30, L_31, L_32, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7926));
	}

IL_0105:
	{
		// if (activeBinding != lastActiveBinding && onActiveBindingChange != null)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7902));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7927));
		bool L_33 = VirtFuncInvoker0< bool >::Invoke(13 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_activeBinding() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7927));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7928));
		bool L_34 = VirtFuncInvoker0< bool >::Invoke(16 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_lastActiveBinding() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7928));
		if ((((int32_t)L_33) == ((int32_t)L_34)))
		{
			goto IL_011e;
		}
	}
	{
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_35 = __this->get_onActiveBindingChange_38();
		G_B28_0 = ((!(((RuntimeObject*)(ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 *)L_35) <= ((RuntimeObject*)(RuntimeObject *)NULL)))? 1 : 0);
		goto IL_011f;
	}

IL_011e:
	{
		G_B28_0 = 0;
	}

IL_011f:
	{
		V_5 = (bool)G_B28_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7903));
		bool L_36 = V_5;
		if (!L_36)
		{
			goto IL_013d;
		}
	}
	{
		// onActiveBindingChange.Invoke(skeletonAction, activeBinding);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7904));
		ActiveChangeHandler_t74981863B279B2B59EAC4C480B2FFDAE6D9056D4 * L_37 = __this->get_onActiveBindingChange_38();
		SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * L_38 = __this->get_skeletonAction_59();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7929));
		bool L_39 = VirtFuncInvoker0< bool >::Invoke(13 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_activeBinding() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7929));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7930));
		NullCheck(L_37);
		ActiveChangeHandler_Invoke_m91B4ED8236F4EDF7B0D28988B02B1D9AC6C3A86A(L_37, L_38, L_39, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7930));
	}

IL_013d:
	{
		// if (onUpdate != null)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7905));
		UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * L_40 = __this->get_onUpdate_40();
		V_6 = (bool)((!(((RuntimeObject*)(UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 *)L_40) <= ((RuntimeObject*)(RuntimeObject *)NULL)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7906));
		bool L_41 = V_6;
		if (!L_41)
		{
			goto IL_015e;
		}
	}
	{
		// onUpdate.Invoke(skeletonAction);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7907));
		UpdateHandler_t1759DCFEC7A161071F6E72470CC7515CE2FE8046 * L_42 = __this->get_onUpdate_40();
		SteamVR_Action_Skeleton_t7E7D4C52B0F7C916A35C6CE369BDDA563C478504 * L_43 = __this->get_skeletonAction_59();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7931));
		NullCheck(L_42);
		UpdateHandler_Invoke_mF1980FE6994D9662F4BAC4C3FB5DB38A1DD1FF29(L_42, L_43, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7931));
	}

IL_015e:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7908));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source__ctor_mFC568147EA2C28081C0956D1830836B71530D0B3 (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source__ctor_mFC568147EA2C28081C0956D1830836B71530D0B3_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source__ctor_mFC568147EA2C28081C0956D1830836B71530D0B3_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7932));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7933));
	{
		// protected VRSkeletalSummaryData_t skeletalSummaryData = new VRSkeletalSummaryData_t();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7934));
		VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831 * L_0 = __this->get_address_of_skeletalSummaryData_57();
		il2cpp_codegen_initobj(L_0, sizeof(VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831 ));
		// protected VRSkeletalSummaryData_t lastSkeletalSummaryData = new VRSkeletalSummaryData_t();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7935));
		VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831 * L_1 = __this->get_address_of_lastSkeletalSummaryData_58();
		il2cpp_codegen_initobj(L_1, sizeof(VRSkeletalSummaryData_t_t87AC6F4E8AF2425D2C62EF21012A818A8120B831 ));
		// protected VRBoneTransform_t[] tempBoneTransforms = new VRBoneTransform_t[SteamVR_Action_Skeleton.numBones];
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7936));
		VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B* L_2 = (VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B*)(VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B*)SZArrayNew(VRBoneTransform_tU5BU5D_tF1B282BA15929E716F8A18D4793B83AC01C1C88B_il2cpp_TypeInfo_var, (uint32_t)((int32_t)31));
		__this->set_tempBoneTransforms_60(L_2);
		// protected InputSkeletalActionData_t skeletonActionData = new InputSkeletalActionData_t();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7937));
		InputSkeletalActionData_t_tA39C0A0FE4DBB8966D852B4FFC7D3A6D8F887430 * L_3 = __this->get_address_of_skeletonActionData_61();
		il2cpp_codegen_initobj(L_3, sizeof(InputSkeletalActionData_t_tA39C0A0FE4DBB8966D852B4FFC7D3A6D8F887430 ));
		// protected InputSkeletalActionData_t lastSkeletonActionData = new InputSkeletalActionData_t();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7938));
		InputSkeletalActionData_t_tA39C0A0FE4DBB8966D852B4FFC7D3A6D8F887430 * L_4 = __this->get_address_of_lastSkeletonActionData_62();
		il2cpp_codegen_initobj(L_4, sizeof(InputSkeletalActionData_t_tA39C0A0FE4DBB8966D852B4FFC7D3A6D8F887430 ));
		// protected InputSkeletalActionData_t tempSkeletonActionData = new InputSkeletalActionData_t();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7939));
		InputSkeletalActionData_t_tA39C0A0FE4DBB8966D852B4FFC7D3A6D8F887430 * L_5 = __this->get_address_of_tempSkeletonActionData_63();
		il2cpp_codegen_initobj(L_5, sizeof(InputSkeletalActionData_t_tA39C0A0FE4DBB8966D852B4FFC7D3A6D8F887430 ));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7940));
		IL2CPP_RUNTIME_CLASS_INIT(SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27_il2cpp_TypeInfo_var);
		SteamVR_Action_Pose_Source__ctor_mADDAC326C7500D82492B45F896F5F57C4B60D880(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7940));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source::.cctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source__cctor_m2A8E4EEA53B06E906C8F0A76AE53800CDBBD9B5D (const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source__cctor_m2A8E4EEA53B06E906C8F0A76AE53800CDBBD9B5D_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source__cctor_m2A8E4EEA53B06E906C8F0A76AE53800CDBBD9B5D_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7941));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7942));
	{
		// protected static uint skeletonActionData_size = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7943));
		((SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72_StaticFields*)il2cpp_codegen_static_fields_for(SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72_il2cpp_TypeInfo_var))->set_skeletonActionData_size_36(0);
		return;
	}
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// Valve.VR.SteamVR_Action_Skeleton_Source Valve.VR.SteamVR_Action_Skeleton_Source_Map::GetSourceElementForIndexer(Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * SteamVR_Action_Skeleton_Source_Map_GetSourceElementForIndexer_mFB38E3EBD97606F62D6A3960F54D1C320CCEBD4E (SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * __this, int32_t ___inputSource0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_Map_GetSourceElementForIndexer_mFB38E3EBD97606F62D6A3960F54D1C320CCEBD4E_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * V_0 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___inputSource0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_Map_GetSourceElementForIndexer_mFB38E3EBD97606F62D6A3960F54D1C320CCEBD4E_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7288));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7289));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7290));
		// return sources[0]; //just in case somebody tries to access a different element, redirect them to the correct one.
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7291));
		SteamVR_Action_Skeleton_SourceU5BU5D_tD7F80DE17D413EA1E866B222C9A63AEBFF0CE5D4* L_0 = ((SteamVR_Action_Source_Map_1_t27BBF2BA23BB14D6B7B203EF8ABFEF3D68E13AB1 *)__this)->get_sources_7();
		NullCheck(L_0);
		int32_t L_1 = 0;
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_2 = (L_0)->GetAt(static_cast<il2cpp_array_size_t>(L_1));
		V_0 = L_2;
		goto IL_000c;
	}

IL_000c:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7292));
		SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * L_3 = V_0;
		return L_3;
	}
}
// System.Void Valve.VR.SteamVR_Action_Skeleton_Source_Map::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_Map__ctor_m69133E0B86EA755338F18B76A09F13A18570204A (SteamVR_Action_Skeleton_Source_Map_t9A588DFCDF65DA8AA617B2170C0E11EB89FA89DB * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_Map__ctor_m69133E0B86EA755338F18B76A09F13A18570204A_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_Map__ctor_m69133E0B86EA755338F18B76A09F13A18570204A_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		SteamVR_Action_Pose_Source_Map_1__ctor_m46CC8AADAF802355D940EB7B8E1F27836A7B4476(__this, /*hidden argument*/SteamVR_Action_Pose_Source_Map_1__ctor_m46CC8AADAF802355D940EB7B8E1F27836A7B4476_RuntimeMethod_var);
		return;
	}
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.String Valve.VR.SteamVR_Action_Source::get_fullPath()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR String_t* SteamVR_Action_Source_get_fullPath_mB0C33E6C1B4F91E908236055FFAE027ECB3ED996 (SteamVR_Action_Source_t9D7428CDE39924074518EE6233D9A4FAB0C33CB0 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_get_fullPath_mB0C33E6C1B4F91E908236055FFAE027ECB3ED996_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	String_t* V_0 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_get_fullPath_mB0C33E6C1B4F91E908236055FFAE027ECB3ED996_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3477));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3478));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3479));
		// public string fullPath { get { return action.fullPath; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3480));
		SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 * L_0 = __this->get_action_2();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3482));
		NullCheck(L_0);
		String_t* L_1 = VirtFuncInvoker0< String_t* >::Invoke(17 /* System.String Valve.VR.SteamVR_Action::get_fullPath() */, L_0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3482));
		V_0 = L_1;
		goto IL_000f;
	}

IL_000f:
	{
		// public string fullPath { get { return action.fullPath; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3481));
		String_t* L_2 = V_0;
		return L_2;
	}
}
// System.UInt64 Valve.VR.SteamVR_Action_Source::get_handle()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR uint64_t SteamVR_Action_Source_get_handle_mE4C63F9ADB5ACA5E72265B62C0908ACF8EF73A01 (SteamVR_Action_Source_t9D7428CDE39924074518EE6233D9A4FAB0C33CB0 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_get_handle_mE4C63F9ADB5ACA5E72265B62C0908ACF8EF73A01_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	uint64_t V_0 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_get_handle_mE4C63F9ADB5ACA5E72265B62C0908ACF8EF73A01_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3483));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3484));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3485));
		// public ulong handle { get { return action.handle; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3486));
		SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 * L_0 = __this->get_action_2();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3488));
		NullCheck(L_0);
		uint64_t L_1 = VirtFuncInvoker0< uint64_t >::Invoke(18 /* System.UInt64 Valve.VR.SteamVR_Action::get_handle() */, L_0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3488));
		V_0 = L_1;
		goto IL_000f;
	}

IL_000f:
	{
		// public ulong handle { get { return action.handle; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3487));
		uint64_t L_2 = V_0;
		return L_2;
	}
}
// Valve.VR.SteamVR_ActionSet Valve.VR.SteamVR_Action_Source::get_actionSet()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6 * SteamVR_Action_Source_get_actionSet_mF2BE8CE30F960A11115AD000921BBF16088CF5B2 (SteamVR_Action_Source_t9D7428CDE39924074518EE6233D9A4FAB0C33CB0 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_get_actionSet_mF2BE8CE30F960A11115AD000921BBF16088CF5B2_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6 * V_0 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_get_actionSet_mF2BE8CE30F960A11115AD000921BBF16088CF5B2_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3489));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3490));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3491));
		// public SteamVR_ActionSet actionSet { get { return action.actionSet; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3492));
		SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 * L_0 = __this->get_action_2();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3494));
		NullCheck(L_0);
		SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6 * L_1 = VirtFuncInvoker0< SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6 * >::Invoke(19 /* Valve.VR.SteamVR_ActionSet Valve.VR.SteamVR_Action::get_actionSet() */, L_0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3494));
		V_0 = L_1;
		goto IL_000f;
	}

IL_000f:
	{
		// public SteamVR_ActionSet actionSet { get { return action.actionSet; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3493));
		SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6 * L_2 = V_0;
		return L_2;
	}
}
// Valve.VR.SteamVR_ActionDirections Valve.VR.SteamVR_Action_Source::get_direction()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Source_get_direction_mDB8ACACE7D1530509D256AD658745A03218C0572 (SteamVR_Action_Source_t9D7428CDE39924074518EE6233D9A4FAB0C33CB0 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_get_direction_mDB8ACACE7D1530509D256AD658745A03218C0572_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_get_direction_mDB8ACACE7D1530509D256AD658745A03218C0572_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3495));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3496));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3497));
		// public SteamVR_ActionDirections direction { get { return action.direction; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3498));
		SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 * L_0 = __this->get_action_2();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3500));
		NullCheck(L_0);
		int32_t L_1 = VirtFuncInvoker0< int32_t >::Invoke(20 /* Valve.VR.SteamVR_ActionDirections Valve.VR.SteamVR_Action::get_direction() */, L_0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3500));
		V_0 = L_1;
		goto IL_000f;
	}

IL_000f:
	{
		// public SteamVR_ActionDirections direction { get { return action.direction; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3499));
		int32_t L_2 = V_0;
		return L_2;
	}
}
// Valve.VR.SteamVR_Input_Sources Valve.VR.SteamVR_Action_Source::get_inputSource()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Source_get_inputSource_mAA1928183BB06E5C8CF950F65BA80635C25535D4 (SteamVR_Action_Source_t9D7428CDE39924074518EE6233D9A4FAB0C33CB0 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_get_inputSource_mAA1928183BB06E5C8CF950F65BA80635C25535D4_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_get_inputSource_mAA1928183BB06E5C8CF950F65BA80635C25535D4_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3501));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3502));
	{
		// public SteamVR_Input_Sources inputSource { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3503));
		int32_t L_0 = __this->get_U3CinputSourceU3Ek__BackingField_0();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Source::set_inputSource(Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Source_set_inputSource_mCA804B7275EED0C19F247767BCC22B7F639A3175 (SteamVR_Action_Source_t9D7428CDE39924074518EE6233D9A4FAB0C33CB0 * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_set_inputSource_mCA804B7275EED0C19F247767BCC22B7F639A3175_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_set_inputSource_mCA804B7275EED0C19F247767BCC22B7F639A3175_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3504));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3505));
	{
		// public SteamVR_Input_Sources inputSource { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3506));
		int32_t L_0 = ___value0;
		__this->set_U3CinputSourceU3Ek__BackingField_0(L_0);
		return;
	}
}
// System.Boolean Valve.VR.SteamVR_Action_Source::get_setActive()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Source_get_setActive_m4E3E3DD854D4B7384E415E8BD0F66E880BB97A3E (SteamVR_Action_Source_t9D7428CDE39924074518EE6233D9A4FAB0C33CB0 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_get_setActive_m4E3E3DD854D4B7384E415E8BD0F66E880BB97A3E_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_get_setActive_m4E3E3DD854D4B7384E415E8BD0F66E880BB97A3E_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3507));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3508));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3509));
		// public bool setActive { get { return actionSet.IsActive(inputSource); } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3510));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3512));
		SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6 * L_0 = SteamVR_Action_Source_get_actionSet_mF2BE8CE30F960A11115AD000921BBF16088CF5B2(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3512));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3513));
		int32_t L_1 = SteamVR_Action_Source_get_inputSource_mAA1928183BB06E5C8CF950F65BA80635C25535D4_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3513));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3514));
		NullCheck(L_0);
		bool L_2 = SteamVR_ActionSet_IsActive_m9909588615E0191F96E971182B8A52F864F39BEB(L_0, L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3514));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public bool setActive { get { return actionSet.IsActive(inputSource); } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3511));
		bool L_3 = V_0;
		return L_3;
	}
}
// System.Void Valve.VR.SteamVR_Action_Source::Preinitialize(Valve.VR.SteamVR_Action,Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Source_Preinitialize_mD54CBA24E4881B8742430B3EDF16283316305913 (SteamVR_Action_Source_t9D7428CDE39924074518EE6233D9A4FAB0C33CB0 * __this, SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 * ___wrappingAction0, int32_t ___forInputSource1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_Preinitialize_mD54CBA24E4881B8742430B3EDF16283316305913_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___wrappingAction0), (&___forInputSource1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_Preinitialize_mD54CBA24E4881B8742430B3EDF16283316305913_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3515));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3516));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3517));
		// action = wrappingAction;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3518));
		SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 * L_0 = ___wrappingAction0;
		__this->set_action_2(L_0);
		// inputSource = forInputSource;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3519));
		int32_t L_1 = ___forInputSource1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3521));
		SteamVR_Action_Source_set_inputSource_mCA804B7275EED0C19F247767BCC22B7F639A3175_inline(__this, L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3521));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3520));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Source::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Source__ctor_m50ABEE6BD7F519AB9E0296103A69073EEA2D6576 (SteamVR_Action_Source_t9D7428CDE39924074518EE6233D9A4FAB0C33CB0 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source__ctor_m50ABEE6BD7F519AB9E0296103A69073EEA2D6576_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source__ctor_m50ABEE6BD7F519AB9E0296103A69073EEA2D6576_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3522));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3523));
	{
		// public SteamVR_Action_Source() { }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3524));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3527));
		Object__ctor_m925ECA5E85CA100E3FB86A4F9E15C120E9A184C0(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3527));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3525));
		// public SteamVR_Action_Source() { }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3526));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Source::Initialize()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Source_Initialize_m712F1B6FEBD8059CBB80EC50CC0F16F528023E64 (SteamVR_Action_Source_t9D7428CDE39924074518EE6233D9A4FAB0C33CB0 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_Initialize_m712F1B6FEBD8059CBB80EC50CC0F16F528023E64_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_Initialize_m712F1B6FEBD8059CBB80EC50CC0F16F528023E64_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3528));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3529));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3530));
		// inputSourceHandle = SteamVR_Input_Source.GetHandle(inputSource);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3531));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3533));
		int32_t L_0 = SteamVR_Action_Source_get_inputSource_mAA1928183BB06E5C8CF950F65BA80635C25535D4_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3533));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3534));
		IL2CPP_RUNTIME_CLASS_INIT(SteamVR_Input_Source_tAFDB40851F8E134E08DD2DD0BC1C1770705E81D0_il2cpp_TypeInfo_var);
		uint64_t L_1 = SteamVR_Input_Source_GetHandle_mEA0F6E33E3CB937C11859B35CDB283523240E185(L_0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3534));
		__this->set_inputSourceHandle_1(L_1);
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3532));
		return;
	}
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.String Valve.VR.SteamVR_Action_Source_Map::get_fullPath()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR String_t* SteamVR_Action_Source_Map_get_fullPath_m17B3B1227ABDCC35456A1B37EE9919772DD1F24E (SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_Map_get_fullPath_m17B3B1227ABDCC35456A1B37EE9919772DD1F24E_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_Map_get_fullPath_m17B3B1227ABDCC35456A1B37EE9919772DD1F24E_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3355));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3356));
	{
		// public string fullPath { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3357));
		String_t* L_0 = __this->get_U3CfullPathU3Ek__BackingField_0();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Source_Map::set_fullPath(System.String)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Source_Map_set_fullPath_mBB40F4301664B3074825255DA6E51B5E02F93463 (SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17 * __this, String_t* ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_Map_set_fullPath_mBB40F4301664B3074825255DA6E51B5E02F93463_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_Map_set_fullPath_mBB40F4301664B3074825255DA6E51B5E02F93463_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3358));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3359));
	{
		// public string fullPath { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3360));
		String_t* L_0 = ___value0;
		__this->set_U3CfullPathU3Ek__BackingField_0(L_0);
		return;
	}
}
// System.UInt64 Valve.VR.SteamVR_Action_Source_Map::get_handle()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR uint64_t SteamVR_Action_Source_Map_get_handle_mDD116BA67A37900EC7D7FBB831D8C6FD1BA2903D (SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_Map_get_handle_mDD116BA67A37900EC7D7FBB831D8C6FD1BA2903D_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_Map_get_handle_mDD116BA67A37900EC7D7FBB831D8C6FD1BA2903D_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3361));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3362));
	{
		// public ulong handle { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3363));
		uint64_t L_0 = __this->get_U3ChandleU3Ek__BackingField_1();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Source_Map::set_handle(System.UInt64)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Source_Map_set_handle_mB5B6B8E56BCC552963E91E2748DF8CC04BDC979A (SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17 * __this, uint64_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_Map_set_handle_mB5B6B8E56BCC552963E91E2748DF8CC04BDC979A_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_Map_set_handle_mB5B6B8E56BCC552963E91E2748DF8CC04BDC979A_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3364));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3365));
	{
		// public ulong handle { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3366));
		uint64_t L_0 = ___value0;
		__this->set_U3ChandleU3Ek__BackingField_1(L_0);
		return;
	}
}
// Valve.VR.SteamVR_ActionSet Valve.VR.SteamVR_Action_Source_Map::get_actionSet()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6 * SteamVR_Action_Source_Map_get_actionSet_mE10477F66D710B36A4DB0BDEF9DC7788CD86D893 (SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_Map_get_actionSet_mE10477F66D710B36A4DB0BDEF9DC7788CD86D893_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_Map_get_actionSet_mE10477F66D710B36A4DB0BDEF9DC7788CD86D893_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3367));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3368));
	{
		// public SteamVR_ActionSet actionSet { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3369));
		SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6 * L_0 = __this->get_U3CactionSetU3Ek__BackingField_2();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Source_Map::set_actionSet(Valve.VR.SteamVR_ActionSet)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Source_Map_set_actionSet_m8D8A292258A3B69B920DED592F2BD44A259EBAA9 (SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17 * __this, SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_Map_set_actionSet_m8D8A292258A3B69B920DED592F2BD44A259EBAA9_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_Map_set_actionSet_m8D8A292258A3B69B920DED592F2BD44A259EBAA9_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3370));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3371));
	{
		// public SteamVR_ActionSet actionSet { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3372));
		SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6 * L_0 = ___value0;
		__this->set_U3CactionSetU3Ek__BackingField_2(L_0);
		return;
	}
}
// Valve.VR.SteamVR_ActionDirections Valve.VR.SteamVR_Action_Source_Map::get_direction()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Source_Map_get_direction_m57FCD20566320667DDD47CCF0743E7AF33971413 (SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_Map_get_direction_m57FCD20566320667DDD47CCF0743E7AF33971413_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_Map_get_direction_m57FCD20566320667DDD47CCF0743E7AF33971413_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3373));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3374));
	{
		// public SteamVR_ActionDirections direction { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3375));
		int32_t L_0 = __this->get_U3CdirectionU3Ek__BackingField_3();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Source_Map::set_direction(Valve.VR.SteamVR_ActionDirections)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Source_Map_set_direction_m4E65637F7F50E116169B2CFB6EBF5A2583D902F2 (SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17 * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_Map_set_direction_m4E65637F7F50E116169B2CFB6EBF5A2583D902F2_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_Map_set_direction_m4E65637F7F50E116169B2CFB6EBF5A2583D902F2_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3376));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3377));
	{
		// public SteamVR_ActionDirections direction { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3378));
		int32_t L_0 = ___value0;
		__this->set_U3CdirectionU3Ek__BackingField_3(L_0);
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Source_Map::PreInitialize(Valve.VR.SteamVR_Action,System.String,System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Source_Map_PreInitialize_m39C648952C2AFF5056406BD4D62DCC94D5D15CF8 (SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17 * __this, SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 * ___wrappingAction0, String_t* ___actionPath1, bool ___throwErrors2, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_Map_PreInitialize_m39C648952C2AFF5056406BD4D62DCC94D5D15CF8_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	SteamVR_Input_SourcesU5BU5D_t735048547A8599BA461FE16B1BC029194E1F184A* V_0 = NULL;
	int32_t V_1 = 0;
	bool V_2 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___wrappingAction0), (&___actionPath1), (&___throwErrors2));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_Map_PreInitialize_m39C648952C2AFF5056406BD4D62DCC94D5D15CF8_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3379));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3380));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3381));
		// fullPath = actionPath;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3382));
		String_t* L_0 = ___actionPath1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3396));
		SteamVR_Action_Source_Map_set_fullPath_mBB40F4301664B3074825255DA6E51B5E02F93463_inline(__this, L_0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3396));
		// action = wrappingAction;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3383));
		SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 * L_1 = ___wrappingAction0;
		__this->set_action_4(L_1);
		// actionSet = SteamVR_Input.GetActionSetFromPath(GetActionSetPath());
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3384));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3397));
		String_t* L_2 = SteamVR_Action_Source_Map_GetActionSetPath_mA1707CA47C4282036468F3EA4603C7B25963D834(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3397));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3398));
		IL2CPP_RUNTIME_CLASS_INIT(SteamVR_Input_tCE4A1EC6C51592CB9DCD7B860984CB2C4DD937BF_il2cpp_TypeInfo_var);
		SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6 * L_3 = SteamVR_Input_GetActionSetFromPath_mC36B5370364DAB9D5FFC55AB768FBC926B509306(L_2, (bool)0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3398));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3399));
		SteamVR_Action_Source_Map_set_actionSet_m8D8A292258A3B69B920DED592F2BD44A259EBAA9_inline(__this, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3399));
		// direction = GetActionDirection();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3385));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3400));
		int32_t L_4 = SteamVR_Action_Source_Map_GetActionDirection_mA48BA216E276F882C863341B7197E590B6471119(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3400));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3401));
		SteamVR_Action_Source_Map_set_direction_m4E65637F7F50E116169B2CFB6EBF5A2583D902F2_inline(__this, L_4, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3401));
		// SteamVR_Input_Sources[] sources = SteamVR_Input_Source.GetAllSources();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3386));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3402));
		IL2CPP_RUNTIME_CLASS_INIT(SteamVR_Input_Source_tAFDB40851F8E134E08DD2DD0BC1C1770705E81D0_il2cpp_TypeInfo_var);
		SteamVR_Input_SourcesU5BU5D_t735048547A8599BA461FE16B1BC029194E1F184A* L_5 = SteamVR_Input_Source_GetAllSources_m3FEDAE791D389B6ED4E1A7665B1F6381780C8352(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3402));
		V_0 = L_5;
		// for (int sourceIndex = 0; sourceIndex < sources.Length; sourceIndex++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3387));
		V_1 = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3388));
		goto IL_004b;
	}

IL_003a:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3389));
		// PreinitializeMap(sources[sourceIndex], wrappingAction);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3390));
		SteamVR_Input_SourcesU5BU5D_t735048547A8599BA461FE16B1BC029194E1F184A* L_6 = V_0;
		int32_t L_7 = V_1;
		NullCheck(L_6);
		int32_t L_8 = L_7;
		int32_t L_9 = (int32_t)(L_6)->GetAt(static_cast<il2cpp_array_size_t>(L_8));
		SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 * L_10 = ___wrappingAction0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3403));
		VirtActionInvoker2< int32_t, SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 * >::Invoke(5 /* System.Void Valve.VR.SteamVR_Action_Source_Map::PreinitializeMap(Valve.VR.SteamVR_Input_Sources,Valve.VR.SteamVR_Action) */, __this, L_9, L_10);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3403));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3391));
		// for (int sourceIndex = 0; sourceIndex < sources.Length; sourceIndex++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3392));
		int32_t L_11 = V_1;
		V_1 = ((int32_t)il2cpp_codegen_add((int32_t)L_11, (int32_t)1));
	}

IL_004b:
	{
		// for (int sourceIndex = 0; sourceIndex < sources.Length; sourceIndex++)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3393));
		int32_t L_12 = V_1;
		SteamVR_Input_SourcesU5BU5D_t735048547A8599BA461FE16B1BC029194E1F184A* L_13 = V_0;
		NullCheck(L_13);
		V_2 = (bool)((((int32_t)L_12) < ((int32_t)(((int32_t)((int32_t)(((RuntimeArray*)L_13)->max_length))))))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3394));
		bool L_14 = V_2;
		if (L_14)
		{
			goto IL_003a;
		}
	}
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3395));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Source_Map::Initialize()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Source_Map_Initialize_mF2DCDEC5F104A3F7879C6D0CE8D60483334DBAC6 (SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_Map_Initialize_mF2DCDEC5F104A3F7879C6D0CE8D60483334DBAC6_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	uint64_t V_0 = 0;
	int32_t V_1 = 0;
	bool V_2 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_Map_Initialize_mF2DCDEC5F104A3F7879C6D0CE8D60483334DBAC6_RuntimeMethod_var, methodExecutionContextThis, NULL, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3404));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3405));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3406));
		// ulong newHandle = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3407));
		V_0 = (((int64_t)((int64_t)0)));
		// EVRInputError err = OpenVR.Input.GetActionHandle(fullPath.ToLowerInvariant(), ref newHandle);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3408));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3414));
		IL2CPP_RUNTIME_CLASS_INIT(OpenVR_tE75A98955EC4AA4B219CE822AA43E79E4CB99DB3_il2cpp_TypeInfo_var);
		CVRInput_t2BE4417A3C1EA0C6CF647B0706BF37F886CE599B * L_0 = OpenVR_get_Input_m904FD790D785E944EE58513F589E862530386414(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3414));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3415));
		String_t* L_1 = SteamVR_Action_Source_Map_get_fullPath_m17B3B1227ABDCC35456A1B37EE9919772DD1F24E_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3415));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3416));
		NullCheck(L_1);
		String_t* L_2 = String_ToLowerInvariant_m197BD65B6582DC546FF1BC398161EEFA708F799E(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3416));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3417));
		NullCheck(L_0);
		int32_t L_3 = CVRInput_GetActionHandle_mCF28476FA77FA4AA30EFE57818D83C4F8492828F(L_0, L_2, (uint64_t*)(&V_0), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3417));
		V_1 = L_3;
		// handle = newHandle;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3409));
		uint64_t L_4 = V_0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3418));
		SteamVR_Action_Source_Map_set_handle_mB5B6B8E56BCC552963E91E2748DF8CC04BDC979A_inline(__this, L_4, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3418));
		// if (err != EVRInputError.None)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3410));
		int32_t L_5 = V_1;
		V_2 = (bool)((!(((uint32_t)L_5) <= ((uint32_t)0)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3411));
		bool L_6 = V_2;
		if (!L_6)
		{
			goto IL_0059;
		}
	}
	{
		// Debug.LogError("<b>[SteamVR]</b> GetActionHandle (" + fullPath.ToLowerInvariant() + ") error: " + err.ToString());
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3412));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3419));
		String_t* L_7 = SteamVR_Action_Source_Map_get_fullPath_m17B3B1227ABDCC35456A1B37EE9919772DD1F24E_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3419));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3420));
		NullCheck(L_7);
		String_t* L_8 = String_ToLowerInvariant_m197BD65B6582DC546FF1BC398161EEFA708F799E(L_7, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3420));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3421));
		RuntimeObject * L_9 = Box(EVRInputError_tC8741BE3044407E8FA26F282526B259D93DBF22F_il2cpp_TypeInfo_var, (&V_1));
		NullCheck(L_9);
		String_t* L_10 = VirtFuncInvoker0< String_t* >::Invoke(3 /* System.String System.Object::ToString() */, L_9);
		V_1 = *(int32_t*)UnBox(L_9);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3421));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3422));
		String_t* L_11 = String_Concat_mDD2E38332DED3A8C088D38D78A0E0BEB5091DA64(_stringLiteral1085AA8DD5D0232F772D5CA5EA871BBE2F761FB0, L_8, _stringLiteral82053ECBCAD6503F26FE33F5976A1604F67CDD45, L_10, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3422));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3423));
		IL2CPP_RUNTIME_CLASS_INIT(Debug_t7B5FCB117E2FD63B6838BC52821B252E2BFB61C4_il2cpp_TypeInfo_var);
		Debug_LogError_m3BCF9B78263152261565DCA9DB7D55F0C391ED29(L_11, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3423));
	}

IL_0059:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3413));
		return;
	}
}
// System.String Valve.VR.SteamVR_Action_Source_Map::GetActionSetPath()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR String_t* SteamVR_Action_Source_Map_GetActionSetPath_mA1707CA47C4282036468F3EA4603C7B25963D834 (SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_Map_GetActionSetPath_mA1707CA47C4282036468F3EA4603C7B25963D834_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	int32_t V_1 = 0;
	int32_t V_2 = 0;
	int32_t V_3 = 0;
	String_t* V_4 = NULL;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1), (&V_2), (&V_3));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_Map_GetActionSetPath_mA1707CA47C4282036468F3EA4603C7B25963D834_RuntimeMethod_var, methodExecutionContextThis, NULL, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3424));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3425));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3426));
		// int actionsEndIndex = fullPath.IndexOf('/', 1);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3427));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3433));
		String_t* L_0 = SteamVR_Action_Source_Map_get_fullPath_m17B3B1227ABDCC35456A1B37EE9919772DD1F24E_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3433));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3434));
		NullCheck(L_0);
		int32_t L_1 = String_IndexOf_m66F6178DB4B2F61F4FAFD8B75787D0AB142ADD7D(L_0, ((int32_t)47), 1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3434));
		V_0 = L_1;
		// int setStartIndex = actionsEndIndex + 1;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3428));
		int32_t L_2 = V_0;
		V_1 = ((int32_t)il2cpp_codegen_add((int32_t)L_2, (int32_t)1));
		// int setEndIndex = fullPath.IndexOf('/', setStartIndex);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3429));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3435));
		String_t* L_3 = SteamVR_Action_Source_Map_get_fullPath_m17B3B1227ABDCC35456A1B37EE9919772DD1F24E_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3435));
		int32_t L_4 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3436));
		NullCheck(L_3);
		int32_t L_5 = String_IndexOf_m66F6178DB4B2F61F4FAFD8B75787D0AB142ADD7D(L_3, ((int32_t)47), L_4, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3436));
		V_2 = L_5;
		// int count = setEndIndex;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3430));
		int32_t L_6 = V_2;
		V_3 = L_6;
		// return fullPath.Substring(0, count);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3431));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3437));
		String_t* L_7 = SteamVR_Action_Source_Map_get_fullPath_m17B3B1227ABDCC35456A1B37EE9919772DD1F24E_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3437));
		int32_t L_8 = V_3;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3438));
		NullCheck(L_7);
		String_t* L_9 = String_Substring_mB593C0A320C683E6E47EFFC0A12B7A465E5E43BB(L_7, 0, L_8, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3438));
		V_4 = L_9;
		goto IL_0036;
	}

IL_0036:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3432));
		String_t* L_10 = V_4;
		return L_10;
	}
}
// Valve.VR.SteamVR_ActionDirections Valve.VR.SteamVR_Action_Source_Map::GetActionDirection()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Source_Map_GetActionDirection_mA48BA216E276F882C863341B7197E590B6471119 (SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_Map_GetActionDirection_mA48BA216E276F882C863341B7197E590B6471119_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	int32_t V_1 = 0;
	int32_t V_2 = 0;
	int32_t V_3 = 0;
	int32_t V_4 = 0;
	String_t* V_5 = NULL;
	bool V_6 = false;
	int32_t V_7 = 0;
	bool V_8 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0), (&V_1), (&V_2), (&V_3), (&V_4), (&V_5));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_Map_GetActionDirection_mA48BA216E276F882C863341B7197E590B6471119_RuntimeMethod_var, methodExecutionContextThis, NULL, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3439));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3440));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3441));
		// int actionsEndIndex = fullPath.IndexOf('/', 1);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3442));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3457));
		String_t* L_0 = SteamVR_Action_Source_Map_get_fullPath_m17B3B1227ABDCC35456A1B37EE9919772DD1F24E_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3457));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3458));
		NullCheck(L_0);
		int32_t L_1 = String_IndexOf_m66F6178DB4B2F61F4FAFD8B75787D0AB142ADD7D(L_0, ((int32_t)47), 1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3458));
		V_0 = L_1;
		// int setStartIndex = actionsEndIndex + 1;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3443));
		int32_t L_2 = V_0;
		V_1 = ((int32_t)il2cpp_codegen_add((int32_t)L_2, (int32_t)1));
		// int setEndIndex = fullPath.IndexOf('/', setStartIndex);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3444));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3459));
		String_t* L_3 = SteamVR_Action_Source_Map_get_fullPath_m17B3B1227ABDCC35456A1B37EE9919772DD1F24E_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3459));
		int32_t L_4 = V_1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3460));
		NullCheck(L_3);
		int32_t L_5 = String_IndexOf_m66F6178DB4B2F61F4FAFD8B75787D0AB142ADD7D(L_3, ((int32_t)47), L_4, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3460));
		V_2 = L_5;
		// int directionEndIndex = fullPath.IndexOf('/', setEndIndex + 1);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3445));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3461));
		String_t* L_6 = SteamVR_Action_Source_Map_get_fullPath_m17B3B1227ABDCC35456A1B37EE9919772DD1F24E_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3461));
		int32_t L_7 = V_2;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3462));
		NullCheck(L_6);
		int32_t L_8 = String_IndexOf_m66F6178DB4B2F61F4FAFD8B75787D0AB142ADD7D(L_6, ((int32_t)47), ((int32_t)il2cpp_codegen_add((int32_t)L_7, (int32_t)1)), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3462));
		V_3 = L_8;
		// int count = directionEndIndex - setEndIndex - 1;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3446));
		int32_t L_9 = V_3;
		int32_t L_10 = V_2;
		V_4 = ((int32_t)il2cpp_codegen_subtract((int32_t)((int32_t)il2cpp_codegen_subtract((int32_t)L_9, (int32_t)L_10)), (int32_t)1));
		// string direction = fullPath.Substring(setEndIndex + 1, count);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3447));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3463));
		String_t* L_11 = SteamVR_Action_Source_Map_get_fullPath_m17B3B1227ABDCC35456A1B37EE9919772DD1F24E_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3463));
		int32_t L_12 = V_2;
		int32_t L_13 = V_4;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3464));
		NullCheck(L_11);
		String_t* L_14 = String_Substring_mB593C0A320C683E6E47EFFC0A12B7A465E5E43BB(L_11, ((int32_t)il2cpp_codegen_add((int32_t)L_12, (int32_t)1)), L_13, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3464));
		V_5 = L_14;
		// if (direction == inLowered)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3448));
		String_t* L_15 = V_5;
		IL2CPP_RUNTIME_CLASS_INIT(SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17_il2cpp_TypeInfo_var);
		String_t* L_16 = ((SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17_StaticFields*)il2cpp_codegen_static_fields_for(SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17_il2cpp_TypeInfo_var))->get_inLowered_5();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3465));
		bool L_17 = String_op_Equality_m139F0E4195AE2F856019E63B241F36F016997FCE(L_15, L_16, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3465));
		V_6 = L_17;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3449));
		bool L_18 = V_6;
		if (!L_18)
		{
			goto IL_0064;
		}
	}
	{
		// return SteamVR_ActionDirections.In;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3450));
		V_7 = 0;
		goto IL_0092;
	}

IL_0064:
	{
		// else if (direction == outLowered)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3451));
		String_t* L_19 = V_5;
		IL2CPP_RUNTIME_CLASS_INIT(SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17_il2cpp_TypeInfo_var);
		String_t* L_20 = ((SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17_StaticFields*)il2cpp_codegen_static_fields_for(SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17_il2cpp_TypeInfo_var))->get_outLowered_6();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3466));
		bool L_21 = String_op_Equality_m139F0E4195AE2F856019E63B241F36F016997FCE(L_19, L_20, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3466));
		V_8 = L_21;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3452));
		bool L_22 = V_8;
		if (!L_22)
		{
			goto IL_007b;
		}
	}
	{
		// return SteamVR_ActionDirections.Out;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3453));
		V_7 = 1;
		goto IL_0092;
	}

IL_007b:
	{
		// Debug.LogError("Could not find match for direction: " + direction);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3454));
		String_t* L_23 = V_5;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3467));
		String_t* L_24 = String_Concat_mB78D0094592718DA6D5DB6C712A9C225631666BE(_stringLiteral258E23932207BA363BB8C0D5C6F463CBDBE1EFC5, L_23, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3467));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3468));
		IL2CPP_RUNTIME_CLASS_INIT(Debug_t7B5FCB117E2FD63B6838BC52821B252E2BFB61C4_il2cpp_TypeInfo_var);
		Debug_LogError_m3BCF9B78263152261565DCA9DB7D55F0C391ED29(L_24, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3468));
		// return SteamVR_ActionDirections.In;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3455));
		V_7 = 0;
		goto IL_0092;
	}

IL_0092:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3456));
		int32_t L_25 = V_7;
		return L_25;
	}
}
// System.Void Valve.VR.SteamVR_Action_Source_Map::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Source_Map__ctor_m357508E2B821CFFCA32DAA7B72C9CEC839318744 (SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_Map__ctor_m357508E2B821CFFCA32DAA7B72C9CEC839318744_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_Map__ctor_m357508E2B821CFFCA32DAA7B72C9CEC839318744_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		Object__ctor_m925ECA5E85CA100E3FB86A4F9E15C120E9A184C0(__this, /*hidden argument*/NULL);
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Source_Map::.cctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Source_Map__cctor_mF8C1CC42AFBDF717407FDEDAF6AB49577F23A171 (const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_Map__cctor_mF8C1CC42AFBDF717407FDEDAF6AB49577F23A171_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_Map__cctor_mF8C1CC42AFBDF717407FDEDAF6AB49577F23A171_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3469));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3470));
	{
		// private static string inLowered = "IN".ToLower(System.Globalization.CultureInfo.CurrentCulture);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3471));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3473));
		IL2CPP_RUNTIME_CLASS_INIT(CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F_il2cpp_TypeInfo_var);
		CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F * L_0 = CultureInfo_get_CurrentCulture_mD86F3D8E5D332FB304F80D9B9CA4DE849C2A6831(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3473));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3474));
		NullCheck(_stringLiteral6FCA55CA3C828A46BFE96A10E69F572B61CE540C);
		String_t* L_1 = String_ToLower_m91732DBE4AE31B77EA3BB2C185E66513919968A5(_stringLiteral6FCA55CA3C828A46BFE96A10E69F572B61CE540C, L_0, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3474));
		((SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17_StaticFields*)il2cpp_codegen_static_fields_for(SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17_il2cpp_TypeInfo_var))->set_inLowered_5(L_1);
		// private static string outLowered = "OUT".ToLower(System.Globalization.CultureInfo.CurrentCulture);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3472));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3475));
		CultureInfo_t345AC6924134F039ED9A11F3E03F8E91B6A3225F * L_2 = CultureInfo_get_CurrentCulture_mD86F3D8E5D332FB304F80D9B9CA4DE849C2A6831(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3475));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3476));
		NullCheck(_stringLiteral5D84EB9E92DC661A577D3ADFBA33F1D74C56B13F);
		String_t* L_3 = String_ToLower_m91732DBE4AE31B77EA3BB2C185E66513919968A5(_stringLiteral5D84EB9E92DC661A577D3ADFBA33F1D74C56B13F, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3476));
		((SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17_StaticFields*)il2cpp_codegen_static_fields_for(SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17_il2cpp_TypeInfo_var))->set_outLowered_6(L_3);
		return;
	}
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Void Valve.VR.SteamVR_Action_Vector2::add_onChange(Valve.VR.SteamVR_Action_Vector2_ChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_add_onChange_m1F62155EA9883091580EC03275BE740C911BAAFF (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_add_onChange_m1F62155EA9883091580EC03275BE740C911BAAFF_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_add_onChange_m1F62155EA9883091580EC03275BE740C911BAAFF_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7979));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7980));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7981));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7982));
		SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * L_0 = ((SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7984));
		NullCheck(L_0);
		SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7984));
		ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7985));
		NullCheck(L_1);
		SteamVR_Action_Vector2_Source_add_onChange_m0E890E6CFC54755D7CA6271AACB94F0D16195BFC(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7985));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7983));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2::remove_onChange(Valve.VR.SteamVR_Action_Vector2_ChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_remove_onChange_m869E023BEB666D8A6A7955802BA9816EE77435F6 (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_remove_onChange_m869E023BEB666D8A6A7955802BA9816EE77435F6_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_remove_onChange_m869E023BEB666D8A6A7955802BA9816EE77435F6_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7986));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7987));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7988));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7989));
		SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * L_0 = ((SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7991));
		NullCheck(L_0);
		SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7991));
		ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7992));
		NullCheck(L_1);
		SteamVR_Action_Vector2_Source_remove_onChange_m6B9FFEDD2003E99E2C81E03B744E35528BCABEE1(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7992));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7990));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2::add_onUpdate(Valve.VR.SteamVR_Action_Vector2_UpdateHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_add_onUpdate_m2B0186EEB573726C35ED4A38486D31FFE5CBC469 (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_add_onUpdate_m2B0186EEB573726C35ED4A38486D31FFE5CBC469_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_add_onUpdate_m2B0186EEB573726C35ED4A38486D31FFE5CBC469_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7993));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7994));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7995));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onUpdate += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onUpdate -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7996));
		SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * L_0 = ((SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7998));
		NullCheck(L_0);
		SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7998));
		UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7999));
		NullCheck(L_1);
		SteamVR_Action_Vector2_Source_add_onUpdate_mF42BBDFA8EFE2D15571BE512017F7D2C8A016345(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7999));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onUpdate += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onUpdate -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7997));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2::remove_onUpdate(Valve.VR.SteamVR_Action_Vector2_UpdateHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_remove_onUpdate_mAEF9FF7CC422045456A60152EC8847FEDB033ED2 (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_remove_onUpdate_mAEF9FF7CC422045456A60152EC8847FEDB033ED2_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_remove_onUpdate_mAEF9FF7CC422045456A60152EC8847FEDB033ED2_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8000));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8001));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8002));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onUpdate += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onUpdate -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8003));
		SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * L_0 = ((SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8005));
		NullCheck(L_0);
		SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8005));
		UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8006));
		NullCheck(L_1);
		SteamVR_Action_Vector2_Source_remove_onUpdate_m7FA21E9B212C4E869AFE43AAE5D3138799CA8320(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8006));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onUpdate += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onUpdate -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8004));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2::add_onAxis(Valve.VR.SteamVR_Action_Vector2_AxisHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_add_onAxis_m9AF8E8737CD6E677A1FBFF700F6536919762898B (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_add_onAxis_m9AF8E8737CD6E677A1FBFF700F6536919762898B_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_add_onAxis_m9AF8E8737CD6E677A1FBFF700F6536919762898B_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8007));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8008));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8009));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onAxis += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onAxis -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8010));
		SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * L_0 = ((SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8012));
		NullCheck(L_0);
		SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8012));
		AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8013));
		NullCheck(L_1);
		SteamVR_Action_Vector2_Source_add_onAxis_m61879208AE0900224DF6DAC2B5F9AB437F3E3F65(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8013));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onAxis += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onAxis -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8011));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2::remove_onAxis(Valve.VR.SteamVR_Action_Vector2_AxisHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_remove_onAxis_mC00F340345B916EA150D4AA4FF3E03F924A67584 (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_remove_onAxis_mC00F340345B916EA150D4AA4FF3E03F924A67584_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_remove_onAxis_mC00F340345B916EA150D4AA4FF3E03F924A67584_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8014));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8015));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8016));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onAxis += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onAxis -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8017));
		SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * L_0 = ((SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8019));
		NullCheck(L_0);
		SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8019));
		AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8020));
		NullCheck(L_1);
		SteamVR_Action_Vector2_Source_remove_onAxis_mF3D7E276BA4A72809424D8F02B91BC600C706A45(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8020));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onAxis += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onAxis -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8018));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2::add_onActiveChange(Valve.VR.SteamVR_Action_Vector2_ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_add_onActiveChange_m0A69F75E3DC172336397A4100CE8E9536E907131 (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_add_onActiveChange_m0A69F75E3DC172336397A4100CE8E9536E907131_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_add_onActiveChange_m0A69F75E3DC172336397A4100CE8E9536E907131_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8021));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8022));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8023));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onActiveChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onActiveChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8024));
		SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * L_0 = ((SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8026));
		NullCheck(L_0);
		SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8026));
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8027));
		NullCheck(L_1);
		SteamVR_Action_Vector2_Source_add_onActiveChange_m748D7DF506E999E43D76725669A423DC02CAC2A2(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8027));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onActiveChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onActiveChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8025));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2::remove_onActiveChange(Valve.VR.SteamVR_Action_Vector2_ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_remove_onActiveChange_m27F9EC8B3B7CE60AB0AD1614DEE638622F6DABE7 (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_remove_onActiveChange_m27F9EC8B3B7CE60AB0AD1614DEE638622F6DABE7_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_remove_onActiveChange_m27F9EC8B3B7CE60AB0AD1614DEE638622F6DABE7_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8028));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8029));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8030));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onActiveChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onActiveChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8031));
		SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * L_0 = ((SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8033));
		NullCheck(L_0);
		SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8033));
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8034));
		NullCheck(L_1);
		SteamVR_Action_Vector2_Source_remove_onActiveChange_mF774E29E5C6AB17CE4351C8533279C2F1685F5A5(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8034));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onActiveChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onActiveChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8032));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2::add_onActiveBindingChange(Valve.VR.SteamVR_Action_Vector2_ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_add_onActiveBindingChange_m15664B2ED53BB2BD17087FDB290DA192A62D91C8 (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_add_onActiveBindingChange_m15664B2ED53BB2BD17087FDB290DA192A62D91C8_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_add_onActiveBindingChange_m15664B2ED53BB2BD17087FDB290DA192A62D91C8_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8035));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8036));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8037));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onActiveBindingChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onActiveBindingChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8038));
		SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * L_0 = ((SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8040));
		NullCheck(L_0);
		SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8040));
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8041));
		NullCheck(L_1);
		SteamVR_Action_Vector2_Source_add_onActiveBindingChange_m10B03BA452F43087BBBB922DD51EF10CAE15D6BC(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8041));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onActiveBindingChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onActiveBindingChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8039));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2::remove_onActiveBindingChange(Valve.VR.SteamVR_Action_Vector2_ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_remove_onActiveBindingChange_m28C26AEA56A5BE493976C0C18A34349E13B63029 (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_remove_onActiveBindingChange_m28C26AEA56A5BE493976C0C18A34349E13B63029_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_remove_onActiveBindingChange_m28C26AEA56A5BE493976C0C18A34349E13B63029_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8042));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8043));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8044));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onActiveBindingChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onActiveBindingChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8045));
		SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * L_0 = ((SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8047));
		NullCheck(L_0);
		SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8047));
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8048));
		NullCheck(L_1);
		SteamVR_Action_Vector2_Source_remove_onActiveBindingChange_m3A62BA01D3F897E4C7115DF360F9DE899A66EB12(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8048));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onActiveBindingChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onActiveBindingChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8046));
		return;
	}
}
// UnityEngine.Vector2 Valve.VR.SteamVR_Action_Vector2::get_axis()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  SteamVR_Action_Vector2_get_axis_mE421CADA54F41607E4F071B793BD5C55171812FB (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_get_axis_mE421CADA54F41607E4F071B793BD5C55171812FB_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_get_axis_mE421CADA54F41607E4F071B793BD5C55171812FB_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8049));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8050));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8051));
		// public Vector2 axis { get { return sourceMap[SteamVR_Input_Sources.Any].axis; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8052));
		SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * L_0 = ((SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8054));
		NullCheck(L_0);
		SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8054));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8055));
		NullCheck(L_1);
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_2 = SteamVR_Action_Vector2_Source_get_axis_mCEB6E517ED0E10BE513D22B23A69F1BE3D5DA2BA_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8055));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public Vector2 axis { get { return sourceMap[SteamVR_Input_Sources.Any].axis; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8053));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_3 = V_0;
		return L_3;
	}
}
// UnityEngine.Vector2 Valve.VR.SteamVR_Action_Vector2::get_lastAxis()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  SteamVR_Action_Vector2_get_lastAxis_m746D1B31C63B141A97FBD0F4138D703FC5F9DEF0 (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_get_lastAxis_m746D1B31C63B141A97FBD0F4138D703FC5F9DEF0_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_get_lastAxis_m746D1B31C63B141A97FBD0F4138D703FC5F9DEF0_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8056));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8057));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8058));
		// public Vector2 lastAxis { get { return sourceMap[SteamVR_Input_Sources.Any].lastAxis; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8059));
		SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * L_0 = ((SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8061));
		NullCheck(L_0);
		SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8061));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8062));
		NullCheck(L_1);
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_2 = SteamVR_Action_Vector2_Source_get_lastAxis_mD0A1188D33FAD9AAB16CBCC0C073796C76616460_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8062));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public Vector2 lastAxis { get { return sourceMap[SteamVR_Input_Sources.Any].lastAxis; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8060));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_3 = V_0;
		return L_3;
	}
}
// UnityEngine.Vector2 Valve.VR.SteamVR_Action_Vector2::get_delta()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  SteamVR_Action_Vector2_get_delta_m368E3DEDCCE873F323FCB9B85C72103971A2B1E9 (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_get_delta_m368E3DEDCCE873F323FCB9B85C72103971A2B1E9_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_get_delta_m368E3DEDCCE873F323FCB9B85C72103971A2B1E9_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8063));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8064));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8065));
		// public Vector2 delta { get { return sourceMap[SteamVR_Input_Sources.Any].delta; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8066));
		SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * L_0 = ((SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8068));
		NullCheck(L_0);
		SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8068));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8069));
		NullCheck(L_1);
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_2 = SteamVR_Action_Vector2_Source_get_delta_m19CFFF4B8014BD4ED43D0C5EDDD909A2F1DF1908_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8069));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public Vector2 delta { get { return sourceMap[SteamVR_Input_Sources.Any].delta; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8067));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_3 = V_0;
		return L_3;
	}
}
// UnityEngine.Vector2 Valve.VR.SteamVR_Action_Vector2::get_lastDelta()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  SteamVR_Action_Vector2_get_lastDelta_mDDAC2B9F3DB61F8B1015F22B61CDD9591FEEEDD7 (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_get_lastDelta_mDDAC2B9F3DB61F8B1015F22B61CDD9591FEEEDD7_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_get_lastDelta_mDDAC2B9F3DB61F8B1015F22B61CDD9591FEEEDD7_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8070));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8071));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8072));
		// public Vector2 lastDelta { get { return sourceMap[SteamVR_Input_Sources.Any].lastDelta; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8073));
		SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * L_0 = ((SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8075));
		NullCheck(L_0);
		SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * L_1 = SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8075));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8076));
		NullCheck(L_1);
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_2 = SteamVR_Action_Vector2_Source_get_lastDelta_mE21D07B848010D30A36B3C7338B5B615B81598AC_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8076));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public Vector2 lastDelta { get { return sourceMap[SteamVR_Input_Sources.Any].lastDelta; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8074));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_3 = V_0;
		return L_3;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2__ctor_mEEEA92BB27BB0513C419BAB3CB220ECBF331AF56 (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2__ctor_mEEEA92BB27BB0513C419BAB3CB220ECBF331AF56_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2__ctor_mEEEA92BB27BB0513C419BAB3CB220ECBF331AF56_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8077));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8078));
	{
		// public SteamVR_Action_Vector2() { }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8079));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8082));
		SteamVR_Action_In_2__ctor_mD999F898F7EC32F7FF2A4DE8A4FC77CB7012CC2F(__this, /*hidden argument*/SteamVR_Action_In_2__ctor_mD999F898F7EC32F7FF2A4DE8A4FC77CB7012CC2F_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8082));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8080));
		// public SteamVR_Action_Vector2() { }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8081));
		return;
	}
}
// UnityEngine.Vector2 Valve.VR.SteamVR_Action_Vector2::GetAxis(Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  SteamVR_Action_Vector2_GetAxis_m8A479C238CC933D200B7011F525F49CF84C42BC2 (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, int32_t ___inputSource0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_GetAxis_m8A479C238CC933D200B7011F525F49CF84C42BC2_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___inputSource0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_GetAxis_m8A479C238CC933D200B7011F525F49CF84C42BC2_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8083));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8084));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8085));
		// return sourceMap[inputSource].axis;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8086));
		SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * L_0 = ((SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 *)__this)->get_sourceMap_4();
		int32_t L_1 = ___inputSource0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8088));
		NullCheck(L_0);
		SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * L_2 = SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573(L_0, L_1, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8088));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8089));
		NullCheck(L_2);
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_3 = SteamVR_Action_Vector2_Source_get_axis_mCEB6E517ED0E10BE513D22B23A69F1BE3D5DA2BA_inline(L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8089));
		V_0 = L_3;
		goto IL_0015;
	}

IL_0015:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8087));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_4 = V_0;
		return L_4;
	}
}
// UnityEngine.Vector2 Valve.VR.SteamVR_Action_Vector2::GetAxisDelta(Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  SteamVR_Action_Vector2_GetAxisDelta_m28C52C9103D70A67727BE8BA93551C07951670B0 (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, int32_t ___inputSource0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_GetAxisDelta_m28C52C9103D70A67727BE8BA93551C07951670B0_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___inputSource0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_GetAxisDelta_m28C52C9103D70A67727BE8BA93551C07951670B0_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8090));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8091));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8092));
		// return sourceMap[inputSource].delta;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8093));
		SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * L_0 = ((SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 *)__this)->get_sourceMap_4();
		int32_t L_1 = ___inputSource0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8095));
		NullCheck(L_0);
		SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * L_2 = SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573(L_0, L_1, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8095));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8096));
		NullCheck(L_2);
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_3 = SteamVR_Action_Vector2_Source_get_delta_m19CFFF4B8014BD4ED43D0C5EDDD909A2F1DF1908_inline(L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8096));
		V_0 = L_3;
		goto IL_0015;
	}

IL_0015:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8094));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_4 = V_0;
		return L_4;
	}
}
// UnityEngine.Vector2 Valve.VR.SteamVR_Action_Vector2::GetLastAxis(Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  SteamVR_Action_Vector2_GetLastAxis_m4B679A6140787156C4E740F9A68D03D919111484 (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, int32_t ___inputSource0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_GetLastAxis_m4B679A6140787156C4E740F9A68D03D919111484_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___inputSource0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_GetLastAxis_m4B679A6140787156C4E740F9A68D03D919111484_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8097));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8098));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8099));
		// return sourceMap[inputSource].lastAxis;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8100));
		SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * L_0 = ((SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 *)__this)->get_sourceMap_4();
		int32_t L_1 = ___inputSource0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8102));
		NullCheck(L_0);
		SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * L_2 = SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573(L_0, L_1, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8102));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8103));
		NullCheck(L_2);
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_3 = SteamVR_Action_Vector2_Source_get_lastAxis_mD0A1188D33FAD9AAB16CBCC0C073796C76616460_inline(L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8103));
		V_0 = L_3;
		goto IL_0015;
	}

IL_0015:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8101));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_4 = V_0;
		return L_4;
	}
}
// UnityEngine.Vector2 Valve.VR.SteamVR_Action_Vector2::GetLastAxisDelta(Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  SteamVR_Action_Vector2_GetLastAxisDelta_mFB4F219149889D017084BD189D659164E91E90C6 (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, int32_t ___inputSource0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_GetLastAxisDelta_mFB4F219149889D017084BD189D659164E91E90C6_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___inputSource0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_GetLastAxisDelta_mFB4F219149889D017084BD189D659164E91E90C6_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8104));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8105));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8106));
		// return sourceMap[inputSource].lastDelta;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8107));
		SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * L_0 = ((SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 *)__this)->get_sourceMap_4();
		int32_t L_1 = ___inputSource0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8109));
		NullCheck(L_0);
		SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * L_2 = SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573(L_0, L_1, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8109));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8110));
		NullCheck(L_2);
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_3 = SteamVR_Action_Vector2_Source_get_lastDelta_mE21D07B848010D30A36B3C7338B5B615B81598AC_inline(L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8110));
		V_0 = L_3;
		goto IL_0015;
	}

IL_0015:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8108));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_4 = V_0;
		return L_4;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2::AddOnActiveChangeListener(Valve.VR.SteamVR_Action_Vector2_ActiveChangeHandler,Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_AddOnActiveChangeListener_m4356C2D99F90AC783F576D243573B89ECC4A0765 (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * ___functionToCall0, int32_t ___inputSource1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_AddOnActiveChangeListener_m4356C2D99F90AC783F576D243573B89ECC4A0765_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToCall0), (&___inputSource1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_AddOnActiveChangeListener_m4356C2D99F90AC783F576D243573B89ECC4A0765_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8111));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8112));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8113));
		// sourceMap[inputSource].onActiveChange += functionToCall;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8114));
		SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * L_0 = ((SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 *)__this)->get_sourceMap_4();
		int32_t L_1 = ___inputSource1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8116));
		NullCheck(L_0);
		SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * L_2 = SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573(L_0, L_1, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8116));
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_3 = ___functionToCall0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8117));
		NullCheck(L_2);
		SteamVR_Action_Vector2_Source_add_onActiveChange_m748D7DF506E999E43D76725669A423DC02CAC2A2(L_2, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8117));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8115));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2::RemoveOnActiveChangeListener(Valve.VR.SteamVR_Action_Vector2_ActiveChangeHandler,Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_RemoveOnActiveChangeListener_m77342D95999D75F33C4C1E7C1F052EA6DB22F9AE (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * ___functionToStopCalling0, int32_t ___inputSource1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_RemoveOnActiveChangeListener_m77342D95999D75F33C4C1E7C1F052EA6DB22F9AE_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToStopCalling0), (&___inputSource1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_RemoveOnActiveChangeListener_m77342D95999D75F33C4C1E7C1F052EA6DB22F9AE_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8118));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8119));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8120));
		// sourceMap[inputSource].onActiveChange -= functionToStopCalling;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8121));
		SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * L_0 = ((SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 *)__this)->get_sourceMap_4();
		int32_t L_1 = ___inputSource1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8123));
		NullCheck(L_0);
		SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * L_2 = SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573(L_0, L_1, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8123));
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_3 = ___functionToStopCalling0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8124));
		NullCheck(L_2);
		SteamVR_Action_Vector2_Source_remove_onActiveChange_mF774E29E5C6AB17CE4351C8533279C2F1685F5A5(L_2, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8124));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8122));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2::AddOnActiveBindingChangeListener(Valve.VR.SteamVR_Action_Vector2_ActiveChangeHandler,Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_AddOnActiveBindingChangeListener_m35A2F8651583EEEA5BFBC687A94D985FFD1C9A01 (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * ___functionToCall0, int32_t ___inputSource1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_AddOnActiveBindingChangeListener_m35A2F8651583EEEA5BFBC687A94D985FFD1C9A01_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToCall0), (&___inputSource1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_AddOnActiveBindingChangeListener_m35A2F8651583EEEA5BFBC687A94D985FFD1C9A01_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8125));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8126));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8127));
		// sourceMap[inputSource].onActiveBindingChange += functionToCall;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8128));
		SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * L_0 = ((SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 *)__this)->get_sourceMap_4();
		int32_t L_1 = ___inputSource1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8130));
		NullCheck(L_0);
		SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * L_2 = SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573(L_0, L_1, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8130));
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_3 = ___functionToCall0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8131));
		NullCheck(L_2);
		SteamVR_Action_Vector2_Source_add_onActiveBindingChange_m10B03BA452F43087BBBB922DD51EF10CAE15D6BC(L_2, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8131));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8129));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2::RemoveOnActiveBindingChangeListener(Valve.VR.SteamVR_Action_Vector2_ActiveChangeHandler,Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_RemoveOnActiveBindingChangeListener_m3BDA480949C10CEC9D1EE308FA3A104860A5D193 (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * ___functionToStopCalling0, int32_t ___inputSource1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_RemoveOnActiveBindingChangeListener_m3BDA480949C10CEC9D1EE308FA3A104860A5D193_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToStopCalling0), (&___inputSource1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_RemoveOnActiveBindingChangeListener_m3BDA480949C10CEC9D1EE308FA3A104860A5D193_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8132));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8133));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8134));
		// sourceMap[inputSource].onActiveBindingChange -= functionToStopCalling;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8135));
		SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * L_0 = ((SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 *)__this)->get_sourceMap_4();
		int32_t L_1 = ___inputSource1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8137));
		NullCheck(L_0);
		SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * L_2 = SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573(L_0, L_1, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8137));
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_3 = ___functionToStopCalling0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8138));
		NullCheck(L_2);
		SteamVR_Action_Vector2_Source_remove_onActiveBindingChange_m3A62BA01D3F897E4C7115DF360F9DE899A66EB12(L_2, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8138));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8136));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2::AddOnChangeListener(Valve.VR.SteamVR_Action_Vector2_ChangeHandler,Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_AddOnChangeListener_m56C1216E50360BCA55C3A0C0EFD71D622939D3FE (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * ___functionToCall0, int32_t ___inputSource1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_AddOnChangeListener_m56C1216E50360BCA55C3A0C0EFD71D622939D3FE_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToCall0), (&___inputSource1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_AddOnChangeListener_m56C1216E50360BCA55C3A0C0EFD71D622939D3FE_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8139));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8140));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8141));
		// sourceMap[inputSource].onChange += functionToCall;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8142));
		SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * L_0 = ((SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 *)__this)->get_sourceMap_4();
		int32_t L_1 = ___inputSource1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8144));
		NullCheck(L_0);
		SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * L_2 = SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573(L_0, L_1, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8144));
		ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * L_3 = ___functionToCall0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8145));
		NullCheck(L_2);
		SteamVR_Action_Vector2_Source_add_onChange_m0E890E6CFC54755D7CA6271AACB94F0D16195BFC(L_2, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8145));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8143));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2::RemoveOnChangeListener(Valve.VR.SteamVR_Action_Vector2_ChangeHandler,Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_RemoveOnChangeListener_mBFA847AD63D1EFEBEB507A0EDB69DC8721C9C53E (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * ___functionToStopCalling0, int32_t ___inputSource1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_RemoveOnChangeListener_mBFA847AD63D1EFEBEB507A0EDB69DC8721C9C53E_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToStopCalling0), (&___inputSource1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_RemoveOnChangeListener_mBFA847AD63D1EFEBEB507A0EDB69DC8721C9C53E_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8146));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8147));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8148));
		// sourceMap[inputSource].onChange -= functionToStopCalling;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8149));
		SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * L_0 = ((SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 *)__this)->get_sourceMap_4();
		int32_t L_1 = ___inputSource1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8151));
		NullCheck(L_0);
		SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * L_2 = SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573(L_0, L_1, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8151));
		ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * L_3 = ___functionToStopCalling0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8152));
		NullCheck(L_2);
		SteamVR_Action_Vector2_Source_remove_onChange_m6B9FFEDD2003E99E2C81E03B744E35528BCABEE1(L_2, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8152));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8150));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2::AddOnUpdateListener(Valve.VR.SteamVR_Action_Vector2_UpdateHandler,Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_AddOnUpdateListener_m26DF2290B9B1D47A4F581F149686B184C5625F18 (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * ___functionToCall0, int32_t ___inputSource1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_AddOnUpdateListener_m26DF2290B9B1D47A4F581F149686B184C5625F18_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToCall0), (&___inputSource1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_AddOnUpdateListener_m26DF2290B9B1D47A4F581F149686B184C5625F18_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8153));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8154));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8155));
		// sourceMap[inputSource].onUpdate += functionToCall;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8156));
		SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * L_0 = ((SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 *)__this)->get_sourceMap_4();
		int32_t L_1 = ___inputSource1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8158));
		NullCheck(L_0);
		SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * L_2 = SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573(L_0, L_1, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8158));
		UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * L_3 = ___functionToCall0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8159));
		NullCheck(L_2);
		SteamVR_Action_Vector2_Source_add_onUpdate_mF42BBDFA8EFE2D15571BE512017F7D2C8A016345(L_2, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8159));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8157));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2::RemoveOnUpdateListener(Valve.VR.SteamVR_Action_Vector2_UpdateHandler,Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_RemoveOnUpdateListener_m9B8C6E9BFE29429882D6118D4BDC13B441FA7FA6 (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * ___functionToStopCalling0, int32_t ___inputSource1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_RemoveOnUpdateListener_m9B8C6E9BFE29429882D6118D4BDC13B441FA7FA6_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToStopCalling0), (&___inputSource1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_RemoveOnUpdateListener_m9B8C6E9BFE29429882D6118D4BDC13B441FA7FA6_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8160));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8161));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8162));
		// sourceMap[inputSource].onUpdate -= functionToStopCalling;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8163));
		SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * L_0 = ((SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 *)__this)->get_sourceMap_4();
		int32_t L_1 = ___inputSource1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8165));
		NullCheck(L_0);
		SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * L_2 = SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573(L_0, L_1, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8165));
		UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * L_3 = ___functionToStopCalling0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8166));
		NullCheck(L_2);
		SteamVR_Action_Vector2_Source_remove_onUpdate_m7FA21E9B212C4E869AFE43AAE5D3138799CA8320(L_2, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8166));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8164));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2::AddOnAxisListener(Valve.VR.SteamVR_Action_Vector2_AxisHandler,Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_AddOnAxisListener_m5167A71DD40E61F49C0651E92F333FF72DE8F918 (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * ___functionToCall0, int32_t ___inputSource1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_AddOnAxisListener_m5167A71DD40E61F49C0651E92F333FF72DE8F918_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToCall0), (&___inputSource1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_AddOnAxisListener_m5167A71DD40E61F49C0651E92F333FF72DE8F918_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8167));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8168));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8169));
		// sourceMap[inputSource].onAxis += functionToCall;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8170));
		SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * L_0 = ((SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 *)__this)->get_sourceMap_4();
		int32_t L_1 = ___inputSource1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8172));
		NullCheck(L_0);
		SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * L_2 = SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573(L_0, L_1, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8172));
		AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * L_3 = ___functionToCall0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8173));
		NullCheck(L_2);
		SteamVR_Action_Vector2_Source_add_onAxis_m61879208AE0900224DF6DAC2B5F9AB437F3E3F65(L_2, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8173));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8171));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2::RemoveOnAxisListener(Valve.VR.SteamVR_Action_Vector2_AxisHandler,Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_RemoveOnAxisListener_m2E5541FBF94FF3B4854220E63766E1A383126384 (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * ___functionToStopCalling0, int32_t ___inputSource1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_RemoveOnAxisListener_m2E5541FBF94FF3B4854220E63766E1A383126384_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToStopCalling0), (&___inputSource1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_RemoveOnAxisListener_m2E5541FBF94FF3B4854220E63766E1A383126384_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8174));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8175));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8176));
		// sourceMap[inputSource].onAxis -= functionToStopCalling;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8177));
		SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * L_0 = ((SteamVR_Action_2_t83C041411A0CA61D62EE3A4F510D83333D049258 *)__this)->get_sourceMap_4();
		int32_t L_1 = ___inputSource1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8179));
		NullCheck(L_0);
		SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * L_2 = SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573(L_0, L_1, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_mEDF32C5B66B3E92A4C4B24DF0ECF75210AC18573_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8179));
		AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * L_3 = ___functionToStopCalling0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8180));
		NullCheck(L_2);
		SteamVR_Action_Vector2_Source_remove_onAxis_mF3D7E276BA4A72809424D8F02B91BC600C706A45(L_2, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8180));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8178));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2::UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize_mBA1C1038518ABB4C40774855505FB7844ECEC552 (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize_mBA1C1038518ABB4C40774855505FB7844ECEC552_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize_mBA1C1038518ABB4C40774855505FB7844ECEC552_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8181));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8182));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8183));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8184));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2::UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize_m19FBDDF4C65A56BE9DEFBFF7D9C20ED59218FB4C (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize_m19FBDDF4C65A56BE9DEFBFF7D9C20ED59218FB4C_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize_m19FBDDF4C65A56BE9DEFBFF7D9C20ED59218FB4C_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8185));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8186));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8187));
		// InitAfterDeserialize();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8188));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8190));
		SteamVR_Action_2_InitAfterDeserialize_mF4DC388BA98BF545E220E94BC0C4DBF458090EB7(__this, /*hidden argument*/SteamVR_Action_2_InitAfterDeserialize_mF4DC388BA98BF545E220E94BC0C4DBF458090EB7_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8190));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8189));
		return;
	}
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Void Valve.VR.SteamVR_Action_Vector2_ActiveChangeHandler::.ctor(System.Object,System.IntPtr)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ActiveChangeHandler__ctor_mFADE885B55154CAD43F1649E7EC69DA181FDBDB1 (ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * __this, RuntimeObject * ___object0, intptr_t ___method1, const RuntimeMethod* method)
{
	__this->set_method_ptr_0(il2cpp_codegen_get_method_pointer((RuntimeMethod*)___method1));
	__this->set_method_3(___method1);
	__this->set_m_target_2(___object0);
}
// System.Void Valve.VR.SteamVR_Action_Vector2_ActiveChangeHandler::Invoke(Valve.VR.SteamVR_Action_Vector2,Valve.VR.SteamVR_Input_Sources,System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ActiveChangeHandler_Invoke_m6F9573537B1F39ADF5C93AA6452D108C664CC943 (ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * __this, SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * ___fromAction0, int32_t ___fromSource1, bool ___active2, const RuntimeMethod* method)
{
	DelegateU5BU5D_tDFCDEE2A6322F96C0FE49AF47E9ADB8C4B294E86* delegateArrayToInvoke = __this->get_delegates_11();
	Delegate_t** delegatesToInvoke;
	il2cpp_array_size_t length;
	if (delegateArrayToInvoke != NULL)
	{
		length = delegateArrayToInvoke->max_length;
		delegatesToInvoke = reinterpret_cast<Delegate_t**>(delegateArrayToInvoke->GetAddressAtUnchecked(0));
	}
	else
	{
		length = 1;
		delegatesToInvoke = reinterpret_cast<Delegate_t**>(&__this);
	}

	for (il2cpp_array_size_t i = 0; i < length; i++)
	{
		Delegate_t* currentDelegate = delegatesToInvoke[i];
		Il2CppMethodPointer targetMethodPointer = currentDelegate->get_method_ptr_0();
		RuntimeObject* targetThis = currentDelegate->get_m_target_2();
		RuntimeMethod* targetMethod = (RuntimeMethod*)(currentDelegate->get_method_3());
		if (!il2cpp_codegen_method_is_virtual(targetMethod))
		{
			il2cpp_codegen_raise_execution_engine_exception_if_method_is_not_found(targetMethod);
		}
		bool ___methodIsStatic = MethodIsStatic(targetMethod);
		int ___parameterCount = il2cpp_codegen_method_parameter_count(targetMethod);
		if (___methodIsStatic)
		{
			if (___parameterCount == 3)
			{
				// open
				typedef void (*FunctionPointerType) (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, bool, const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(___fromAction0, ___fromSource1, ___active2, targetMethod);
			}
			else
			{
				// closed
				typedef void (*FunctionPointerType) (void*, SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, bool, const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(targetThis, ___fromAction0, ___fromSource1, ___active2, targetMethod);
			}
		}
		else if (___parameterCount != 3)
		{
			// open
			if (il2cpp_codegen_method_is_virtual(targetMethod) && il2cpp_codegen_delegate_has_invoker((Il2CppDelegate*)__this))
			{
				if (il2cpp_codegen_method_is_generic_instance(targetMethod))
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						GenericInterfaceActionInvoker2< int32_t, bool >::Invoke(targetMethod, ___fromAction0, ___fromSource1, ___active2);
					else
						GenericVirtActionInvoker2< int32_t, bool >::Invoke(targetMethod, ___fromAction0, ___fromSource1, ___active2);
				}
				else
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						InterfaceActionInvoker2< int32_t, bool >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), il2cpp_codegen_method_get_declaring_type(targetMethod), ___fromAction0, ___fromSource1, ___active2);
					else
						VirtActionInvoker2< int32_t, bool >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), ___fromAction0, ___fromSource1, ___active2);
				}
			}
			else
			{
				if (targetThis == NULL && il2cpp_codegen_class_is_value_type(il2cpp_codegen_method_get_declaring_type(targetMethod)))
				{
					typedef void (*FunctionPointerType) (RuntimeObject*, bool, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)((reinterpret_cast<RuntimeObject*>(&___fromSource1) - 1), ___active2, targetMethod);
				}
				typedef void (*FunctionPointerType) (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, bool, const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(___fromAction0, ___fromSource1, ___active2, targetMethod);
			}
		}
		else
		{
			// closed
			if (targetThis != NULL && il2cpp_codegen_method_is_virtual(targetMethod) && !il2cpp_codegen_object_is_of_sealed_type(targetThis) && il2cpp_codegen_delegate_has_invoker((Il2CppDelegate*)__this))
			{
				if (il2cpp_codegen_method_is_generic_instance(targetMethod))
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						GenericInterfaceActionInvoker3< SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, bool >::Invoke(targetMethod, targetThis, ___fromAction0, ___fromSource1, ___active2);
					else
						GenericVirtActionInvoker3< SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, bool >::Invoke(targetMethod, targetThis, ___fromAction0, ___fromSource1, ___active2);
				}
				else
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						InterfaceActionInvoker3< SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, bool >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), il2cpp_codegen_method_get_declaring_type(targetMethod), targetThis, ___fromAction0, ___fromSource1, ___active2);
					else
						VirtActionInvoker3< SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, bool >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), targetThis, ___fromAction0, ___fromSource1, ___active2);
				}
			}
			else
			{
				if (targetThis == NULL && il2cpp_codegen_class_is_value_type(il2cpp_codegen_method_get_declaring_type(targetMethod)))
				{
					typedef void (*FunctionPointerType) (RuntimeObject*, int32_t, bool, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)((reinterpret_cast<RuntimeObject*>(___fromAction0) - 1), ___fromSource1, ___active2, targetMethod);
				}
				if (targetThis == NULL)
				{
					typedef void (*FunctionPointerType) (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, bool, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)(___fromAction0, ___fromSource1, ___active2, targetMethod);
				}
				else
				{
					typedef void (*FunctionPointerType) (void*, SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, bool, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)(targetThis, ___fromAction0, ___fromSource1, ___active2, targetMethod);
				}
			}
		}
	}
}
// System.IAsyncResult Valve.VR.SteamVR_Action_Vector2_ActiveChangeHandler::BeginInvoke(Valve.VR.SteamVR_Action_Vector2,Valve.VR.SteamVR_Input_Sources,System.Boolean,System.AsyncCallback,System.Object)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RuntimeObject* ActiveChangeHandler_BeginInvoke_m9858F23AEB6C3D2B98736BBD60B2ED75E533A673 (ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * __this, SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * ___fromAction0, int32_t ___fromSource1, bool ___active2, AsyncCallback_t3F3DA3BEDAEE81DD1D24125DF8EB30E85EE14DA4 * ___callback3, RuntimeObject * ___object4, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ActiveChangeHandler_BeginInvoke_m9858F23AEB6C3D2B98736BBD60B2ED75E533A673_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	void *__d_args[4] = {0};
	__d_args[0] = ___fromAction0;
	__d_args[1] = Box(SteamVR_Input_Sources_tCE41AA589FB3B9516BDE0DFABDCB4AAEA29528F7_il2cpp_TypeInfo_var, &___fromSource1);
	__d_args[2] = Box(Boolean_tB53F6830F670160873277339AA58F15CAED4399C_il2cpp_TypeInfo_var, &___active2);
	return (RuntimeObject*)il2cpp_codegen_delegate_begin_invoke((RuntimeDelegate*)__this, __d_args, (RuntimeDelegate*)___callback3, (RuntimeObject*)___object4);
}
// System.Void Valve.VR.SteamVR_Action_Vector2_ActiveChangeHandler::EndInvoke(System.IAsyncResult)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ActiveChangeHandler_EndInvoke_m5F457F225F3273FA2BF48C8FD84DF48E88E1BDB8 (ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * __this, RuntimeObject* ___result0, const RuntimeMethod* method)
{
	il2cpp_codegen_delegate_end_invoke((Il2CppAsyncResult*) ___result0, 0);
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Void Valve.VR.SteamVR_Action_Vector2_AxisHandler::.ctor(System.Object,System.IntPtr)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void AxisHandler__ctor_m43DE295DBA352E97E0ADDF76C348978B40EA4116 (AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * __this, RuntimeObject * ___object0, intptr_t ___method1, const RuntimeMethod* method)
{
	__this->set_method_ptr_0(il2cpp_codegen_get_method_pointer((RuntimeMethod*)___method1));
	__this->set_method_3(___method1);
	__this->set_m_target_2(___object0);
}
// System.Void Valve.VR.SteamVR_Action_Vector2_AxisHandler::Invoke(Valve.VR.SteamVR_Action_Vector2,Valve.VR.SteamVR_Input_Sources,UnityEngine.Vector2,UnityEngine.Vector2)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void AxisHandler_Invoke_mFB29C3120DB4B338D9465DADD73FD30E158E05AB (AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * __this, SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * ___fromAction0, int32_t ___fromSource1, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___axis2, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___delta3, const RuntimeMethod* method)
{
	DelegateU5BU5D_tDFCDEE2A6322F96C0FE49AF47E9ADB8C4B294E86* delegateArrayToInvoke = __this->get_delegates_11();
	Delegate_t** delegatesToInvoke;
	il2cpp_array_size_t length;
	if (delegateArrayToInvoke != NULL)
	{
		length = delegateArrayToInvoke->max_length;
		delegatesToInvoke = reinterpret_cast<Delegate_t**>(delegateArrayToInvoke->GetAddressAtUnchecked(0));
	}
	else
	{
		length = 1;
		delegatesToInvoke = reinterpret_cast<Delegate_t**>(&__this);
	}

	for (il2cpp_array_size_t i = 0; i < length; i++)
	{
		Delegate_t* currentDelegate = delegatesToInvoke[i];
		Il2CppMethodPointer targetMethodPointer = currentDelegate->get_method_ptr_0();
		RuntimeObject* targetThis = currentDelegate->get_m_target_2();
		RuntimeMethod* targetMethod = (RuntimeMethod*)(currentDelegate->get_method_3());
		if (!il2cpp_codegen_method_is_virtual(targetMethod))
		{
			il2cpp_codegen_raise_execution_engine_exception_if_method_is_not_found(targetMethod);
		}
		bool ___methodIsStatic = MethodIsStatic(targetMethod);
		int ___parameterCount = il2cpp_codegen_method_parameter_count(targetMethod);
		if (___methodIsStatic)
		{
			if (___parameterCount == 4)
			{
				// open
				typedef void (*FunctionPointerType) (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
			}
			else
			{
				// closed
				typedef void (*FunctionPointerType) (void*, SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
			}
		}
		else if (___parameterCount != 4)
		{
			// open
			if (il2cpp_codegen_method_is_virtual(targetMethod) && il2cpp_codegen_delegate_has_invoker((Il2CppDelegate*)__this))
			{
				if (il2cpp_codegen_method_is_generic_instance(targetMethod))
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						GenericInterfaceActionInvoker3< int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  >::Invoke(targetMethod, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
					else
						GenericVirtActionInvoker3< int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  >::Invoke(targetMethod, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
				}
				else
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						InterfaceActionInvoker3< int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), il2cpp_codegen_method_get_declaring_type(targetMethod), ___fromAction0, ___fromSource1, ___axis2, ___delta3);
					else
						VirtActionInvoker3< int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), ___fromAction0, ___fromSource1, ___axis2, ___delta3);
				}
			}
			else
			{
				if (targetThis == NULL && il2cpp_codegen_class_is_value_type(il2cpp_codegen_method_get_declaring_type(targetMethod)))
				{
					typedef void (*FunctionPointerType) (RuntimeObject*, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)((reinterpret_cast<RuntimeObject*>(&___fromSource1) - 1), ___axis2, ___delta3, targetMethod);
				}
				typedef void (*FunctionPointerType) (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
			}
		}
		else
		{
			// closed
			if (targetThis != NULL && il2cpp_codegen_method_is_virtual(targetMethod) && !il2cpp_codegen_object_is_of_sealed_type(targetThis) && il2cpp_codegen_delegate_has_invoker((Il2CppDelegate*)__this))
			{
				if (il2cpp_codegen_method_is_generic_instance(targetMethod))
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						GenericInterfaceActionInvoker4< SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  >::Invoke(targetMethod, targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
					else
						GenericVirtActionInvoker4< SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  >::Invoke(targetMethod, targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
				}
				else
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						InterfaceActionInvoker4< SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), il2cpp_codegen_method_get_declaring_type(targetMethod), targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
					else
						VirtActionInvoker4< SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
				}
			}
			else
			{
				if (targetThis == NULL && il2cpp_codegen_class_is_value_type(il2cpp_codegen_method_get_declaring_type(targetMethod)))
				{
					typedef void (*FunctionPointerType) (RuntimeObject*, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)((reinterpret_cast<RuntimeObject*>(___fromAction0) - 1), ___fromSource1, ___axis2, ___delta3, targetMethod);
				}
				if (targetThis == NULL)
				{
					typedef void (*FunctionPointerType) (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)(___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
				}
				else
				{
					typedef void (*FunctionPointerType) (void*, SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)(targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
				}
			}
		}
	}
}
// System.IAsyncResult Valve.VR.SteamVR_Action_Vector2_AxisHandler::BeginInvoke(Valve.VR.SteamVR_Action_Vector2,Valve.VR.SteamVR_Input_Sources,UnityEngine.Vector2,UnityEngine.Vector2,System.AsyncCallback,System.Object)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RuntimeObject* AxisHandler_BeginInvoke_m56A724C82B49A38D44B3D2B18453771AFA341B36 (AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * __this, SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * ___fromAction0, int32_t ___fromSource1, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___axis2, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___delta3, AsyncCallback_t3F3DA3BEDAEE81DD1D24125DF8EB30E85EE14DA4 * ___callback4, RuntimeObject * ___object5, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (AxisHandler_BeginInvoke_m56A724C82B49A38D44B3D2B18453771AFA341B36_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	void *__d_args[5] = {0};
	__d_args[0] = ___fromAction0;
	__d_args[1] = Box(SteamVR_Input_Sources_tCE41AA589FB3B9516BDE0DFABDCB4AAEA29528F7_il2cpp_TypeInfo_var, &___fromSource1);
	__d_args[2] = Box(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_il2cpp_TypeInfo_var, &___axis2);
	__d_args[3] = Box(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_il2cpp_TypeInfo_var, &___delta3);
	return (RuntimeObject*)il2cpp_codegen_delegate_begin_invoke((RuntimeDelegate*)__this, __d_args, (RuntimeDelegate*)___callback4, (RuntimeObject*)___object5);
}
// System.Void Valve.VR.SteamVR_Action_Vector2_AxisHandler::EndInvoke(System.IAsyncResult)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void AxisHandler_EndInvoke_m6954E7C672A9CAF8A04F30F847E8BC401EE8BEE6 (AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * __this, RuntimeObject* ___result0, const RuntimeMethod* method)
{
	il2cpp_codegen_delegate_end_invoke((Il2CppAsyncResult*) ___result0, 0);
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Void Valve.VR.SteamVR_Action_Vector2_ChangeHandler::.ctor(System.Object,System.IntPtr)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ChangeHandler__ctor_mFF4992C9413970CEDCB6B9790954BA7C6C6C61B3 (ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * __this, RuntimeObject * ___object0, intptr_t ___method1, const RuntimeMethod* method)
{
	__this->set_method_ptr_0(il2cpp_codegen_get_method_pointer((RuntimeMethod*)___method1));
	__this->set_method_3(___method1);
	__this->set_m_target_2(___object0);
}
// System.Void Valve.VR.SteamVR_Action_Vector2_ChangeHandler::Invoke(Valve.VR.SteamVR_Action_Vector2,Valve.VR.SteamVR_Input_Sources,UnityEngine.Vector2,UnityEngine.Vector2)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ChangeHandler_Invoke_mD9CA3B62E4D42C612CFE1F900C127EB2E178869C (ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * __this, SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * ___fromAction0, int32_t ___fromSource1, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___axis2, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___delta3, const RuntimeMethod* method)
{
	DelegateU5BU5D_tDFCDEE2A6322F96C0FE49AF47E9ADB8C4B294E86* delegateArrayToInvoke = __this->get_delegates_11();
	Delegate_t** delegatesToInvoke;
	il2cpp_array_size_t length;
	if (delegateArrayToInvoke != NULL)
	{
		length = delegateArrayToInvoke->max_length;
		delegatesToInvoke = reinterpret_cast<Delegate_t**>(delegateArrayToInvoke->GetAddressAtUnchecked(0));
	}
	else
	{
		length = 1;
		delegatesToInvoke = reinterpret_cast<Delegate_t**>(&__this);
	}

	for (il2cpp_array_size_t i = 0; i < length; i++)
	{
		Delegate_t* currentDelegate = delegatesToInvoke[i];
		Il2CppMethodPointer targetMethodPointer = currentDelegate->get_method_ptr_0();
		RuntimeObject* targetThis = currentDelegate->get_m_target_2();
		RuntimeMethod* targetMethod = (RuntimeMethod*)(currentDelegate->get_method_3());
		if (!il2cpp_codegen_method_is_virtual(targetMethod))
		{
			il2cpp_codegen_raise_execution_engine_exception_if_method_is_not_found(targetMethod);
		}
		bool ___methodIsStatic = MethodIsStatic(targetMethod);
		int ___parameterCount = il2cpp_codegen_method_parameter_count(targetMethod);
		if (___methodIsStatic)
		{
			if (___parameterCount == 4)
			{
				// open
				typedef void (*FunctionPointerType) (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
			}
			else
			{
				// closed
				typedef void (*FunctionPointerType) (void*, SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
			}
		}
		else if (___parameterCount != 4)
		{
			// open
			if (il2cpp_codegen_method_is_virtual(targetMethod) && il2cpp_codegen_delegate_has_invoker((Il2CppDelegate*)__this))
			{
				if (il2cpp_codegen_method_is_generic_instance(targetMethod))
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						GenericInterfaceActionInvoker3< int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  >::Invoke(targetMethod, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
					else
						GenericVirtActionInvoker3< int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  >::Invoke(targetMethod, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
				}
				else
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						InterfaceActionInvoker3< int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), il2cpp_codegen_method_get_declaring_type(targetMethod), ___fromAction0, ___fromSource1, ___axis2, ___delta3);
					else
						VirtActionInvoker3< int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), ___fromAction0, ___fromSource1, ___axis2, ___delta3);
				}
			}
			else
			{
				if (targetThis == NULL && il2cpp_codegen_class_is_value_type(il2cpp_codegen_method_get_declaring_type(targetMethod)))
				{
					typedef void (*FunctionPointerType) (RuntimeObject*, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)((reinterpret_cast<RuntimeObject*>(&___fromSource1) - 1), ___axis2, ___delta3, targetMethod);
				}
				typedef void (*FunctionPointerType) (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
			}
		}
		else
		{
			// closed
			if (targetThis != NULL && il2cpp_codegen_method_is_virtual(targetMethod) && !il2cpp_codegen_object_is_of_sealed_type(targetThis) && il2cpp_codegen_delegate_has_invoker((Il2CppDelegate*)__this))
			{
				if (il2cpp_codegen_method_is_generic_instance(targetMethod))
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						GenericInterfaceActionInvoker4< SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  >::Invoke(targetMethod, targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
					else
						GenericVirtActionInvoker4< SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  >::Invoke(targetMethod, targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
				}
				else
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						InterfaceActionInvoker4< SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), il2cpp_codegen_method_get_declaring_type(targetMethod), targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
					else
						VirtActionInvoker4< SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
				}
			}
			else
			{
				if (targetThis == NULL && il2cpp_codegen_class_is_value_type(il2cpp_codegen_method_get_declaring_type(targetMethod)))
				{
					typedef void (*FunctionPointerType) (RuntimeObject*, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)((reinterpret_cast<RuntimeObject*>(___fromAction0) - 1), ___fromSource1, ___axis2, ___delta3, targetMethod);
				}
				if (targetThis == NULL)
				{
					typedef void (*FunctionPointerType) (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)(___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
				}
				else
				{
					typedef void (*FunctionPointerType) (void*, SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)(targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
				}
			}
		}
	}
}
// System.IAsyncResult Valve.VR.SteamVR_Action_Vector2_ChangeHandler::BeginInvoke(Valve.VR.SteamVR_Action_Vector2,Valve.VR.SteamVR_Input_Sources,UnityEngine.Vector2,UnityEngine.Vector2,System.AsyncCallback,System.Object)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RuntimeObject* ChangeHandler_BeginInvoke_m0EF461A8F50FD59DC6511DC78FCD636809CF5F14 (ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * __this, SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * ___fromAction0, int32_t ___fromSource1, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___axis2, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___delta3, AsyncCallback_t3F3DA3BEDAEE81DD1D24125DF8EB30E85EE14DA4 * ___callback4, RuntimeObject * ___object5, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ChangeHandler_BeginInvoke_m0EF461A8F50FD59DC6511DC78FCD636809CF5F14_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	void *__d_args[5] = {0};
	__d_args[0] = ___fromAction0;
	__d_args[1] = Box(SteamVR_Input_Sources_tCE41AA589FB3B9516BDE0DFABDCB4AAEA29528F7_il2cpp_TypeInfo_var, &___fromSource1);
	__d_args[2] = Box(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_il2cpp_TypeInfo_var, &___axis2);
	__d_args[3] = Box(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_il2cpp_TypeInfo_var, &___delta3);
	return (RuntimeObject*)il2cpp_codegen_delegate_begin_invoke((RuntimeDelegate*)__this, __d_args, (RuntimeDelegate*)___callback4, (RuntimeObject*)___object5);
}
// System.Void Valve.VR.SteamVR_Action_Vector2_ChangeHandler::EndInvoke(System.IAsyncResult)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ChangeHandler_EndInvoke_m8EDE2AABE4E2E17B66505A5B5A4AAA9B72DB5DC9 (ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * __this, RuntimeObject* ___result0, const RuntimeMethod* method)
{
	il2cpp_codegen_delegate_end_invoke((Il2CppAsyncResult*) ___result0, 0);
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Void Valve.VR.SteamVR_Action_Vector2_UpdateHandler::.ctor(System.Object,System.IntPtr)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void UpdateHandler__ctor_mEFB9316D6DB2AE3E0C8C6495E4F31F5AF7B96EA7 (UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * __this, RuntimeObject * ___object0, intptr_t ___method1, const RuntimeMethod* method)
{
	__this->set_method_ptr_0(il2cpp_codegen_get_method_pointer((RuntimeMethod*)___method1));
	__this->set_method_3(___method1);
	__this->set_m_target_2(___object0);
}
// System.Void Valve.VR.SteamVR_Action_Vector2_UpdateHandler::Invoke(Valve.VR.SteamVR_Action_Vector2,Valve.VR.SteamVR_Input_Sources,UnityEngine.Vector2,UnityEngine.Vector2)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void UpdateHandler_Invoke_mDAB942B37EFE85A16B58B2E6300770D04437F2C1 (UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * __this, SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * ___fromAction0, int32_t ___fromSource1, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___axis2, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___delta3, const RuntimeMethod* method)
{
	DelegateU5BU5D_tDFCDEE2A6322F96C0FE49AF47E9ADB8C4B294E86* delegateArrayToInvoke = __this->get_delegates_11();
	Delegate_t** delegatesToInvoke;
	il2cpp_array_size_t length;
	if (delegateArrayToInvoke != NULL)
	{
		length = delegateArrayToInvoke->max_length;
		delegatesToInvoke = reinterpret_cast<Delegate_t**>(delegateArrayToInvoke->GetAddressAtUnchecked(0));
	}
	else
	{
		length = 1;
		delegatesToInvoke = reinterpret_cast<Delegate_t**>(&__this);
	}

	for (il2cpp_array_size_t i = 0; i < length; i++)
	{
		Delegate_t* currentDelegate = delegatesToInvoke[i];
		Il2CppMethodPointer targetMethodPointer = currentDelegate->get_method_ptr_0();
		RuntimeObject* targetThis = currentDelegate->get_m_target_2();
		RuntimeMethod* targetMethod = (RuntimeMethod*)(currentDelegate->get_method_3());
		if (!il2cpp_codegen_method_is_virtual(targetMethod))
		{
			il2cpp_codegen_raise_execution_engine_exception_if_method_is_not_found(targetMethod);
		}
		bool ___methodIsStatic = MethodIsStatic(targetMethod);
		int ___parameterCount = il2cpp_codegen_method_parameter_count(targetMethod);
		if (___methodIsStatic)
		{
			if (___parameterCount == 4)
			{
				// open
				typedef void (*FunctionPointerType) (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
			}
			else
			{
				// closed
				typedef void (*FunctionPointerType) (void*, SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
			}
		}
		else if (___parameterCount != 4)
		{
			// open
			if (il2cpp_codegen_method_is_virtual(targetMethod) && il2cpp_codegen_delegate_has_invoker((Il2CppDelegate*)__this))
			{
				if (il2cpp_codegen_method_is_generic_instance(targetMethod))
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						GenericInterfaceActionInvoker3< int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  >::Invoke(targetMethod, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
					else
						GenericVirtActionInvoker3< int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  >::Invoke(targetMethod, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
				}
				else
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						InterfaceActionInvoker3< int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), il2cpp_codegen_method_get_declaring_type(targetMethod), ___fromAction0, ___fromSource1, ___axis2, ___delta3);
					else
						VirtActionInvoker3< int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), ___fromAction0, ___fromSource1, ___axis2, ___delta3);
				}
			}
			else
			{
				if (targetThis == NULL && il2cpp_codegen_class_is_value_type(il2cpp_codegen_method_get_declaring_type(targetMethod)))
				{
					typedef void (*FunctionPointerType) (RuntimeObject*, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)((reinterpret_cast<RuntimeObject*>(&___fromSource1) - 1), ___axis2, ___delta3, targetMethod);
				}
				typedef void (*FunctionPointerType) (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
			}
		}
		else
		{
			// closed
			if (targetThis != NULL && il2cpp_codegen_method_is_virtual(targetMethod) && !il2cpp_codegen_object_is_of_sealed_type(targetThis) && il2cpp_codegen_delegate_has_invoker((Il2CppDelegate*)__this))
			{
				if (il2cpp_codegen_method_is_generic_instance(targetMethod))
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						GenericInterfaceActionInvoker4< SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  >::Invoke(targetMethod, targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
					else
						GenericVirtActionInvoker4< SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  >::Invoke(targetMethod, targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
				}
				else
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						InterfaceActionInvoker4< SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), il2cpp_codegen_method_get_declaring_type(targetMethod), targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
					else
						VirtActionInvoker4< SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
				}
			}
			else
			{
				if (targetThis == NULL && il2cpp_codegen_class_is_value_type(il2cpp_codegen_method_get_declaring_type(targetMethod)))
				{
					typedef void (*FunctionPointerType) (RuntimeObject*, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)((reinterpret_cast<RuntimeObject*>(___fromAction0) - 1), ___fromSource1, ___axis2, ___delta3, targetMethod);
				}
				if (targetThis == NULL)
				{
					typedef void (*FunctionPointerType) (SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)(___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
				}
				else
				{
					typedef void (*FunctionPointerType) (void*, SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *, int32_t, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , Vector2_tA85D2DD88578276CA8A8796756458277E72D073D , const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)(targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
				}
			}
		}
	}
}
// System.IAsyncResult Valve.VR.SteamVR_Action_Vector2_UpdateHandler::BeginInvoke(Valve.VR.SteamVR_Action_Vector2,Valve.VR.SteamVR_Input_Sources,UnityEngine.Vector2,UnityEngine.Vector2,System.AsyncCallback,System.Object)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RuntimeObject* UpdateHandler_BeginInvoke_m3BD5916ADDFFADD04B76A00FA7F8A73235AB5598 (UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * __this, SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * ___fromAction0, int32_t ___fromSource1, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___axis2, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___delta3, AsyncCallback_t3F3DA3BEDAEE81DD1D24125DF8EB30E85EE14DA4 * ___callback4, RuntimeObject * ___object5, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (UpdateHandler_BeginInvoke_m3BD5916ADDFFADD04B76A00FA7F8A73235AB5598_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	void *__d_args[5] = {0};
	__d_args[0] = ___fromAction0;
	__d_args[1] = Box(SteamVR_Input_Sources_tCE41AA589FB3B9516BDE0DFABDCB4AAEA29528F7_il2cpp_TypeInfo_var, &___fromSource1);
	__d_args[2] = Box(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_il2cpp_TypeInfo_var, &___axis2);
	__d_args[3] = Box(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_il2cpp_TypeInfo_var, &___delta3);
	return (RuntimeObject*)il2cpp_codegen_delegate_begin_invoke((RuntimeDelegate*)__this, __d_args, (RuntimeDelegate*)___callback4, (RuntimeObject*)___object5);
}
// System.Void Valve.VR.SteamVR_Action_Vector2_UpdateHandler::EndInvoke(System.IAsyncResult)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void UpdateHandler_EndInvoke_mDDE7EDA6A51DE198136D8F8C7B72AAE1B07C8E8F (UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * __this, RuntimeObject* ___result0, const RuntimeMethod* method)
{
	il2cpp_codegen_delegate_end_invoke((Il2CppAsyncResult*) ___result0, 0);
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::add_onAxis(Valve.VR.SteamVR_Action_Vector2_AxisHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_add_onAxis_m61879208AE0900224DF6DAC2B5F9AB437F3E3F65 (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_add_onAxis_m61879208AE0900224DF6DAC2B5F9AB437F3E3F65_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * V_0 = NULL;
	AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * V_1 = NULL;
	AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_add_onAxis_m61879208AE0900224DF6DAC2B5F9AB437F3E3F65_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * L_0 = __this->get_onAxis_12();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * L_1 = V_0;
		V_1 = L_1;
		AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * L_2 = V_1;
		AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Combine_mC25D2F7DECAFBA6D9A2F9EBA8A77063F0658ECF1(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 *)CastclassSealed((RuntimeObject*)L_4, AxisHandler_t97FB692AF5465040A2929AB663941933E3567689_il2cpp_TypeInfo_var));
		AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 ** L_5 = __this->get_address_of_onAxis_12();
		AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * L_6 = V_2;
		AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * L_7 = V_1;
		AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * L_8 = InterlockedCompareExchangeImpl<AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 *>((AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 **)L_5, L_6, L_7);
		V_0 = L_8;
		AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * L_9 = V_0;
		AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * L_10 = V_1;
		if ((!(((RuntimeObject*)(AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 *)L_9) == ((RuntimeObject*)(AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::remove_onAxis(Valve.VR.SteamVR_Action_Vector2_AxisHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_remove_onAxis_mF3D7E276BA4A72809424D8F02B91BC600C706A45 (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_remove_onAxis_mF3D7E276BA4A72809424D8F02B91BC600C706A45_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * V_0 = NULL;
	AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * V_1 = NULL;
	AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_remove_onAxis_mF3D7E276BA4A72809424D8F02B91BC600C706A45_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * L_0 = __this->get_onAxis_12();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * L_1 = V_0;
		V_1 = L_1;
		AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * L_2 = V_1;
		AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Remove_m0B0DB7D1B3AF96B71AFAA72BA0EFE32FBBC2932D(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 *)CastclassSealed((RuntimeObject*)L_4, AxisHandler_t97FB692AF5465040A2929AB663941933E3567689_il2cpp_TypeInfo_var));
		AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 ** L_5 = __this->get_address_of_onAxis_12();
		AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * L_6 = V_2;
		AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * L_7 = V_1;
		AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * L_8 = InterlockedCompareExchangeImpl<AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 *>((AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 **)L_5, L_6, L_7);
		V_0 = L_8;
		AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * L_9 = V_0;
		AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * L_10 = V_1;
		if ((!(((RuntimeObject*)(AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 *)L_9) == ((RuntimeObject*)(AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::add_onActiveChange(Valve.VR.SteamVR_Action_Vector2_ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_add_onActiveChange_m748D7DF506E999E43D76725669A423DC02CAC2A2 (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_add_onActiveChange_m748D7DF506E999E43D76725669A423DC02CAC2A2_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * V_0 = NULL;
	ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * V_1 = NULL;
	ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_add_onActiveChange_m748D7DF506E999E43D76725669A423DC02CAC2A2_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_0 = __this->get_onActiveChange_13();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_1 = V_0;
		V_1 = L_1;
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_2 = V_1;
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Combine_mC25D2F7DECAFBA6D9A2F9EBA8A77063F0658ECF1(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 *)CastclassSealed((RuntimeObject*)L_4, ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2_il2cpp_TypeInfo_var));
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 ** L_5 = __this->get_address_of_onActiveChange_13();
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_6 = V_2;
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_7 = V_1;
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_8 = InterlockedCompareExchangeImpl<ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 *>((ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 **)L_5, L_6, L_7);
		V_0 = L_8;
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_9 = V_0;
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_10 = V_1;
		if ((!(((RuntimeObject*)(ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 *)L_9) == ((RuntimeObject*)(ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::remove_onActiveChange(Valve.VR.SteamVR_Action_Vector2_ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_remove_onActiveChange_mF774E29E5C6AB17CE4351C8533279C2F1685F5A5 (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_remove_onActiveChange_mF774E29E5C6AB17CE4351C8533279C2F1685F5A5_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * V_0 = NULL;
	ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * V_1 = NULL;
	ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_remove_onActiveChange_mF774E29E5C6AB17CE4351C8533279C2F1685F5A5_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_0 = __this->get_onActiveChange_13();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_1 = V_0;
		V_1 = L_1;
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_2 = V_1;
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Remove_m0B0DB7D1B3AF96B71AFAA72BA0EFE32FBBC2932D(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 *)CastclassSealed((RuntimeObject*)L_4, ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2_il2cpp_TypeInfo_var));
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 ** L_5 = __this->get_address_of_onActiveChange_13();
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_6 = V_2;
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_7 = V_1;
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_8 = InterlockedCompareExchangeImpl<ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 *>((ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 **)L_5, L_6, L_7);
		V_0 = L_8;
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_9 = V_0;
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_10 = V_1;
		if ((!(((RuntimeObject*)(ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 *)L_9) == ((RuntimeObject*)(ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::add_onActiveBindingChange(Valve.VR.SteamVR_Action_Vector2_ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_add_onActiveBindingChange_m10B03BA452F43087BBBB922DD51EF10CAE15D6BC (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_add_onActiveBindingChange_m10B03BA452F43087BBBB922DD51EF10CAE15D6BC_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * V_0 = NULL;
	ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * V_1 = NULL;
	ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_add_onActiveBindingChange_m10B03BA452F43087BBBB922DD51EF10CAE15D6BC_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_0 = __this->get_onActiveBindingChange_14();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_1 = V_0;
		V_1 = L_1;
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_2 = V_1;
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Combine_mC25D2F7DECAFBA6D9A2F9EBA8A77063F0658ECF1(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 *)CastclassSealed((RuntimeObject*)L_4, ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2_il2cpp_TypeInfo_var));
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 ** L_5 = __this->get_address_of_onActiveBindingChange_14();
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_6 = V_2;
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_7 = V_1;
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_8 = InterlockedCompareExchangeImpl<ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 *>((ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 **)L_5, L_6, L_7);
		V_0 = L_8;
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_9 = V_0;
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_10 = V_1;
		if ((!(((RuntimeObject*)(ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 *)L_9) == ((RuntimeObject*)(ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::remove_onActiveBindingChange(Valve.VR.SteamVR_Action_Vector2_ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_remove_onActiveBindingChange_m3A62BA01D3F897E4C7115DF360F9DE899A66EB12 (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_remove_onActiveBindingChange_m3A62BA01D3F897E4C7115DF360F9DE899A66EB12_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * V_0 = NULL;
	ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * V_1 = NULL;
	ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_remove_onActiveBindingChange_m3A62BA01D3F897E4C7115DF360F9DE899A66EB12_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_0 = __this->get_onActiveBindingChange_14();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_1 = V_0;
		V_1 = L_1;
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_2 = V_1;
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Remove_m0B0DB7D1B3AF96B71AFAA72BA0EFE32FBBC2932D(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 *)CastclassSealed((RuntimeObject*)L_4, ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2_il2cpp_TypeInfo_var));
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 ** L_5 = __this->get_address_of_onActiveBindingChange_14();
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_6 = V_2;
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_7 = V_1;
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_8 = InterlockedCompareExchangeImpl<ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 *>((ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 **)L_5, L_6, L_7);
		V_0 = L_8;
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_9 = V_0;
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_10 = V_1;
		if ((!(((RuntimeObject*)(ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 *)L_9) == ((RuntimeObject*)(ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::add_onChange(Valve.VR.SteamVR_Action_Vector2_ChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_add_onChange_m0E890E6CFC54755D7CA6271AACB94F0D16195BFC (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_add_onChange_m0E890E6CFC54755D7CA6271AACB94F0D16195BFC_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * V_0 = NULL;
	ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * V_1 = NULL;
	ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_add_onChange_m0E890E6CFC54755D7CA6271AACB94F0D16195BFC_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * L_0 = __this->get_onChange_15();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * L_1 = V_0;
		V_1 = L_1;
		ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * L_2 = V_1;
		ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Combine_mC25D2F7DECAFBA6D9A2F9EBA8A77063F0658ECF1(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 *)CastclassSealed((RuntimeObject*)L_4, ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6_il2cpp_TypeInfo_var));
		ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 ** L_5 = __this->get_address_of_onChange_15();
		ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * L_6 = V_2;
		ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * L_7 = V_1;
		ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * L_8 = InterlockedCompareExchangeImpl<ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 *>((ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 **)L_5, L_6, L_7);
		V_0 = L_8;
		ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * L_9 = V_0;
		ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * L_10 = V_1;
		if ((!(((RuntimeObject*)(ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 *)L_9) == ((RuntimeObject*)(ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::remove_onChange(Valve.VR.SteamVR_Action_Vector2_ChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_remove_onChange_m6B9FFEDD2003E99E2C81E03B744E35528BCABEE1 (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_remove_onChange_m6B9FFEDD2003E99E2C81E03B744E35528BCABEE1_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * V_0 = NULL;
	ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * V_1 = NULL;
	ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_remove_onChange_m6B9FFEDD2003E99E2C81E03B744E35528BCABEE1_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * L_0 = __this->get_onChange_15();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * L_1 = V_0;
		V_1 = L_1;
		ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * L_2 = V_1;
		ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Remove_m0B0DB7D1B3AF96B71AFAA72BA0EFE32FBBC2932D(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 *)CastclassSealed((RuntimeObject*)L_4, ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6_il2cpp_TypeInfo_var));
		ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 ** L_5 = __this->get_address_of_onChange_15();
		ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * L_6 = V_2;
		ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * L_7 = V_1;
		ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * L_8 = InterlockedCompareExchangeImpl<ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 *>((ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 **)L_5, L_6, L_7);
		V_0 = L_8;
		ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * L_9 = V_0;
		ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * L_10 = V_1;
		if ((!(((RuntimeObject*)(ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 *)L_9) == ((RuntimeObject*)(ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::add_onUpdate(Valve.VR.SteamVR_Action_Vector2_UpdateHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_add_onUpdate_mF42BBDFA8EFE2D15571BE512017F7D2C8A016345 (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_add_onUpdate_mF42BBDFA8EFE2D15571BE512017F7D2C8A016345_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * V_0 = NULL;
	UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * V_1 = NULL;
	UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_add_onUpdate_mF42BBDFA8EFE2D15571BE512017F7D2C8A016345_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * L_0 = __this->get_onUpdate_16();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * L_1 = V_0;
		V_1 = L_1;
		UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * L_2 = V_1;
		UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Combine_mC25D2F7DECAFBA6D9A2F9EBA8A77063F0658ECF1(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 *)CastclassSealed((RuntimeObject*)L_4, UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177_il2cpp_TypeInfo_var));
		UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 ** L_5 = __this->get_address_of_onUpdate_16();
		UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * L_6 = V_2;
		UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * L_7 = V_1;
		UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * L_8 = InterlockedCompareExchangeImpl<UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 *>((UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 **)L_5, L_6, L_7);
		V_0 = L_8;
		UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * L_9 = V_0;
		UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * L_10 = V_1;
		if ((!(((RuntimeObject*)(UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 *)L_9) == ((RuntimeObject*)(UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::remove_onUpdate(Valve.VR.SteamVR_Action_Vector2_UpdateHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_remove_onUpdate_m7FA21E9B212C4E869AFE43AAE5D3138799CA8320 (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_remove_onUpdate_m7FA21E9B212C4E869AFE43AAE5D3138799CA8320_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * V_0 = NULL;
	UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * V_1 = NULL;
	UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_remove_onUpdate_m7FA21E9B212C4E869AFE43AAE5D3138799CA8320_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * L_0 = __this->get_onUpdate_16();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * L_1 = V_0;
		V_1 = L_1;
		UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * L_2 = V_1;
		UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Remove_m0B0DB7D1B3AF96B71AFAA72BA0EFE32FBBC2932D(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 *)CastclassSealed((RuntimeObject*)L_4, UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177_il2cpp_TypeInfo_var));
		UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 ** L_5 = __this->get_address_of_onUpdate_16();
		UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * L_6 = V_2;
		UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * L_7 = V_1;
		UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * L_8 = InterlockedCompareExchangeImpl<UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 *>((UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 **)L_5, L_6, L_7);
		V_0 = L_8;
		UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * L_9 = V_0;
		UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * L_10 = V_1;
		if ((!(((RuntimeObject*)(UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 *)L_9) == ((RuntimeObject*)(UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// UnityEngine.Vector2 Valve.VR.SteamVR_Action_Vector2_Source::get_axis()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  SteamVR_Action_Vector2_Source_get_axis_mCEB6E517ED0E10BE513D22B23A69F1BE3D5DA2BA (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_get_axis_mCEB6E517ED0E10BE513D22B23A69F1BE3D5DA2BA_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_get_axis_mCEB6E517ED0E10BE513D22B23A69F1BE3D5DA2BA_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8191));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8192));
	{
		// public Vector2 axis { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8193));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_0 = __this->get_U3CaxisU3Ek__BackingField_17();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::set_axis(UnityEngine.Vector2)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_set_axis_m2252BBEBC8C6D4A676ABF0EE270D181EBFB823BB (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_set_axis_m2252BBEBC8C6D4A676ABF0EE270D181EBFB823BB_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_set_axis_m2252BBEBC8C6D4A676ABF0EE270D181EBFB823BB_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8194));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8195));
	{
		// public Vector2 axis { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8196));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_0 = ___value0;
		__this->set_U3CaxisU3Ek__BackingField_17(L_0);
		return;
	}
}
// UnityEngine.Vector2 Valve.VR.SteamVR_Action_Vector2_Source::get_lastAxis()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  SteamVR_Action_Vector2_Source_get_lastAxis_mD0A1188D33FAD9AAB16CBCC0C073796C76616460 (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_get_lastAxis_mD0A1188D33FAD9AAB16CBCC0C073796C76616460_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_get_lastAxis_mD0A1188D33FAD9AAB16CBCC0C073796C76616460_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8197));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8198));
	{
		// public Vector2 lastAxis { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8199));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_0 = __this->get_U3ClastAxisU3Ek__BackingField_18();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::set_lastAxis(UnityEngine.Vector2)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_set_lastAxis_m77FAC4A378FA78CC827A871984258A60FA83CAE2 (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_set_lastAxis_m77FAC4A378FA78CC827A871984258A60FA83CAE2_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_set_lastAxis_m77FAC4A378FA78CC827A871984258A60FA83CAE2_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8200));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8201));
	{
		// public Vector2 lastAxis { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8202));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_0 = ___value0;
		__this->set_U3ClastAxisU3Ek__BackingField_18(L_0);
		return;
	}
}
// UnityEngine.Vector2 Valve.VR.SteamVR_Action_Vector2_Source::get_delta()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  SteamVR_Action_Vector2_Source_get_delta_m19CFFF4B8014BD4ED43D0C5EDDD909A2F1DF1908 (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_get_delta_m19CFFF4B8014BD4ED43D0C5EDDD909A2F1DF1908_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_get_delta_m19CFFF4B8014BD4ED43D0C5EDDD909A2F1DF1908_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8203));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8204));
	{
		// public Vector2 delta { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8205));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_0 = __this->get_U3CdeltaU3Ek__BackingField_19();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::set_delta(UnityEngine.Vector2)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_set_delta_m8D0A6407047BB76299057CF382CD612137A600F3 (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_set_delta_m8D0A6407047BB76299057CF382CD612137A600F3_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_set_delta_m8D0A6407047BB76299057CF382CD612137A600F3_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8206));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8207));
	{
		// public Vector2 delta { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8208));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_0 = ___value0;
		__this->set_U3CdeltaU3Ek__BackingField_19(L_0);
		return;
	}
}
// UnityEngine.Vector2 Valve.VR.SteamVR_Action_Vector2_Source::get_lastDelta()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  SteamVR_Action_Vector2_Source_get_lastDelta_mE21D07B848010D30A36B3C7338B5B615B81598AC (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_get_lastDelta_mE21D07B848010D30A36B3C7338B5B615B81598AC_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_get_lastDelta_mE21D07B848010D30A36B3C7338B5B615B81598AC_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8209));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8210));
	{
		// public Vector2 lastDelta { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8211));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_0 = __this->get_U3ClastDeltaU3Ek__BackingField_20();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::set_lastDelta(UnityEngine.Vector2)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_set_lastDelta_m1943C66837BE7929D58A91A9DFBAB4BBC2A1DB12 (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_set_lastDelta_m1943C66837BE7929D58A91A9DFBAB4BBC2A1DB12_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_set_lastDelta_m1943C66837BE7929D58A91A9DFBAB4BBC2A1DB12_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8212));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8213));
	{
		// public Vector2 lastDelta { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8214));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_0 = ___value0;
		__this->set_U3ClastDeltaU3Ek__BackingField_20(L_0);
		return;
	}
}
// System.Boolean Valve.VR.SteamVR_Action_Vector2_Source::get_changed()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Vector2_Source_get_changed_m78ACD6A0F63B602F52D431CFA6093B4EE0FA3B0A (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_get_changed_m78ACD6A0F63B602F52D431CFA6093B4EE0FA3B0A_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_get_changed_m78ACD6A0F63B602F52D431CFA6093B4EE0FA3B0A_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8215));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8216));
	{
		// public override bool changed { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8217));
		bool L_0 = __this->get_U3CchangedU3Ek__BackingField_21();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::set_changed(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_set_changed_mE5FBDB2D619AB5C4B9CC1A64408431E1106B4038 (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, bool ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_set_changed_mE5FBDB2D619AB5C4B9CC1A64408431E1106B4038_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_set_changed_mE5FBDB2D619AB5C4B9CC1A64408431E1106B4038_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8218));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8219));
	{
		// public override bool changed { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8220));
		bool L_0 = ___value0;
		__this->set_U3CchangedU3Ek__BackingField_21(L_0);
		return;
	}
}
// System.Boolean Valve.VR.SteamVR_Action_Vector2_Source::get_lastChanged()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Vector2_Source_get_lastChanged_mC48C1CC704E7C5C348F9BFBAE9682E718FD6FC9D (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_get_lastChanged_mC48C1CC704E7C5C348F9BFBAE9682E718FD6FC9D_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_get_lastChanged_mC48C1CC704E7C5C348F9BFBAE9682E718FD6FC9D_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8221));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8222));
	{
		// public override bool lastChanged { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8223));
		bool L_0 = __this->get_U3ClastChangedU3Ek__BackingField_22();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::set_lastChanged(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_set_lastChanged_m417B2C89134DA1E9C1149EBBD128AF65524D26A2 (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, bool ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_set_lastChanged_m417B2C89134DA1E9C1149EBBD128AF65524D26A2_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_set_lastChanged_m417B2C89134DA1E9C1149EBBD128AF65524D26A2_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8224));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8225));
	{
		// public override bool lastChanged { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8226));
		bool L_0 = ___value0;
		__this->set_U3ClastChangedU3Ek__BackingField_22(L_0);
		return;
	}
}
// System.UInt64 Valve.VR.SteamVR_Action_Vector2_Source::get_activeOrigin()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR uint64_t SteamVR_Action_Vector2_Source_get_activeOrigin_m0E2FC733B091514548A7F3D8E78FF62472C11E6C (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_get_activeOrigin_m0E2FC733B091514548A7F3D8E78FF62472C11E6C_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	uint64_t V_1 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_get_activeOrigin_m0E2FC733B091514548A7F3D8E78FF62472C11E6C_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8227));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8228));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8229));
		// if (active)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8230));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8235));
		bool L_0 = VirtFuncInvoker0< bool >::Invoke(12 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_active() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8235));
		V_0 = L_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8231));
		bool L_1 = V_0;
		if (!L_1)
		{
			goto IL_0019;
		}
	}
	{
		// return actionData.activeOrigin;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8232));
		InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * L_2 = __this->get_address_of_actionData_24();
		uint64_t L_3 = L_2->get_activeOrigin_1();
		V_1 = L_3;
		goto IL_001e;
	}

IL_0019:
	{
		// return 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8233));
		V_1 = (((int64_t)((int64_t)0)));
		goto IL_001e;
	}

IL_001e:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8234));
		uint64_t L_4 = V_1;
		return L_4;
	}
}
// System.UInt64 Valve.VR.SteamVR_Action_Vector2_Source::get_lastActiveOrigin()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR uint64_t SteamVR_Action_Vector2_Source_get_lastActiveOrigin_mFD35F8515EB518EACBF6F731B72EC5533DA95C89 (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_get_lastActiveOrigin_mFD35F8515EB518EACBF6F731B72EC5533DA95C89_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	uint64_t V_0 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_get_lastActiveOrigin_mFD35F8515EB518EACBF6F731B72EC5533DA95C89_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8236));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8237));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8238));
		// public override ulong lastActiveOrigin { get { return lastActionData.activeOrigin; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8239));
		InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * L_0 = __this->get_address_of_lastActionData_25();
		uint64_t L_1 = L_0->get_activeOrigin_1();
		V_0 = L_1;
		goto IL_000f;
	}

IL_000f:
	{
		// public override ulong lastActiveOrigin { get { return lastActionData.activeOrigin; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8240));
		uint64_t L_2 = V_0;
		return L_2;
	}
}
// System.Boolean Valve.VR.SteamVR_Action_Vector2_Source::get_active()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Vector2_Source_get_active_m4491F9814CD04DF2F202D91A08C59209B09A38CF (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_get_active_m4491F9814CD04DF2F202D91A08C59209B09A38CF_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_get_active_m4491F9814CD04DF2F202D91A08C59209B09A38CF_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8241));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8242));
	int32_t G_B3_0 = 0;
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8243));
		// public override bool active { get { return activeBinding && action.actionSet.IsActive(inputSource); } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8244));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8246));
		bool L_0 = VirtFuncInvoker0< bool >::Invoke(13 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_activeBinding() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8246));
		if (!L_0)
		{
			goto IL_0021;
		}
	}
	{
		SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 * L_1 = ((SteamVR_Action_Source_t9D7428CDE39924074518EE6233D9A4FAB0C33CB0 *)__this)->get_action_2();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8247));
		NullCheck(L_1);
		SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6 * L_2 = VirtFuncInvoker0< SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6 * >::Invoke(19 /* Valve.VR.SteamVR_ActionSet Valve.VR.SteamVR_Action::get_actionSet() */, L_1);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8247));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8248));
		int32_t L_3 = SteamVR_Action_Source_get_inputSource_mAA1928183BB06E5C8CF950F65BA80635C25535D4_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8248));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8249));
		NullCheck(L_2);
		bool L_4 = SteamVR_ActionSet_IsActive_m9909588615E0191F96E971182B8A52F864F39BEB(L_2, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8249));
		G_B3_0 = ((int32_t)(L_4));
		goto IL_0022;
	}

IL_0021:
	{
		G_B3_0 = 0;
	}

IL_0022:
	{
		V_0 = (bool)G_B3_0;
		goto IL_0025;
	}

IL_0025:
	{
		// public override bool active { get { return activeBinding && action.actionSet.IsActive(inputSource); } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8245));
		bool L_5 = V_0;
		return L_5;
	}
}
// System.Boolean Valve.VR.SteamVR_Action_Vector2_Source::get_activeBinding()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Vector2_Source_get_activeBinding_mD4FD9C47EE8A52843595ED902EC5D3D9583FA283 (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_get_activeBinding_mD4FD9C47EE8A52843595ED902EC5D3D9583FA283_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_get_activeBinding_mD4FD9C47EE8A52843595ED902EC5D3D9583FA283_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8250));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8251));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8252));
		// public override bool activeBinding { get { return actionData.bActive; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8253));
		InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * L_0 = __this->get_address_of_actionData_24();
		bool L_1 = L_0->get_bActive_0();
		V_0 = L_1;
		goto IL_000f;
	}

IL_000f:
	{
		// public override bool activeBinding { get { return actionData.bActive; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8254));
		bool L_2 = V_0;
		return L_2;
	}
}
// System.Boolean Valve.VR.SteamVR_Action_Vector2_Source::get_lastActive()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Vector2_Source_get_lastActive_mC0586915CE1150717F2F3B3814D5883D00FF5B1A (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_get_lastActive_mC0586915CE1150717F2F3B3814D5883D00FF5B1A_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_get_lastActive_mC0586915CE1150717F2F3B3814D5883D00FF5B1A_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8255));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8256));
	{
		// public override bool lastActive { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8257));
		bool L_0 = __this->get_U3ClastActiveU3Ek__BackingField_23();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::set_lastActive(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_set_lastActive_mCB20AD139EB2094C54801EF5EC66E2D76E533E67 (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, bool ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_set_lastActive_mCB20AD139EB2094C54801EF5EC66E2D76E533E67_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_set_lastActive_mCB20AD139EB2094C54801EF5EC66E2D76E533E67_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8258));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8259));
	{
		// public override bool lastActive { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8260));
		bool L_0 = ___value0;
		__this->set_U3ClastActiveU3Ek__BackingField_23(L_0);
		return;
	}
}
// System.Boolean Valve.VR.SteamVR_Action_Vector2_Source::get_lastActiveBinding()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Vector2_Source_get_lastActiveBinding_mF7419A1586A8E1F8199D3BF5778F7FE13DF2D0CE (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_get_lastActiveBinding_mF7419A1586A8E1F8199D3BF5778F7FE13DF2D0CE_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_get_lastActiveBinding_mF7419A1586A8E1F8199D3BF5778F7FE13DF2D0CE_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8261));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8262));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8263));
		// public override bool lastActiveBinding { get { return lastActionData.bActive; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8264));
		InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * L_0 = __this->get_address_of_lastActionData_25();
		bool L_1 = L_0->get_bActive_0();
		V_0 = L_1;
		goto IL_000f;
	}

IL_000f:
	{
		// public override bool lastActiveBinding { get { return lastActionData.bActive; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8265));
		bool L_2 = V_0;
		return L_2;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::Preinitialize(Valve.VR.SteamVR_Action,Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_Preinitialize_mD54D144D5346D31B95218D570EFF9EC692818236 (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 * ___wrappingAction0, int32_t ___forInputSource1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_Preinitialize_mD54D144D5346D31B95218D570EFF9EC692818236_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___wrappingAction0), (&___forInputSource1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_Preinitialize_mD54D144D5346D31B95218D570EFF9EC692818236_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8266));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8267));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8268));
		// base.Preinitialize(wrappingAction, forInputSource);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8269));
		SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 * L_0 = ___wrappingAction0;
		int32_t L_1 = ___forInputSource1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8272));
		SteamVR_Action_Source_Preinitialize_mD54CBA24E4881B8742430B3EDF16283316305913(__this, L_0, L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8272));
		// vector2Action = (SteamVR_Action_Vector2)wrappingAction;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8270));
		SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 * L_2 = ___wrappingAction0;
		__this->set_vector2Action_26(((SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 *)CastclassClass((RuntimeObject*)L_2, SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37_il2cpp_TypeInfo_var)));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8271));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::Initialize()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_Initialize_mEA3978343DC5DDA279610886729C005BA2807088 (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_Initialize_mEA3978343DC5DDA279610886729C005BA2807088_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_Initialize_mEA3978343DC5DDA279610886729C005BA2807088_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8273));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8274));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8275));
		// base.Initialize();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8276));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8281));
		SteamVR_Action_In_Source_Initialize_m8CC254F78B69011CCE42C3E64A38B481FEC5F795(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8281));
		// if (actionData_size == 0)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8277));
		IL2CPP_RUNTIME_CLASS_INIT(SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1_il2cpp_TypeInfo_var);
		uint32_t L_0 = ((SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1_StaticFields*)il2cpp_codegen_static_fields_for(SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1_il2cpp_TypeInfo_var))->get_actionData_size_10();
		V_0 = (bool)((((int32_t)L_0) == ((int32_t)0))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8278));
		bool L_1 = V_0;
		if (!L_1)
		{
			goto IL_0028;
		}
	}
	{
		// actionData_size = (uint)Marshal.SizeOf(typeof(InputAnalogActionData_t));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8279));
		RuntimeTypeHandle_t7B542280A22F0EC4EAC2061C29178845847A8B2D  L_2 = { reinterpret_cast<intptr_t> (InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C_0_0_0_var) };
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8282));
		IL2CPP_RUNTIME_CLASS_INIT(Type_t_il2cpp_TypeInfo_var);
		Type_t * L_3 = Type_GetTypeFromHandle_m9DC58ADF0512987012A8A016FB64B068F3B1AFF6(L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8282));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8283));
		IL2CPP_RUNTIME_CLASS_INIT(Marshal_tC795CE9CC2FFBA41EDB1AC1C0FEC04607DFA8A40_il2cpp_TypeInfo_var);
		int32_t L_4 = Marshal_SizeOf_m4F7DA827FA7A720395E6FDD2ABE78D4B00D43130(L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8283));
		IL2CPP_RUNTIME_CLASS_INIT(SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1_il2cpp_TypeInfo_var);
		((SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1_StaticFields*)il2cpp_codegen_static_fields_for(SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1_il2cpp_TypeInfo_var))->set_actionData_size_10(L_4);
	}

IL_0028:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8280));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::UpdateValue()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_UpdateValue_m46FD9956F29672FF3594957130165B620D3EFD21 (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_UpdateValue_m46FD9956F29672FF3594957130165B620D3EFD21_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	bool V_1 = false;
	uint64_t V_2 = 0;
	bool V_3 = false;
	bool V_4 = false;
	Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  V_5;
	memset((&V_5), 0, sizeof(V_5));
	bool V_6 = false;
	bool V_7 = false;
	bool V_8 = false;
	bool V_9 = false;
	bool V_10 = false;
	bool V_11 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_UpdateValue_m46FD9956F29672FF3594957130165B620D3EFD21_RuntimeMethod_var, methodExecutionContextThis, NULL, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8284));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8285));
	int32_t G_B17_0 = 0;
	int32_t G_B22_0 = 0;
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8286));
		// lastActionData = actionData;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8287));
		InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C  L_0 = __this->get_actionData_24();
		__this->set_lastActionData_25(L_0);
		// lastActive = active;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8288));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8331));
		bool L_1 = VirtFuncInvoker0< bool >::Invoke(12 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_active() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8331));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8332));
		VirtActionInvoker1< bool >::Invoke(15 /* System.Void Valve.VR.SteamVR_Action_Source::set_lastActive(System.Boolean) */, __this, L_1);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8332));
		// lastAxis = axis;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8289));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8333));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_2 = SteamVR_Action_Vector2_Source_get_axis_mCEB6E517ED0E10BE513D22B23A69F1BE3D5DA2BA_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8333));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8334));
		SteamVR_Action_Vector2_Source_set_lastAxis_m77FAC4A378FA78CC827A871984258A60FA83CAE2_inline(__this, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8334));
		// lastDelta = delta;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8290));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8335));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_3 = SteamVR_Action_Vector2_Source_get_delta_m19CFFF4B8014BD4ED43D0C5EDDD909A2F1DF1908_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8335));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8336));
		SteamVR_Action_Vector2_Source_set_lastDelta_m1943C66837BE7929D58A91A9DFBAB4BBC2A1DB12_inline(__this, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8336));
		// EVRInputError err = OpenVR.Input.GetAnalogActionData(handle, ref actionData, actionData_size, SteamVR_Input_Source.GetHandle(inputSource));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8291));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8337));
		IL2CPP_RUNTIME_CLASS_INIT(OpenVR_tE75A98955EC4AA4B219CE822AA43E79E4CB99DB3_il2cpp_TypeInfo_var);
		CVRInput_t2BE4417A3C1EA0C6CF647B0706BF37F886CE599B * L_4 = OpenVR_get_Input_m904FD790D785E944EE58513F589E862530386414(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8337));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8338));
		uint64_t L_5 = SteamVR_Action_Source_get_handle_mE4C63F9ADB5ACA5E72265B62C0908ACF8EF73A01(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8338));
		InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * L_6 = __this->get_address_of_actionData_24();
		IL2CPP_RUNTIME_CLASS_INIT(SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1_il2cpp_TypeInfo_var);
		uint32_t L_7 = ((SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1_StaticFields*)il2cpp_codegen_static_fields_for(SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1_il2cpp_TypeInfo_var))->get_actionData_size_10();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8339));
		int32_t L_8 = SteamVR_Action_Source_get_inputSource_mAA1928183BB06E5C8CF950F65BA80635C25535D4_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8339));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8340));
		IL2CPP_RUNTIME_CLASS_INIT(SteamVR_Input_Source_tAFDB40851F8E134E08DD2DD0BC1C1770705E81D0_il2cpp_TypeInfo_var);
		uint64_t L_9 = SteamVR_Input_Source_GetHandle_mEA0F6E33E3CB937C11859B35CDB283523240E185(L_8, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8340));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8341));
		NullCheck(L_4);
		int32_t L_10 = CVRInput_GetAnalogActionData_m363EF49EA0485B0A4FF93C37842AC2CF8D21041A(L_4, L_5, (InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C *)L_6, L_7, L_9, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8341));
		V_0 = L_10;
		// if (err != EVRInputError.None)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8292));
		int32_t L_11 = V_0;
		V_1 = (bool)((!(((uint32_t)L_11) <= ((uint32_t)0)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8293));
		bool L_12 = V_1;
		if (!L_12)
		{
			goto IL_00b6;
		}
	}
	{
		// Debug.LogError("<b>[SteamVR]</b> GetAnalogActionData error (" + fullPath + "): " + err.ToString() + " handle: " + handle.ToString());
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8294));
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_13 = (StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E*)(StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E*)SZArrayNew(StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E_il2cpp_TypeInfo_var, (uint32_t)6);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_14 = L_13;
		NullCheck(L_14);
		ArrayElementTypeCheck (L_14, _stringLiteralAC897ED588F0446677581414C46F231807AB2556);
		(L_14)->SetAt(static_cast<il2cpp_array_size_t>(0), (String_t*)_stringLiteralAC897ED588F0446677581414C46F231807AB2556);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_15 = L_14;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8342));
		String_t* L_16 = SteamVR_Action_Source_get_fullPath_mB0C33E6C1B4F91E908236055FFAE027ECB3ED996(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8342));
		NullCheck(L_15);
		ArrayElementTypeCheck (L_15, L_16);
		(L_15)->SetAt(static_cast<il2cpp_array_size_t>(1), (String_t*)L_16);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_17 = L_15;
		NullCheck(L_17);
		ArrayElementTypeCheck (L_17, _stringLiteralE6D56E05F32996CA7E5AE21BC90D49044C0BF356);
		(L_17)->SetAt(static_cast<il2cpp_array_size_t>(2), (String_t*)_stringLiteralE6D56E05F32996CA7E5AE21BC90D49044C0BF356);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_18 = L_17;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8343));
		RuntimeObject * L_19 = Box(EVRInputError_tC8741BE3044407E8FA26F282526B259D93DBF22F_il2cpp_TypeInfo_var, (&V_0));
		NullCheck(L_19);
		String_t* L_20 = VirtFuncInvoker0< String_t* >::Invoke(3 /* System.String System.Object::ToString() */, L_19);
		V_0 = *(int32_t*)UnBox(L_19);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8343));
		NullCheck(L_18);
		ArrayElementTypeCheck (L_18, L_20);
		(L_18)->SetAt(static_cast<il2cpp_array_size_t>(3), (String_t*)L_20);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_21 = L_18;
		NullCheck(L_21);
		ArrayElementTypeCheck (L_21, _stringLiteral18B39452A606090B97AA8D84240CC83BE3E5D62B);
		(L_21)->SetAt(static_cast<il2cpp_array_size_t>(4), (String_t*)_stringLiteral18B39452A606090B97AA8D84240CC83BE3E5D62B);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_22 = L_21;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8344));
		uint64_t L_23 = SteamVR_Action_Source_get_handle_mE4C63F9ADB5ACA5E72265B62C0908ACF8EF73A01(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8344));
		V_2 = L_23;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8345));
		String_t* L_24 = UInt64_ToString_mF0E40B7459C207B89A1C8C04CE7F183AC0E6D672((uint64_t*)(&V_2), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8345));
		NullCheck(L_22);
		ArrayElementTypeCheck (L_22, L_24);
		(L_22)->SetAt(static_cast<il2cpp_array_size_t>(5), (String_t*)L_24);
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8346));
		String_t* L_25 = String_Concat_m232E857CA5107EA6AC52E7DD7018716C021F237B(L_22, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8346));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8347));
		IL2CPP_RUNTIME_CLASS_INIT(Debug_t7B5FCB117E2FD63B6838BC52821B252E2BFB61C4_il2cpp_TypeInfo_var);
		Debug_LogError_m3BCF9B78263152261565DCA9DB7D55F0C391ED29(L_25, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8347));
	}

IL_00b6:
	{
		// updateTime = Time.realtimeSinceStartup;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8295));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8348));
		float L_26 = Time_get_realtimeSinceStartup_mCA1086EC9DFCF135F77BC46D3B7127711EA3DE03(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8348));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8349));
		SteamVR_Action_In_Source_set_updateTime_mDA27AEC2F90C6036B8E6979F74E68528316D1322_inline(__this, L_26, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8349));
		// axis = new Vector2(actionData.x, actionData.y);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8296));
		InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * L_27 = __this->get_address_of_actionData_24();
		float L_28 = L_27->get_x_2();
		InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * L_29 = __this->get_address_of_actionData_24();
		float L_30 = L_29->get_y_3();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8350));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_31;
		memset((&L_31), 0, sizeof(L_31));
		Vector2__ctor_mEE8FB117AB1F8DB746FB8B3EB4C0DA3BF2A230D0((&L_31), L_28, L_30, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8350));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8351));
		SteamVR_Action_Vector2_Source_set_axis_m2252BBEBC8C6D4A676ABF0EE270D181EBFB823BB_inline(__this, L_31, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8351));
		// delta = new Vector2(actionData.deltaX, actionData.deltaY);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8297));
		InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * L_32 = __this->get_address_of_actionData_24();
		float L_33 = L_32->get_deltaX_5();
		InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * L_34 = __this->get_address_of_actionData_24();
		float L_35 = L_34->get_deltaY_6();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8352));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_36;
		memset((&L_36), 0, sizeof(L_36));
		Vector2__ctor_mEE8FB117AB1F8DB746FB8B3EB4C0DA3BF2A230D0((&L_36), L_33, L_35, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8352));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8353));
		SteamVR_Action_Vector2_Source_set_delta_m8D0A6407047BB76299057CF382CD612137A600F3_inline(__this, L_36, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8353));
		// changed = false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8298));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8354));
		VirtActionInvoker1< bool >::Invoke(32 /* System.Void Valve.VR.SteamVR_Action_In_Source::set_changed(System.Boolean) */, __this, (bool)0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8354));
		// if (active)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8299));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8355));
		bool L_37 = VirtFuncInvoker0< bool >::Invoke(12 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_active() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8355));
		V_3 = L_37;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8300));
		bool L_38 = V_3;
		if (!L_38)
		{
			goto IL_020f;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8301));
		// if (delta.magnitude > changeTolerance)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8302));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8356));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_39 = SteamVR_Action_Vector2_Source_get_delta_m19CFFF4B8014BD4ED43D0C5EDDD909A2F1DF1908_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8356));
		V_5 = L_39;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8357));
		float L_40 = Vector2_get_magnitude_m66097AFDF9696BD3E88467D4398D4F82B8A4C7DF((Vector2_tA85D2DD88578276CA8A8796756458277E72D073D *)(&V_5), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8357));
		float L_41 = __this->get_changeTolerance_11();
		V_4 = (bool)((((float)L_40) > ((float)L_41))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8303));
		bool L_42 = V_4;
		if (!L_42)
		{
			goto IL_018e;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8304));
		// changed = true;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8305));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8358));
		VirtActionInvoker1< bool >::Invoke(32 /* System.Void Valve.VR.SteamVR_Action_In_Source::set_changed(System.Boolean) */, __this, (bool)1);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8358));
		// changedTime = Time.realtimeSinceStartup + actionData.fUpdateTime; //fUpdateTime is the time from the time the action was called that the action changed
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8306));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8359));
		float L_43 = Time_get_realtimeSinceStartup_mCA1086EC9DFCF135F77BC46D3B7127711EA3DE03(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8359));
		InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * L_44 = __this->get_address_of_actionData_24();
		float L_45 = L_44->get_fUpdateTime_8();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8360));
		SteamVR_Action_In_Source_set_changedTime_mD1EE7D0BD28058E1901FF671FB77587F2FCA35DA_inline(__this, ((float)il2cpp_codegen_add((float)L_43, (float)L_45)), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8360));
		// if (onChange != null)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8307));
		ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * L_46 = __this->get_onChange_15();
		V_6 = (bool)((!(((RuntimeObject*)(ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 *)L_46) <= ((RuntimeObject*)(RuntimeObject *)NULL)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8308));
		bool L_47 = V_6;
		if (!L_47)
		{
			goto IL_018d;
		}
	}
	{
		// onChange.Invoke(vector2Action, inputSource, axis, delta);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8309));
		ChangeHandler_t716932883EC2BC15936E355D02A9D68B8F9EA6B6 * L_48 = __this->get_onChange_15();
		SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * L_49 = __this->get_vector2Action_26();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8361));
		int32_t L_50 = SteamVR_Action_Source_get_inputSource_mAA1928183BB06E5C8CF950F65BA80635C25535D4_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8361));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8362));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_51 = SteamVR_Action_Vector2_Source_get_axis_mCEB6E517ED0E10BE513D22B23A69F1BE3D5DA2BA_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8362));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8363));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_52 = SteamVR_Action_Vector2_Source_get_delta_m19CFFF4B8014BD4ED43D0C5EDDD909A2F1DF1908_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8363));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8364));
		NullCheck(L_48);
		ChangeHandler_Invoke_mD9CA3B62E4D42C612CFE1F900C127EB2E178869C(L_48, L_49, L_50, L_51, L_52, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8364));
	}

IL_018d:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8310));
	}

IL_018e:
	{
		// if (axis != Vector2.zero)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8311));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8365));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_53 = SteamVR_Action_Vector2_Source_get_axis_mCEB6E517ED0E10BE513D22B23A69F1BE3D5DA2BA_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8365));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8366));
		IL2CPP_RUNTIME_CLASS_INIT(Vector2_tA85D2DD88578276CA8A8796756458277E72D073D_il2cpp_TypeInfo_var);
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_54 = Vector2_get_zero_mFE0C3213BB698130D6C5247AB4B887A59074D0A8(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8366));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8367));
		bool L_55 = Vector2_op_Inequality_mC16161C640C89D98A00800924F83FF09FD7C100E(L_53, L_54, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8367));
		V_7 = L_55;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8312));
		bool L_56 = V_7;
		if (!L_56)
		{
			goto IL_01d9;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8313));
		// if (onAxis != null)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8314));
		AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * L_57 = __this->get_onAxis_12();
		V_8 = (bool)((!(((RuntimeObject*)(AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 *)L_57) <= ((RuntimeObject*)(RuntimeObject *)NULL)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8315));
		bool L_58 = V_8;
		if (!L_58)
		{
			goto IL_01d8;
		}
	}
	{
		// onAxis.Invoke(vector2Action, inputSource, axis, delta);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8316));
		AxisHandler_t97FB692AF5465040A2929AB663941933E3567689 * L_59 = __this->get_onAxis_12();
		SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * L_60 = __this->get_vector2Action_26();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8368));
		int32_t L_61 = SteamVR_Action_Source_get_inputSource_mAA1928183BB06E5C8CF950F65BA80635C25535D4_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8368));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8369));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_62 = SteamVR_Action_Vector2_Source_get_axis_mCEB6E517ED0E10BE513D22B23A69F1BE3D5DA2BA_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8369));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8370));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_63 = SteamVR_Action_Vector2_Source_get_delta_m19CFFF4B8014BD4ED43D0C5EDDD909A2F1DF1908_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8370));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8371));
		NullCheck(L_59);
		AxisHandler_Invoke_mFB29C3120DB4B338D9465DADD73FD30E158E05AB(L_59, L_60, L_61, L_62, L_63, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8371));
	}

IL_01d8:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8317));
	}

IL_01d9:
	{
		// if (onUpdate != null)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8318));
		UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * L_64 = __this->get_onUpdate_16();
		V_9 = (bool)((!(((RuntimeObject*)(UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 *)L_64) <= ((RuntimeObject*)(RuntimeObject *)NULL)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8319));
		bool L_65 = V_9;
		if (!L_65)
		{
			goto IL_020e;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8320));
		// onUpdate.Invoke(vector2Action, inputSource, axis, delta);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8321));
		UpdateHandler_t5CC79EAAED92D106A0FBE46F2E73949A31CDA177 * L_66 = __this->get_onUpdate_16();
		SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * L_67 = __this->get_vector2Action_26();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8372));
		int32_t L_68 = SteamVR_Action_Source_get_inputSource_mAA1928183BB06E5C8CF950F65BA80635C25535D4_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8372));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8373));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_69 = SteamVR_Action_Vector2_Source_get_axis_mCEB6E517ED0E10BE513D22B23A69F1BE3D5DA2BA_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8373));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8374));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_70 = SteamVR_Action_Vector2_Source_get_delta_m19CFFF4B8014BD4ED43D0C5EDDD909A2F1DF1908_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8374));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8375));
		NullCheck(L_66);
		UpdateHandler_Invoke_mDAB942B37EFE85A16B58B2E6300770D04437F2C1(L_66, L_67, L_68, L_69, L_70, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8375));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8322));
	}

IL_020e:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8323));
	}

IL_020f:
	{
		// if (onActiveBindingChange != null && lastActiveBinding != activeBinding)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8324));
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_71 = __this->get_onActiveBindingChange_14();
		if (!L_71)
		{
			goto IL_022a;
		}
	}
	{
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8376));
		bool L_72 = VirtFuncInvoker0< bool >::Invoke(16 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_lastActiveBinding() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8376));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8377));
		bool L_73 = VirtFuncInvoker0< bool >::Invoke(13 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_activeBinding() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8377));
		G_B17_0 = ((((int32_t)((((int32_t)L_72) == ((int32_t)L_73))? 1 : 0)) == ((int32_t)0))? 1 : 0);
		goto IL_022b;
	}

IL_022a:
	{
		G_B17_0 = 0;
	}

IL_022b:
	{
		V_10 = (bool)G_B17_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8325));
		bool L_74 = V_10;
		if (!L_74)
		{
			goto IL_024f;
		}
	}
	{
		// onActiveBindingChange.Invoke(vector2Action, inputSource, activeBinding);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8326));
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_75 = __this->get_onActiveBindingChange_14();
		SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * L_76 = __this->get_vector2Action_26();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8378));
		int32_t L_77 = SteamVR_Action_Source_get_inputSource_mAA1928183BB06E5C8CF950F65BA80635C25535D4_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8378));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8379));
		bool L_78 = VirtFuncInvoker0< bool >::Invoke(13 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_activeBinding() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8379));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8380));
		NullCheck(L_75);
		ActiveChangeHandler_Invoke_m6F9573537B1F39ADF5C93AA6452D108C664CC943(L_75, L_76, L_77, L_78, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8380));
	}

IL_024f:
	{
		// if (onActiveChange != null && lastActive != active)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8327));
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_79 = __this->get_onActiveChange_13();
		if (!L_79)
		{
			goto IL_026a;
		}
	}
	{
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8381));
		bool L_80 = VirtFuncInvoker0< bool >::Invoke(14 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_lastActive() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8381));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8382));
		bool L_81 = VirtFuncInvoker0< bool >::Invoke(12 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_active() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8382));
		G_B22_0 = ((((int32_t)((((int32_t)L_80) == ((int32_t)L_81))? 1 : 0)) == ((int32_t)0))? 1 : 0);
		goto IL_026b;
	}

IL_026a:
	{
		G_B22_0 = 0;
	}

IL_026b:
	{
		V_11 = (bool)G_B22_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8328));
		bool L_82 = V_11;
		if (!L_82)
		{
			goto IL_028f;
		}
	}
	{
		// onActiveChange.Invoke(vector2Action, inputSource, activeBinding);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8329));
		ActiveChangeHandler_tCEE5E6B19BCE1E2EBFF3082655FDA985DEE14EA2 * L_83 = __this->get_onActiveChange_13();
		SteamVR_Action_Vector2_t759E1B2DC99C6B8FA7B9515ADD17B3A9A9454C37 * L_84 = __this->get_vector2Action_26();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8383));
		int32_t L_85 = SteamVR_Action_Source_get_inputSource_mAA1928183BB06E5C8CF950F65BA80635C25535D4_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8383));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8384));
		bool L_86 = VirtFuncInvoker0< bool >::Invoke(13 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_activeBinding() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8384));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8385));
		NullCheck(L_83);
		ActiveChangeHandler_Invoke_m6F9573537B1F39ADF5C93AA6452D108C664CC943(L_83, L_84, L_85, L_86, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8385));
	}

IL_028f:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8330));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source__ctor_m48D3C09B91B17F520133008F7722E4B4EB26F1EE (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source__ctor_m48D3C09B91B17F520133008F7722E4B4EB26F1EE_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source__ctor_m48D3C09B91B17F520133008F7722E4B4EB26F1EE_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8386));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8387));
	{
		// public float changeTolerance = Mathf.Epsilon;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8388));
		IL2CPP_RUNTIME_CLASS_INIT(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var);
		float L_0 = ((Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_StaticFields*)il2cpp_codegen_static_fields_for(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var))->get_Epsilon_0();
		__this->set_changeTolerance_11(L_0);
		// protected InputAnalogActionData_t actionData = new InputAnalogActionData_t();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8389));
		InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * L_1 = __this->get_address_of_actionData_24();
		il2cpp_codegen_initobj(L_1, sizeof(InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C ));
		// protected InputAnalogActionData_t lastActionData = new InputAnalogActionData_t();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8390));
		InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * L_2 = __this->get_address_of_lastActionData_25();
		il2cpp_codegen_initobj(L_2, sizeof(InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C ));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8391));
		IL2CPP_RUNTIME_CLASS_INIT(SteamVR_Action_In_Source_t6C3FA81DC7F53D302E49E09F5791E612AC7832AB_il2cpp_TypeInfo_var);
		SteamVR_Action_In_Source__ctor_mFF9B46DF32121E562139E277818FB636DCA2A816(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8391));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector2_Source::.cctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source__cctor_m1AFA0EE95F575480A04CE0A300836BDF1BC2067C (const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source__cctor_m1AFA0EE95F575480A04CE0A300836BDF1BC2067C_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source__cctor_m1AFA0EE95F575480A04CE0A300836BDF1BC2067C_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8392));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8393));
	{
		// protected static uint actionData_size = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8394));
		((SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1_StaticFields*)il2cpp_codegen_static_fields_for(SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1_il2cpp_TypeInfo_var))->set_actionData_size_10(0);
		return;
	}
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Void Valve.VR.SteamVR_Action_Vector2_Source_Map::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_Map__ctor_m8779F6CACD1A9A58ECCEE336EEC40FC287CBFE01 (SteamVR_Action_Vector2_Source_Map_tA43BF0AE8C89C3094C8375D1A82AE8676DA218D3 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_Map__ctor_m8779F6CACD1A9A58ECCEE336EEC40FC287CBFE01_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_Map__ctor_m8779F6CACD1A9A58ECCEE336EEC40FC287CBFE01_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		SteamVR_Action_In_Source_Map_1__ctor_m1C7CDFB82FBD6E95D7AF23AB9320BCCD68C5CA92(__this, /*hidden argument*/SteamVR_Action_In_Source_Map_1__ctor_m1C7CDFB82FBD6E95D7AF23AB9320BCCD68C5CA92_RuntimeMethod_var);
		return;
	}
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Void Valve.VR.SteamVR_Action_Vector3::add_onChange(Valve.VR.SteamVR_Action_Vector3_ChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_add_onChange_m99FB29754E2862967F8BD9009CDD8F59B5D112FC (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_add_onChange_m99FB29754E2862967F8BD9009CDD8F59B5D112FC_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_add_onChange_m99FB29754E2862967F8BD9009CDD8F59B5D112FC_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8395));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8396));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8397));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8398));
		SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * L_0 = ((SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8400));
		NullCheck(L_0);
		SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * L_1 = SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8400));
		ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8401));
		NullCheck(L_1);
		SteamVR_Action_Vector3_Source_add_onChange_m69C7AFE22DFEF6EE8205740927730B4793ABC16D(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8401));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8399));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3::remove_onChange(Valve.VR.SteamVR_Action_Vector3_ChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_remove_onChange_mBA3BF7FDF2A7C02DE0DB32629D2CF110A5375206 (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_remove_onChange_mBA3BF7FDF2A7C02DE0DB32629D2CF110A5375206_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_remove_onChange_mBA3BF7FDF2A7C02DE0DB32629D2CF110A5375206_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8402));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8403));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8404));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8405));
		SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * L_0 = ((SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8407));
		NullCheck(L_0);
		SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * L_1 = SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8407));
		ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8408));
		NullCheck(L_1);
		SteamVR_Action_Vector3_Source_remove_onChange_m2C757953F88F1D3FCAD98F0F7D0C4EEDCE3220DB(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8408));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8406));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3::add_onUpdate(Valve.VR.SteamVR_Action_Vector3_UpdateHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_add_onUpdate_mC6730976874F184C9AC45CDDBA4A51145E562EB5 (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_add_onUpdate_mC6730976874F184C9AC45CDDBA4A51145E562EB5_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_add_onUpdate_mC6730976874F184C9AC45CDDBA4A51145E562EB5_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8409));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8410));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8411));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onUpdate += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onUpdate -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8412));
		SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * L_0 = ((SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8414));
		NullCheck(L_0);
		SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * L_1 = SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8414));
		UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8415));
		NullCheck(L_1);
		SteamVR_Action_Vector3_Source_add_onUpdate_mE3337890745CBF20D96EB63A6241FB545E8D7DFC(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8415));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onUpdate += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onUpdate -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8413));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3::remove_onUpdate(Valve.VR.SteamVR_Action_Vector3_UpdateHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_remove_onUpdate_m49616C5F27B3F1F0F08E30427FF68A2AA06CDB62 (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_remove_onUpdate_m49616C5F27B3F1F0F08E30427FF68A2AA06CDB62_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_remove_onUpdate_m49616C5F27B3F1F0F08E30427FF68A2AA06CDB62_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8416));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8417));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8418));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onUpdate += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onUpdate -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8419));
		SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * L_0 = ((SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8421));
		NullCheck(L_0);
		SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * L_1 = SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8421));
		UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8422));
		NullCheck(L_1);
		SteamVR_Action_Vector3_Source_remove_onUpdate_mE4D9472A97BDCB264B875B8AFEB5E1C19187FF07(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8422));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onUpdate += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onUpdate -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8420));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3::add_onAxis(Valve.VR.SteamVR_Action_Vector3_AxisHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_add_onAxis_mD6A4E09D264E987391E26F51543D63494DD24EEF (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_add_onAxis_mD6A4E09D264E987391E26F51543D63494DD24EEF_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_add_onAxis_mD6A4E09D264E987391E26F51543D63494DD24EEF_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8423));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8424));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8425));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onAxis += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onAxis -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8426));
		SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * L_0 = ((SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8428));
		NullCheck(L_0);
		SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * L_1 = SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8428));
		AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8429));
		NullCheck(L_1);
		SteamVR_Action_Vector3_Source_add_onAxis_m09DA9894C1E442EB2D92595D083CD574E287150A(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8429));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onAxis += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onAxis -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8427));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3::remove_onAxis(Valve.VR.SteamVR_Action_Vector3_AxisHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_remove_onAxis_mFD39E7E5FE3F6A009869F30872D651DAC960CF9F (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_remove_onAxis_mFD39E7E5FE3F6A009869F30872D651DAC960CF9F_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_remove_onAxis_mFD39E7E5FE3F6A009869F30872D651DAC960CF9F_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8430));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8431));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8432));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onAxis += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onAxis -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8433));
		SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * L_0 = ((SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8435));
		NullCheck(L_0);
		SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * L_1 = SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8435));
		AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8436));
		NullCheck(L_1);
		SteamVR_Action_Vector3_Source_remove_onAxis_m0E77E9C566405FABBE20C7120A16AE551AC4B70C(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8436));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onAxis += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onAxis -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8434));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3::add_onActiveChange(Valve.VR.SteamVR_Action_Vector3_ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_add_onActiveChange_mFD6D6D7BBFDDDBAB5371E7D544A1CBA0ABE4CA18 (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_add_onActiveChange_mFD6D6D7BBFDDDBAB5371E7D544A1CBA0ABE4CA18_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_add_onActiveChange_mFD6D6D7BBFDDDBAB5371E7D544A1CBA0ABE4CA18_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8437));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8438));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8439));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onActiveChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onActiveChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8440));
		SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * L_0 = ((SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8442));
		NullCheck(L_0);
		SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * L_1 = SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8442));
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8443));
		NullCheck(L_1);
		SteamVR_Action_Vector3_Source_add_onActiveChange_m01C18C6CC07A9423AACB55F009E6562493049DA0(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8443));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onActiveChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onActiveChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8441));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3::remove_onActiveChange(Valve.VR.SteamVR_Action_Vector3_ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_remove_onActiveChange_mB126BA6BF4C9EA71ED10C37E584079216BB7F536 (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_remove_onActiveChange_mB126BA6BF4C9EA71ED10C37E584079216BB7F536_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_remove_onActiveChange_mB126BA6BF4C9EA71ED10C37E584079216BB7F536_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8444));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8445));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8446));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onActiveChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onActiveChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8447));
		SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * L_0 = ((SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8449));
		NullCheck(L_0);
		SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * L_1 = SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8449));
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8450));
		NullCheck(L_1);
		SteamVR_Action_Vector3_Source_remove_onActiveChange_mEFAADD238B7127C347FCBF4D850FBD7664BEFD95(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8450));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onActiveChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onActiveChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8448));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3::add_onActiveBindingChange(Valve.VR.SteamVR_Action_Vector3_ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_add_onActiveBindingChange_mC4E35E2233DC7C10B75320C8A5EAF0EC207AC5D8 (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_add_onActiveBindingChange_mC4E35E2233DC7C10B75320C8A5EAF0EC207AC5D8_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_add_onActiveBindingChange_mC4E35E2233DC7C10B75320C8A5EAF0EC207AC5D8_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8451));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8452));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8453));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onActiveBindingChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onActiveBindingChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8454));
		SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * L_0 = ((SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8456));
		NullCheck(L_0);
		SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * L_1 = SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8456));
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8457));
		NullCheck(L_1);
		SteamVR_Action_Vector3_Source_add_onActiveBindingChange_mC84803E228A14E7891F4B456DC5A102E2ED3956A(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8457));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onActiveBindingChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onActiveBindingChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8455));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3::remove_onActiveBindingChange(Valve.VR.SteamVR_Action_Vector3_ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_remove_onActiveBindingChange_m65EA244FFFCEFAE4B87F0B1E90A38F1CBE2F9C1C (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_remove_onActiveBindingChange_m65EA244FFFCEFAE4B87F0B1E90A38F1CBE2F9C1C_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_remove_onActiveBindingChange_m65EA244FFFCEFAE4B87F0B1E90A38F1CBE2F9C1C_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8458));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8459));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8460));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onActiveBindingChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onActiveBindingChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8461));
		SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * L_0 = ((SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8463));
		NullCheck(L_0);
		SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * L_1 = SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8463));
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_2 = ___value0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8464));
		NullCheck(L_1);
		SteamVR_Action_Vector3_Source_remove_onActiveBindingChange_m823695F9961EF46DB2811DA5B8E68567582C639B(L_1, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8464));
		// { add { sourceMap[SteamVR_Input_Sources.Any].onActiveBindingChange += value; } remove { sourceMap[SteamVR_Input_Sources.Any].onActiveBindingChange -= value; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8462));
		return;
	}
}
// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Vector3::get_axis()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Vector3_get_axis_mF2A2E572ADC8B76D4232AED7D44A94ACD1906099 (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_get_axis_mF2A2E572ADC8B76D4232AED7D44A94ACD1906099_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_get_axis_mF2A2E572ADC8B76D4232AED7D44A94ACD1906099_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8465));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8466));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8467));
		// public Vector3 axis { get { return sourceMap[SteamVR_Input_Sources.Any].axis; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8468));
		SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * L_0 = ((SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8470));
		NullCheck(L_0);
		SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * L_1 = SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8470));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8471));
		NullCheck(L_1);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_2 = SteamVR_Action_Vector3_Source_get_axis_m0F9A2BF33B9BC6BF5774EC4D7E2EE2B474B28E99_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8471));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public Vector3 axis { get { return sourceMap[SteamVR_Input_Sources.Any].axis; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8469));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_3 = V_0;
		return L_3;
	}
}
// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Vector3::get_lastAxis()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Vector3_get_lastAxis_m0365F5B93BB05F9C8F59C44DA333B70C1C46F1DE (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_get_lastAxis_m0365F5B93BB05F9C8F59C44DA333B70C1C46F1DE_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_get_lastAxis_m0365F5B93BB05F9C8F59C44DA333B70C1C46F1DE_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8472));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8473));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8474));
		// public Vector3 lastAxis { get { return sourceMap[SteamVR_Input_Sources.Any].lastAxis; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8475));
		SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * L_0 = ((SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8477));
		NullCheck(L_0);
		SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * L_1 = SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8477));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8478));
		NullCheck(L_1);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_2 = SteamVR_Action_Vector3_Source_get_lastAxis_mB5307EA9C41A76639B02A5FB7C775E14C7E8BE8E_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8478));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public Vector3 lastAxis { get { return sourceMap[SteamVR_Input_Sources.Any].lastAxis; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8476));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_3 = V_0;
		return L_3;
	}
}
// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Vector3::get_delta()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Vector3_get_delta_m3EA8C5D174CB8D7965B2026361C94F6FF750E38C (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_get_delta_m3EA8C5D174CB8D7965B2026361C94F6FF750E38C_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_get_delta_m3EA8C5D174CB8D7965B2026361C94F6FF750E38C_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8479));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8480));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8481));
		// public Vector3 delta { get { return sourceMap[SteamVR_Input_Sources.Any].delta; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8482));
		SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * L_0 = ((SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8484));
		NullCheck(L_0);
		SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * L_1 = SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8484));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8485));
		NullCheck(L_1);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_2 = SteamVR_Action_Vector3_Source_get_delta_m4B3DA30643F7D02E80B5AAC93D5BF6D730305BC0_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8485));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public Vector3 delta { get { return sourceMap[SteamVR_Input_Sources.Any].delta; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8483));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_3 = V_0;
		return L_3;
	}
}
// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Vector3::get_lastDelta()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Vector3_get_lastDelta_m1C55579E0A38F190350FF1827125EC6AC7D27606 (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_get_lastDelta_m1C55579E0A38F190350FF1827125EC6AC7D27606_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_get_lastDelta_m1C55579E0A38F190350FF1827125EC6AC7D27606_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8486));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8487));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8488));
		// public Vector3 lastDelta { get { return sourceMap[SteamVR_Input_Sources.Any].lastDelta; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8489));
		SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * L_0 = ((SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 *)__this)->get_sourceMap_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8491));
		NullCheck(L_0);
		SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * L_1 = SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A(L_0, 0, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8491));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8492));
		NullCheck(L_1);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_2 = SteamVR_Action_Vector3_Source_get_lastDelta_mBCB31D8D0D5F3B64784F01EAFFC7311F1E07B467_inline(L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8492));
		V_0 = L_2;
		goto IL_0015;
	}

IL_0015:
	{
		// public Vector3 lastDelta { get { return sourceMap[SteamVR_Input_Sources.Any].lastDelta; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8490));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_3 = V_0;
		return L_3;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3__ctor_m37437A0DC1654AC61B42767A3F6BE9FA2328347C (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3__ctor_m37437A0DC1654AC61B42767A3F6BE9FA2328347C_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3__ctor_m37437A0DC1654AC61B42767A3F6BE9FA2328347C_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8493));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8494));
	{
		// public SteamVR_Action_Vector3() { }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8495));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8498));
		SteamVR_Action_In_2__ctor_mF9E126AD1A57CA13943CDE8404A98C0DA8FF8225(__this, /*hidden argument*/SteamVR_Action_In_2__ctor_mF9E126AD1A57CA13943CDE8404A98C0DA8FF8225_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8498));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8496));
		// public SteamVR_Action_Vector3() { }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8497));
		return;
	}
}
// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Vector3::GetAxis(Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Vector3_GetAxis_mAECD5AA7DB213F313164BCF52B688A44D2466EF5 (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, int32_t ___inputSource0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_GetAxis_mAECD5AA7DB213F313164BCF52B688A44D2466EF5_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___inputSource0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_GetAxis_mAECD5AA7DB213F313164BCF52B688A44D2466EF5_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8499));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8500));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8501));
		// return sourceMap[inputSource].axis;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8502));
		SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * L_0 = ((SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 *)__this)->get_sourceMap_4();
		int32_t L_1 = ___inputSource0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8504));
		NullCheck(L_0);
		SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * L_2 = SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A(L_0, L_1, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8504));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8505));
		NullCheck(L_2);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_3 = SteamVR_Action_Vector3_Source_get_axis_m0F9A2BF33B9BC6BF5774EC4D7E2EE2B474B28E99_inline(L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8505));
		V_0 = L_3;
		goto IL_0015;
	}

IL_0015:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8503));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_4 = V_0;
		return L_4;
	}
}
// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Vector3::GetAxisDelta(Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Vector3_GetAxisDelta_m6A8BA36DD1F6238D9EE8EF3D7E0F0C87CCE3D9C0 (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, int32_t ___inputSource0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_GetAxisDelta_m6A8BA36DD1F6238D9EE8EF3D7E0F0C87CCE3D9C0_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___inputSource0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_GetAxisDelta_m6A8BA36DD1F6238D9EE8EF3D7E0F0C87CCE3D9C0_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8506));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8507));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8508));
		// return sourceMap[inputSource].delta;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8509));
		SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * L_0 = ((SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 *)__this)->get_sourceMap_4();
		int32_t L_1 = ___inputSource0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8511));
		NullCheck(L_0);
		SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * L_2 = SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A(L_0, L_1, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8511));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8512));
		NullCheck(L_2);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_3 = SteamVR_Action_Vector3_Source_get_delta_m4B3DA30643F7D02E80B5AAC93D5BF6D730305BC0_inline(L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8512));
		V_0 = L_3;
		goto IL_0015;
	}

IL_0015:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8510));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_4 = V_0;
		return L_4;
	}
}
// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Vector3::GetLastAxis(Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Vector3_GetLastAxis_mF0C0D122C31F80A5713E739B8D04D352756A6EB8 (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, int32_t ___inputSource0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_GetLastAxis_mF0C0D122C31F80A5713E739B8D04D352756A6EB8_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___inputSource0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_GetLastAxis_mF0C0D122C31F80A5713E739B8D04D352756A6EB8_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8513));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8514));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8515));
		// return sourceMap[inputSource].lastAxis;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8516));
		SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * L_0 = ((SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 *)__this)->get_sourceMap_4();
		int32_t L_1 = ___inputSource0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8518));
		NullCheck(L_0);
		SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * L_2 = SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A(L_0, L_1, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8518));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8519));
		NullCheck(L_2);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_3 = SteamVR_Action_Vector3_Source_get_lastAxis_mB5307EA9C41A76639B02A5FB7C775E14C7E8BE8E_inline(L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8519));
		V_0 = L_3;
		goto IL_0015;
	}

IL_0015:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8517));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_4 = V_0;
		return L_4;
	}
}
// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Vector3::GetLastAxisDelta(Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Vector3_GetLastAxisDelta_m68EA72E9F86BD55D97944438DE7173AD6DA2537D (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, int32_t ___inputSource0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_GetLastAxisDelta_m68EA72E9F86BD55D97944438DE7173AD6DA2537D_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_0;
	memset((&V_0), 0, sizeof(V_0));
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___inputSource0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_GetLastAxisDelta_m68EA72E9F86BD55D97944438DE7173AD6DA2537D_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8520));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8521));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8522));
		// return sourceMap[inputSource].lastDelta;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8523));
		SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * L_0 = ((SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 *)__this)->get_sourceMap_4();
		int32_t L_1 = ___inputSource0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8525));
		NullCheck(L_0);
		SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * L_2 = SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A(L_0, L_1, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8525));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8526));
		NullCheck(L_2);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_3 = SteamVR_Action_Vector3_Source_get_lastDelta_mBCB31D8D0D5F3B64784F01EAFFC7311F1E07B467_inline(L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8526));
		V_0 = L_3;
		goto IL_0015;
	}

IL_0015:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8524));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_4 = V_0;
		return L_4;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3::AddOnActiveChangeListener(Valve.VR.SteamVR_Action_Vector3_ActiveChangeHandler,Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_AddOnActiveChangeListener_m2D01DEF21993C1450F3A6DD5A1A0E13E015A16EE (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * ___functionToCall0, int32_t ___inputSource1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_AddOnActiveChangeListener_m2D01DEF21993C1450F3A6DD5A1A0E13E015A16EE_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToCall0), (&___inputSource1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_AddOnActiveChangeListener_m2D01DEF21993C1450F3A6DD5A1A0E13E015A16EE_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8527));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8528));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8529));
		// sourceMap[inputSource].onActiveChange += functionToCall;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8530));
		SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * L_0 = ((SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 *)__this)->get_sourceMap_4();
		int32_t L_1 = ___inputSource1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8532));
		NullCheck(L_0);
		SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * L_2 = SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A(L_0, L_1, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8532));
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_3 = ___functionToCall0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8533));
		NullCheck(L_2);
		SteamVR_Action_Vector3_Source_add_onActiveChange_m01C18C6CC07A9423AACB55F009E6562493049DA0(L_2, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8533));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8531));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3::RemoveOnActiveChangeListener(Valve.VR.SteamVR_Action_Vector3_ActiveChangeHandler,Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_RemoveOnActiveChangeListener_m768C67754A7B4122AC2CA9AF3F4A6C84BF71C122 (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * ___functionToStopCalling0, int32_t ___inputSource1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_RemoveOnActiveChangeListener_m768C67754A7B4122AC2CA9AF3F4A6C84BF71C122_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToStopCalling0), (&___inputSource1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_RemoveOnActiveChangeListener_m768C67754A7B4122AC2CA9AF3F4A6C84BF71C122_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8534));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8535));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8536));
		// sourceMap[inputSource].onActiveChange -= functionToStopCalling;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8537));
		SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * L_0 = ((SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 *)__this)->get_sourceMap_4();
		int32_t L_1 = ___inputSource1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8539));
		NullCheck(L_0);
		SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * L_2 = SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A(L_0, L_1, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8539));
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_3 = ___functionToStopCalling0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8540));
		NullCheck(L_2);
		SteamVR_Action_Vector3_Source_remove_onActiveChange_mEFAADD238B7127C347FCBF4D850FBD7664BEFD95(L_2, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8540));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8538));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3::AddOnActiveBindingChangeListener(Valve.VR.SteamVR_Action_Vector3_ActiveChangeHandler,Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_AddOnActiveBindingChangeListener_mA8C945BE28CAD502B6A1BD6A72659509A206C658 (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * ___functionToCall0, int32_t ___inputSource1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_AddOnActiveBindingChangeListener_mA8C945BE28CAD502B6A1BD6A72659509A206C658_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToCall0), (&___inputSource1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_AddOnActiveBindingChangeListener_mA8C945BE28CAD502B6A1BD6A72659509A206C658_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8541));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8542));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8543));
		// sourceMap[inputSource].onActiveBindingChange += functionToCall;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8544));
		SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * L_0 = ((SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 *)__this)->get_sourceMap_4();
		int32_t L_1 = ___inputSource1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8546));
		NullCheck(L_0);
		SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * L_2 = SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A(L_0, L_1, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8546));
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_3 = ___functionToCall0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8547));
		NullCheck(L_2);
		SteamVR_Action_Vector3_Source_add_onActiveBindingChange_mC84803E228A14E7891F4B456DC5A102E2ED3956A(L_2, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8547));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8545));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3::RemoveOnActiveBindingChangeListener(Valve.VR.SteamVR_Action_Vector3_ActiveChangeHandler,Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_RemoveOnActiveBindingChangeListener_m0318DB5C418AB27237EBEDD74986CEED5322FED4 (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * ___functionToStopCalling0, int32_t ___inputSource1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_RemoveOnActiveBindingChangeListener_m0318DB5C418AB27237EBEDD74986CEED5322FED4_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToStopCalling0), (&___inputSource1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_RemoveOnActiveBindingChangeListener_m0318DB5C418AB27237EBEDD74986CEED5322FED4_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8548));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8549));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8550));
		// sourceMap[inputSource].onActiveBindingChange -= functionToStopCalling;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8551));
		SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * L_0 = ((SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 *)__this)->get_sourceMap_4();
		int32_t L_1 = ___inputSource1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8553));
		NullCheck(L_0);
		SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * L_2 = SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A(L_0, L_1, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8553));
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_3 = ___functionToStopCalling0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8554));
		NullCheck(L_2);
		SteamVR_Action_Vector3_Source_remove_onActiveBindingChange_m823695F9961EF46DB2811DA5B8E68567582C639B(L_2, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8554));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8552));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3::AddOnChangeListener(Valve.VR.SteamVR_Action_Vector3_ChangeHandler,Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_AddOnChangeListener_m856C1E73A985193161F7E68E51E2E7D405CAC77D (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * ___functionToCall0, int32_t ___inputSource1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_AddOnChangeListener_m856C1E73A985193161F7E68E51E2E7D405CAC77D_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToCall0), (&___inputSource1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_AddOnChangeListener_m856C1E73A985193161F7E68E51E2E7D405CAC77D_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8555));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8556));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8557));
		// sourceMap[inputSource].onChange += functionToCall;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8558));
		SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * L_0 = ((SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 *)__this)->get_sourceMap_4();
		int32_t L_1 = ___inputSource1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8560));
		NullCheck(L_0);
		SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * L_2 = SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A(L_0, L_1, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8560));
		ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * L_3 = ___functionToCall0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8561));
		NullCheck(L_2);
		SteamVR_Action_Vector3_Source_add_onChange_m69C7AFE22DFEF6EE8205740927730B4793ABC16D(L_2, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8561));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8559));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3::RemoveOnChangeListener(Valve.VR.SteamVR_Action_Vector3_ChangeHandler,Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_RemoveOnChangeListener_m8AD0A1B8695E9BBF053F3E2D4A6661F22E52BC3D (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * ___functionToStopCalling0, int32_t ___inputSource1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_RemoveOnChangeListener_m8AD0A1B8695E9BBF053F3E2D4A6661F22E52BC3D_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToStopCalling0), (&___inputSource1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_RemoveOnChangeListener_m8AD0A1B8695E9BBF053F3E2D4A6661F22E52BC3D_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8562));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8563));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8564));
		// sourceMap[inputSource].onChange -= functionToStopCalling;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8565));
		SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * L_0 = ((SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 *)__this)->get_sourceMap_4();
		int32_t L_1 = ___inputSource1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8567));
		NullCheck(L_0);
		SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * L_2 = SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A(L_0, L_1, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8567));
		ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * L_3 = ___functionToStopCalling0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8568));
		NullCheck(L_2);
		SteamVR_Action_Vector3_Source_remove_onChange_m2C757953F88F1D3FCAD98F0F7D0C4EEDCE3220DB(L_2, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8568));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8566));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3::AddOnUpdateListener(Valve.VR.SteamVR_Action_Vector3_UpdateHandler,Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_AddOnUpdateListener_mFDBD5206DBD8AE0CB95CDF5FCA769635C7BEF1A3 (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * ___functionToCall0, int32_t ___inputSource1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_AddOnUpdateListener_mFDBD5206DBD8AE0CB95CDF5FCA769635C7BEF1A3_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToCall0), (&___inputSource1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_AddOnUpdateListener_mFDBD5206DBD8AE0CB95CDF5FCA769635C7BEF1A3_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8569));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8570));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8571));
		// sourceMap[inputSource].onUpdate += functionToCall;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8572));
		SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * L_0 = ((SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 *)__this)->get_sourceMap_4();
		int32_t L_1 = ___inputSource1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8574));
		NullCheck(L_0);
		SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * L_2 = SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A(L_0, L_1, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8574));
		UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * L_3 = ___functionToCall0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8575));
		NullCheck(L_2);
		SteamVR_Action_Vector3_Source_add_onUpdate_mE3337890745CBF20D96EB63A6241FB545E8D7DFC(L_2, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8575));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8573));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3::RemoveOnUpdateListener(Valve.VR.SteamVR_Action_Vector3_UpdateHandler,Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_RemoveOnUpdateListener_m3BB302B27358EBEF86B005C6C3BA792EDE27CB75 (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * ___functionToStopCalling0, int32_t ___inputSource1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_RemoveOnUpdateListener_m3BB302B27358EBEF86B005C6C3BA792EDE27CB75_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToStopCalling0), (&___inputSource1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_RemoveOnUpdateListener_m3BB302B27358EBEF86B005C6C3BA792EDE27CB75_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8576));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8577));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8578));
		// sourceMap[inputSource].onUpdate -= functionToStopCalling;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8579));
		SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * L_0 = ((SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 *)__this)->get_sourceMap_4();
		int32_t L_1 = ___inputSource1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8581));
		NullCheck(L_0);
		SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * L_2 = SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A(L_0, L_1, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8581));
		UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * L_3 = ___functionToStopCalling0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8582));
		NullCheck(L_2);
		SteamVR_Action_Vector3_Source_remove_onUpdate_mE4D9472A97BDCB264B875B8AFEB5E1C19187FF07(L_2, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8582));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8580));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3::AddOnAxisListener(Valve.VR.SteamVR_Action_Vector3_AxisHandler,Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_AddOnAxisListener_mFB5B81222D06CE1838A819CD31E5468593497A42 (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * ___functionToCall0, int32_t ___inputSource1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_AddOnAxisListener_mFB5B81222D06CE1838A819CD31E5468593497A42_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToCall0), (&___inputSource1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_AddOnAxisListener_mFB5B81222D06CE1838A819CD31E5468593497A42_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8583));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8584));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8585));
		// sourceMap[inputSource].onAxis += functionToCall;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8586));
		SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * L_0 = ((SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 *)__this)->get_sourceMap_4();
		int32_t L_1 = ___inputSource1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8588));
		NullCheck(L_0);
		SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * L_2 = SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A(L_0, L_1, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8588));
		AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * L_3 = ___functionToCall0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8589));
		NullCheck(L_2);
		SteamVR_Action_Vector3_Source_add_onAxis_m09DA9894C1E442EB2D92595D083CD574E287150A(L_2, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8589));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8587));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3::RemoveOnAxisListener(Valve.VR.SteamVR_Action_Vector3_AxisHandler,Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_RemoveOnAxisListener_m54BB3A15B566FCD77B580FEB19A879EB6BAA0B19 (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * ___functionToStopCalling0, int32_t ___inputSource1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_RemoveOnAxisListener_m54BB3A15B566FCD77B580FEB19A879EB6BAA0B19_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___functionToStopCalling0), (&___inputSource1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_RemoveOnAxisListener_m54BB3A15B566FCD77B580FEB19A879EB6BAA0B19_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8590));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8591));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8592));
		// sourceMap[inputSource].onAxis -= functionToStopCalling;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8593));
		SteamVR_Action_Vector3_Source_Map_t2469AF68483668A9E13B8CEC018862BF8D187C95 * L_0 = ((SteamVR_Action_2_t28F415525CE76571452E3FBA0A66082F9568F902 *)__this)->get_sourceMap_4();
		int32_t L_1 = ___inputSource1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8595));
		NullCheck(L_0);
		SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * L_2 = SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A(L_0, L_1, /*hidden argument*/SteamVR_Action_Source_Map_1_get_Item_m5AC2AE8D67AF3309F18961534AA8276D609B9C8A_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8595));
		AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * L_3 = ___functionToStopCalling0;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8596));
		NullCheck(L_2);
		SteamVR_Action_Vector3_Source_remove_onAxis_m0E77E9C566405FABBE20C7120A16AE551AC4B70C(L_2, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8596));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8594));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3::UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize_mFDC86399F04D0E0B080756422443B794B9FFBC7F (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize_mFDC86399F04D0E0B080756422443B794B9FFBC7F_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize_mFDC86399F04D0E0B080756422443B794B9FFBC7F_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8597));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8598));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8599));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8600));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3::UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize_m4713EBBEB02475300C221E3B1D590A50FBDCFE1D (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize_m4713EBBEB02475300C221E3B1D590A50FBDCFE1D_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize_m4713EBBEB02475300C221E3B1D590A50FBDCFE1D_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8601));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8602));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8603));
		// InitAfterDeserialize();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8604));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8606));
		SteamVR_Action_2_InitAfterDeserialize_mEE7832ED7C1B03D8FEB093F34B2B63974C3B5A04(__this, /*hidden argument*/SteamVR_Action_2_InitAfterDeserialize_mEE7832ED7C1B03D8FEB093F34B2B63974C3B5A04_RuntimeMethod_var);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8606));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8605));
		return;
	}
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Void Valve.VR.SteamVR_Action_Vector3_ActiveChangeHandler::.ctor(System.Object,System.IntPtr)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ActiveChangeHandler__ctor_m27F1243195DB4B4F4E589AAD0024073E1C135FA0 (ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * __this, RuntimeObject * ___object0, intptr_t ___method1, const RuntimeMethod* method)
{
	__this->set_method_ptr_0(il2cpp_codegen_get_method_pointer((RuntimeMethod*)___method1));
	__this->set_method_3(___method1);
	__this->set_m_target_2(___object0);
}
// System.Void Valve.VR.SteamVR_Action_Vector3_ActiveChangeHandler::Invoke(Valve.VR.SteamVR_Action_Vector3,Valve.VR.SteamVR_Input_Sources,System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ActiveChangeHandler_Invoke_m67A19739D2E43FC88B0EA8081E3DACEE816EF2AD (ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * __this, SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * ___fromAction0, int32_t ___fromSource1, bool ___active2, const RuntimeMethod* method)
{
	DelegateU5BU5D_tDFCDEE2A6322F96C0FE49AF47E9ADB8C4B294E86* delegateArrayToInvoke = __this->get_delegates_11();
	Delegate_t** delegatesToInvoke;
	il2cpp_array_size_t length;
	if (delegateArrayToInvoke != NULL)
	{
		length = delegateArrayToInvoke->max_length;
		delegatesToInvoke = reinterpret_cast<Delegate_t**>(delegateArrayToInvoke->GetAddressAtUnchecked(0));
	}
	else
	{
		length = 1;
		delegatesToInvoke = reinterpret_cast<Delegate_t**>(&__this);
	}

	for (il2cpp_array_size_t i = 0; i < length; i++)
	{
		Delegate_t* currentDelegate = delegatesToInvoke[i];
		Il2CppMethodPointer targetMethodPointer = currentDelegate->get_method_ptr_0();
		RuntimeObject* targetThis = currentDelegate->get_m_target_2();
		RuntimeMethod* targetMethod = (RuntimeMethod*)(currentDelegate->get_method_3());
		if (!il2cpp_codegen_method_is_virtual(targetMethod))
		{
			il2cpp_codegen_raise_execution_engine_exception_if_method_is_not_found(targetMethod);
		}
		bool ___methodIsStatic = MethodIsStatic(targetMethod);
		int ___parameterCount = il2cpp_codegen_method_parameter_count(targetMethod);
		if (___methodIsStatic)
		{
			if (___parameterCount == 3)
			{
				// open
				typedef void (*FunctionPointerType) (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, bool, const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(___fromAction0, ___fromSource1, ___active2, targetMethod);
			}
			else
			{
				// closed
				typedef void (*FunctionPointerType) (void*, SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, bool, const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(targetThis, ___fromAction0, ___fromSource1, ___active2, targetMethod);
			}
		}
		else if (___parameterCount != 3)
		{
			// open
			if (il2cpp_codegen_method_is_virtual(targetMethod) && il2cpp_codegen_delegate_has_invoker((Il2CppDelegate*)__this))
			{
				if (il2cpp_codegen_method_is_generic_instance(targetMethod))
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						GenericInterfaceActionInvoker2< int32_t, bool >::Invoke(targetMethod, ___fromAction0, ___fromSource1, ___active2);
					else
						GenericVirtActionInvoker2< int32_t, bool >::Invoke(targetMethod, ___fromAction0, ___fromSource1, ___active2);
				}
				else
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						InterfaceActionInvoker2< int32_t, bool >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), il2cpp_codegen_method_get_declaring_type(targetMethod), ___fromAction0, ___fromSource1, ___active2);
					else
						VirtActionInvoker2< int32_t, bool >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), ___fromAction0, ___fromSource1, ___active2);
				}
			}
			else
			{
				if (targetThis == NULL && il2cpp_codegen_class_is_value_type(il2cpp_codegen_method_get_declaring_type(targetMethod)))
				{
					typedef void (*FunctionPointerType) (RuntimeObject*, bool, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)((reinterpret_cast<RuntimeObject*>(&___fromSource1) - 1), ___active2, targetMethod);
				}
				typedef void (*FunctionPointerType) (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, bool, const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(___fromAction0, ___fromSource1, ___active2, targetMethod);
			}
		}
		else
		{
			// closed
			if (targetThis != NULL && il2cpp_codegen_method_is_virtual(targetMethod) && !il2cpp_codegen_object_is_of_sealed_type(targetThis) && il2cpp_codegen_delegate_has_invoker((Il2CppDelegate*)__this))
			{
				if (il2cpp_codegen_method_is_generic_instance(targetMethod))
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						GenericInterfaceActionInvoker3< SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, bool >::Invoke(targetMethod, targetThis, ___fromAction0, ___fromSource1, ___active2);
					else
						GenericVirtActionInvoker3< SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, bool >::Invoke(targetMethod, targetThis, ___fromAction0, ___fromSource1, ___active2);
				}
				else
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						InterfaceActionInvoker3< SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, bool >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), il2cpp_codegen_method_get_declaring_type(targetMethod), targetThis, ___fromAction0, ___fromSource1, ___active2);
					else
						VirtActionInvoker3< SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, bool >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), targetThis, ___fromAction0, ___fromSource1, ___active2);
				}
			}
			else
			{
				if (targetThis == NULL && il2cpp_codegen_class_is_value_type(il2cpp_codegen_method_get_declaring_type(targetMethod)))
				{
					typedef void (*FunctionPointerType) (RuntimeObject*, int32_t, bool, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)((reinterpret_cast<RuntimeObject*>(___fromAction0) - 1), ___fromSource1, ___active2, targetMethod);
				}
				if (targetThis == NULL)
				{
					typedef void (*FunctionPointerType) (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, bool, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)(___fromAction0, ___fromSource1, ___active2, targetMethod);
				}
				else
				{
					typedef void (*FunctionPointerType) (void*, SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, bool, const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)(targetThis, ___fromAction0, ___fromSource1, ___active2, targetMethod);
				}
			}
		}
	}
}
// System.IAsyncResult Valve.VR.SteamVR_Action_Vector3_ActiveChangeHandler::BeginInvoke(Valve.VR.SteamVR_Action_Vector3,Valve.VR.SteamVR_Input_Sources,System.Boolean,System.AsyncCallback,System.Object)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RuntimeObject* ActiveChangeHandler_BeginInvoke_mFC1496645B04E0FA94A6D7CFDE9B46B6D0EEA42B (ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * __this, SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * ___fromAction0, int32_t ___fromSource1, bool ___active2, AsyncCallback_t3F3DA3BEDAEE81DD1D24125DF8EB30E85EE14DA4 * ___callback3, RuntimeObject * ___object4, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ActiveChangeHandler_BeginInvoke_mFC1496645B04E0FA94A6D7CFDE9B46B6D0EEA42B_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	void *__d_args[4] = {0};
	__d_args[0] = ___fromAction0;
	__d_args[1] = Box(SteamVR_Input_Sources_tCE41AA589FB3B9516BDE0DFABDCB4AAEA29528F7_il2cpp_TypeInfo_var, &___fromSource1);
	__d_args[2] = Box(Boolean_tB53F6830F670160873277339AA58F15CAED4399C_il2cpp_TypeInfo_var, &___active2);
	return (RuntimeObject*)il2cpp_codegen_delegate_begin_invoke((RuntimeDelegate*)__this, __d_args, (RuntimeDelegate*)___callback3, (RuntimeObject*)___object4);
}
// System.Void Valve.VR.SteamVR_Action_Vector3_ActiveChangeHandler::EndInvoke(System.IAsyncResult)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ActiveChangeHandler_EndInvoke_m054C87EB5A5F3B6BA6C49408D10052ACAEA74E82 (ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * __this, RuntimeObject* ___result0, const RuntimeMethod* method)
{
	il2cpp_codegen_delegate_end_invoke((Il2CppAsyncResult*) ___result0, 0);
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Void Valve.VR.SteamVR_Action_Vector3_AxisHandler::.ctor(System.Object,System.IntPtr)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void AxisHandler__ctor_mAA8EA84267CB1D2C23C0253B590E375B9FEC43F7 (AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * __this, RuntimeObject * ___object0, intptr_t ___method1, const RuntimeMethod* method)
{
	__this->set_method_ptr_0(il2cpp_codegen_get_method_pointer((RuntimeMethod*)___method1));
	__this->set_method_3(___method1);
	__this->set_m_target_2(___object0);
}
// System.Void Valve.VR.SteamVR_Action_Vector3_AxisHandler::Invoke(Valve.VR.SteamVR_Action_Vector3,Valve.VR.SteamVR_Input_Sources,UnityEngine.Vector3,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void AxisHandler_Invoke_m4898437260780A1DE7497E17A30140E7081E3891 (AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * __this, SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * ___fromAction0, int32_t ___fromSource1, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___axis2, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___delta3, const RuntimeMethod* method)
{
	DelegateU5BU5D_tDFCDEE2A6322F96C0FE49AF47E9ADB8C4B294E86* delegateArrayToInvoke = __this->get_delegates_11();
	Delegate_t** delegatesToInvoke;
	il2cpp_array_size_t length;
	if (delegateArrayToInvoke != NULL)
	{
		length = delegateArrayToInvoke->max_length;
		delegatesToInvoke = reinterpret_cast<Delegate_t**>(delegateArrayToInvoke->GetAddressAtUnchecked(0));
	}
	else
	{
		length = 1;
		delegatesToInvoke = reinterpret_cast<Delegate_t**>(&__this);
	}

	for (il2cpp_array_size_t i = 0; i < length; i++)
	{
		Delegate_t* currentDelegate = delegatesToInvoke[i];
		Il2CppMethodPointer targetMethodPointer = currentDelegate->get_method_ptr_0();
		RuntimeObject* targetThis = currentDelegate->get_m_target_2();
		RuntimeMethod* targetMethod = (RuntimeMethod*)(currentDelegate->get_method_3());
		if (!il2cpp_codegen_method_is_virtual(targetMethod))
		{
			il2cpp_codegen_raise_execution_engine_exception_if_method_is_not_found(targetMethod);
		}
		bool ___methodIsStatic = MethodIsStatic(targetMethod);
		int ___parameterCount = il2cpp_codegen_method_parameter_count(targetMethod);
		if (___methodIsStatic)
		{
			if (___parameterCount == 4)
			{
				// open
				typedef void (*FunctionPointerType) (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
			}
			else
			{
				// closed
				typedef void (*FunctionPointerType) (void*, SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
			}
		}
		else if (___parameterCount != 4)
		{
			// open
			if (il2cpp_codegen_method_is_virtual(targetMethod) && il2cpp_codegen_delegate_has_invoker((Il2CppDelegate*)__this))
			{
				if (il2cpp_codegen_method_is_generic_instance(targetMethod))
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						GenericInterfaceActionInvoker3< int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  >::Invoke(targetMethod, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
					else
						GenericVirtActionInvoker3< int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  >::Invoke(targetMethod, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
				}
				else
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						InterfaceActionInvoker3< int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), il2cpp_codegen_method_get_declaring_type(targetMethod), ___fromAction0, ___fromSource1, ___axis2, ___delta3);
					else
						VirtActionInvoker3< int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), ___fromAction0, ___fromSource1, ___axis2, ___delta3);
				}
			}
			else
			{
				if (targetThis == NULL && il2cpp_codegen_class_is_value_type(il2cpp_codegen_method_get_declaring_type(targetMethod)))
				{
					typedef void (*FunctionPointerType) (RuntimeObject*, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)((reinterpret_cast<RuntimeObject*>(&___fromSource1) - 1), ___axis2, ___delta3, targetMethod);
				}
				typedef void (*FunctionPointerType) (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
			}
		}
		else
		{
			// closed
			if (targetThis != NULL && il2cpp_codegen_method_is_virtual(targetMethod) && !il2cpp_codegen_object_is_of_sealed_type(targetThis) && il2cpp_codegen_delegate_has_invoker((Il2CppDelegate*)__this))
			{
				if (il2cpp_codegen_method_is_generic_instance(targetMethod))
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						GenericInterfaceActionInvoker4< SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  >::Invoke(targetMethod, targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
					else
						GenericVirtActionInvoker4< SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  >::Invoke(targetMethod, targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
				}
				else
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						InterfaceActionInvoker4< SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), il2cpp_codegen_method_get_declaring_type(targetMethod), targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
					else
						VirtActionInvoker4< SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
				}
			}
			else
			{
				if (targetThis == NULL && il2cpp_codegen_class_is_value_type(il2cpp_codegen_method_get_declaring_type(targetMethod)))
				{
					typedef void (*FunctionPointerType) (RuntimeObject*, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)((reinterpret_cast<RuntimeObject*>(___fromAction0) - 1), ___fromSource1, ___axis2, ___delta3, targetMethod);
				}
				if (targetThis == NULL)
				{
					typedef void (*FunctionPointerType) (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)(___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
				}
				else
				{
					typedef void (*FunctionPointerType) (void*, SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)(targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
				}
			}
		}
	}
}
// System.IAsyncResult Valve.VR.SteamVR_Action_Vector3_AxisHandler::BeginInvoke(Valve.VR.SteamVR_Action_Vector3,Valve.VR.SteamVR_Input_Sources,UnityEngine.Vector3,UnityEngine.Vector3,System.AsyncCallback,System.Object)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RuntimeObject* AxisHandler_BeginInvoke_m5CE6356122E9BD630D00B5452683EAE16AF35BA0 (AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * __this, SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * ___fromAction0, int32_t ___fromSource1, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___axis2, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___delta3, AsyncCallback_t3F3DA3BEDAEE81DD1D24125DF8EB30E85EE14DA4 * ___callback4, RuntimeObject * ___object5, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (AxisHandler_BeginInvoke_m5CE6356122E9BD630D00B5452683EAE16AF35BA0_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	void *__d_args[5] = {0};
	__d_args[0] = ___fromAction0;
	__d_args[1] = Box(SteamVR_Input_Sources_tCE41AA589FB3B9516BDE0DFABDCB4AAEA29528F7_il2cpp_TypeInfo_var, &___fromSource1);
	__d_args[2] = Box(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var, &___axis2);
	__d_args[3] = Box(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var, &___delta3);
	return (RuntimeObject*)il2cpp_codegen_delegate_begin_invoke((RuntimeDelegate*)__this, __d_args, (RuntimeDelegate*)___callback4, (RuntimeObject*)___object5);
}
// System.Void Valve.VR.SteamVR_Action_Vector3_AxisHandler::EndInvoke(System.IAsyncResult)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void AxisHandler_EndInvoke_m11759D6D031B967058B2B71DB2FD823A34BD3D71 (AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * __this, RuntimeObject* ___result0, const RuntimeMethod* method)
{
	il2cpp_codegen_delegate_end_invoke((Il2CppAsyncResult*) ___result0, 0);
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Void Valve.VR.SteamVR_Action_Vector3_ChangeHandler::.ctor(System.Object,System.IntPtr)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ChangeHandler__ctor_mFE12D53E5E8DE907B9C42C05094F7B61A5710B7C (ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * __this, RuntimeObject * ___object0, intptr_t ___method1, const RuntimeMethod* method)
{
	__this->set_method_ptr_0(il2cpp_codegen_get_method_pointer((RuntimeMethod*)___method1));
	__this->set_method_3(___method1);
	__this->set_m_target_2(___object0);
}
// System.Void Valve.VR.SteamVR_Action_Vector3_ChangeHandler::Invoke(Valve.VR.SteamVR_Action_Vector3,Valve.VR.SteamVR_Input_Sources,UnityEngine.Vector3,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ChangeHandler_Invoke_m1BD4D5E5DD81C63A9C020AE470617259DBAF62EE (ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * __this, SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * ___fromAction0, int32_t ___fromSource1, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___axis2, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___delta3, const RuntimeMethod* method)
{
	DelegateU5BU5D_tDFCDEE2A6322F96C0FE49AF47E9ADB8C4B294E86* delegateArrayToInvoke = __this->get_delegates_11();
	Delegate_t** delegatesToInvoke;
	il2cpp_array_size_t length;
	if (delegateArrayToInvoke != NULL)
	{
		length = delegateArrayToInvoke->max_length;
		delegatesToInvoke = reinterpret_cast<Delegate_t**>(delegateArrayToInvoke->GetAddressAtUnchecked(0));
	}
	else
	{
		length = 1;
		delegatesToInvoke = reinterpret_cast<Delegate_t**>(&__this);
	}

	for (il2cpp_array_size_t i = 0; i < length; i++)
	{
		Delegate_t* currentDelegate = delegatesToInvoke[i];
		Il2CppMethodPointer targetMethodPointer = currentDelegate->get_method_ptr_0();
		RuntimeObject* targetThis = currentDelegate->get_m_target_2();
		RuntimeMethod* targetMethod = (RuntimeMethod*)(currentDelegate->get_method_3());
		if (!il2cpp_codegen_method_is_virtual(targetMethod))
		{
			il2cpp_codegen_raise_execution_engine_exception_if_method_is_not_found(targetMethod);
		}
		bool ___methodIsStatic = MethodIsStatic(targetMethod);
		int ___parameterCount = il2cpp_codegen_method_parameter_count(targetMethod);
		if (___methodIsStatic)
		{
			if (___parameterCount == 4)
			{
				// open
				typedef void (*FunctionPointerType) (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
			}
			else
			{
				// closed
				typedef void (*FunctionPointerType) (void*, SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
			}
		}
		else if (___parameterCount != 4)
		{
			// open
			if (il2cpp_codegen_method_is_virtual(targetMethod) && il2cpp_codegen_delegate_has_invoker((Il2CppDelegate*)__this))
			{
				if (il2cpp_codegen_method_is_generic_instance(targetMethod))
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						GenericInterfaceActionInvoker3< int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  >::Invoke(targetMethod, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
					else
						GenericVirtActionInvoker3< int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  >::Invoke(targetMethod, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
				}
				else
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						InterfaceActionInvoker3< int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), il2cpp_codegen_method_get_declaring_type(targetMethod), ___fromAction0, ___fromSource1, ___axis2, ___delta3);
					else
						VirtActionInvoker3< int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), ___fromAction0, ___fromSource1, ___axis2, ___delta3);
				}
			}
			else
			{
				if (targetThis == NULL && il2cpp_codegen_class_is_value_type(il2cpp_codegen_method_get_declaring_type(targetMethod)))
				{
					typedef void (*FunctionPointerType) (RuntimeObject*, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)((reinterpret_cast<RuntimeObject*>(&___fromSource1) - 1), ___axis2, ___delta3, targetMethod);
				}
				typedef void (*FunctionPointerType) (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
			}
		}
		else
		{
			// closed
			if (targetThis != NULL && il2cpp_codegen_method_is_virtual(targetMethod) && !il2cpp_codegen_object_is_of_sealed_type(targetThis) && il2cpp_codegen_delegate_has_invoker((Il2CppDelegate*)__this))
			{
				if (il2cpp_codegen_method_is_generic_instance(targetMethod))
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						GenericInterfaceActionInvoker4< SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  >::Invoke(targetMethod, targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
					else
						GenericVirtActionInvoker4< SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  >::Invoke(targetMethod, targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
				}
				else
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						InterfaceActionInvoker4< SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), il2cpp_codegen_method_get_declaring_type(targetMethod), targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
					else
						VirtActionInvoker4< SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
				}
			}
			else
			{
				if (targetThis == NULL && il2cpp_codegen_class_is_value_type(il2cpp_codegen_method_get_declaring_type(targetMethod)))
				{
					typedef void (*FunctionPointerType) (RuntimeObject*, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)((reinterpret_cast<RuntimeObject*>(___fromAction0) - 1), ___fromSource1, ___axis2, ___delta3, targetMethod);
				}
				if (targetThis == NULL)
				{
					typedef void (*FunctionPointerType) (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)(___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
				}
				else
				{
					typedef void (*FunctionPointerType) (void*, SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)(targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
				}
			}
		}
	}
}
// System.IAsyncResult Valve.VR.SteamVR_Action_Vector3_ChangeHandler::BeginInvoke(Valve.VR.SteamVR_Action_Vector3,Valve.VR.SteamVR_Input_Sources,UnityEngine.Vector3,UnityEngine.Vector3,System.AsyncCallback,System.Object)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RuntimeObject* ChangeHandler_BeginInvoke_mD94A911B751372C821E31CD6DD96566FFE44956E (ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * __this, SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * ___fromAction0, int32_t ___fromSource1, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___axis2, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___delta3, AsyncCallback_t3F3DA3BEDAEE81DD1D24125DF8EB30E85EE14DA4 * ___callback4, RuntimeObject * ___object5, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (ChangeHandler_BeginInvoke_mD94A911B751372C821E31CD6DD96566FFE44956E_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	void *__d_args[5] = {0};
	__d_args[0] = ___fromAction0;
	__d_args[1] = Box(SteamVR_Input_Sources_tCE41AA589FB3B9516BDE0DFABDCB4AAEA29528F7_il2cpp_TypeInfo_var, &___fromSource1);
	__d_args[2] = Box(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var, &___axis2);
	__d_args[3] = Box(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var, &___delta3);
	return (RuntimeObject*)il2cpp_codegen_delegate_begin_invoke((RuntimeDelegate*)__this, __d_args, (RuntimeDelegate*)___callback4, (RuntimeObject*)___object5);
}
// System.Void Valve.VR.SteamVR_Action_Vector3_ChangeHandler::EndInvoke(System.IAsyncResult)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void ChangeHandler_EndInvoke_m71741F7E6E54F22FD4FA3380765C142BB5C7FE4B (ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * __this, RuntimeObject* ___result0, const RuntimeMethod* method)
{
	il2cpp_codegen_delegate_end_invoke((Il2CppAsyncResult*) ___result0, 0);
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Void Valve.VR.SteamVR_Action_Vector3_UpdateHandler::.ctor(System.Object,System.IntPtr)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void UpdateHandler__ctor_m2D5DDD98B3936C0B986F4D645AFD6345A57B2D12 (UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * __this, RuntimeObject * ___object0, intptr_t ___method1, const RuntimeMethod* method)
{
	__this->set_method_ptr_0(il2cpp_codegen_get_method_pointer((RuntimeMethod*)___method1));
	__this->set_method_3(___method1);
	__this->set_m_target_2(___object0);
}
// System.Void Valve.VR.SteamVR_Action_Vector3_UpdateHandler::Invoke(Valve.VR.SteamVR_Action_Vector3,Valve.VR.SteamVR_Input_Sources,UnityEngine.Vector3,UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void UpdateHandler_Invoke_m7B6641AC506F248A3301DE33BD7518AFE35A6A59 (UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * __this, SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * ___fromAction0, int32_t ___fromSource1, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___axis2, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___delta3, const RuntimeMethod* method)
{
	DelegateU5BU5D_tDFCDEE2A6322F96C0FE49AF47E9ADB8C4B294E86* delegateArrayToInvoke = __this->get_delegates_11();
	Delegate_t** delegatesToInvoke;
	il2cpp_array_size_t length;
	if (delegateArrayToInvoke != NULL)
	{
		length = delegateArrayToInvoke->max_length;
		delegatesToInvoke = reinterpret_cast<Delegate_t**>(delegateArrayToInvoke->GetAddressAtUnchecked(0));
	}
	else
	{
		length = 1;
		delegatesToInvoke = reinterpret_cast<Delegate_t**>(&__this);
	}

	for (il2cpp_array_size_t i = 0; i < length; i++)
	{
		Delegate_t* currentDelegate = delegatesToInvoke[i];
		Il2CppMethodPointer targetMethodPointer = currentDelegate->get_method_ptr_0();
		RuntimeObject* targetThis = currentDelegate->get_m_target_2();
		RuntimeMethod* targetMethod = (RuntimeMethod*)(currentDelegate->get_method_3());
		if (!il2cpp_codegen_method_is_virtual(targetMethod))
		{
			il2cpp_codegen_raise_execution_engine_exception_if_method_is_not_found(targetMethod);
		}
		bool ___methodIsStatic = MethodIsStatic(targetMethod);
		int ___parameterCount = il2cpp_codegen_method_parameter_count(targetMethod);
		if (___methodIsStatic)
		{
			if (___parameterCount == 4)
			{
				// open
				typedef void (*FunctionPointerType) (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
			}
			else
			{
				// closed
				typedef void (*FunctionPointerType) (void*, SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
			}
		}
		else if (___parameterCount != 4)
		{
			// open
			if (il2cpp_codegen_method_is_virtual(targetMethod) && il2cpp_codegen_delegate_has_invoker((Il2CppDelegate*)__this))
			{
				if (il2cpp_codegen_method_is_generic_instance(targetMethod))
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						GenericInterfaceActionInvoker3< int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  >::Invoke(targetMethod, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
					else
						GenericVirtActionInvoker3< int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  >::Invoke(targetMethod, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
				}
				else
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						InterfaceActionInvoker3< int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), il2cpp_codegen_method_get_declaring_type(targetMethod), ___fromAction0, ___fromSource1, ___axis2, ___delta3);
					else
						VirtActionInvoker3< int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), ___fromAction0, ___fromSource1, ___axis2, ___delta3);
				}
			}
			else
			{
				if (targetThis == NULL && il2cpp_codegen_class_is_value_type(il2cpp_codegen_method_get_declaring_type(targetMethod)))
				{
					typedef void (*FunctionPointerType) (RuntimeObject*, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)((reinterpret_cast<RuntimeObject*>(&___fromSource1) - 1), ___axis2, ___delta3, targetMethod);
				}
				typedef void (*FunctionPointerType) (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , const RuntimeMethod*);
				((FunctionPointerType)targetMethodPointer)(___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
			}
		}
		else
		{
			// closed
			if (targetThis != NULL && il2cpp_codegen_method_is_virtual(targetMethod) && !il2cpp_codegen_object_is_of_sealed_type(targetThis) && il2cpp_codegen_delegate_has_invoker((Il2CppDelegate*)__this))
			{
				if (il2cpp_codegen_method_is_generic_instance(targetMethod))
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						GenericInterfaceActionInvoker4< SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  >::Invoke(targetMethod, targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
					else
						GenericVirtActionInvoker4< SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  >::Invoke(targetMethod, targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
				}
				else
				{
					if (il2cpp_codegen_method_is_interface_method(targetMethod))
						InterfaceActionInvoker4< SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), il2cpp_codegen_method_get_declaring_type(targetMethod), targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
					else
						VirtActionInvoker4< SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  >::Invoke(il2cpp_codegen_method_get_slot(targetMethod), targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3);
				}
			}
			else
			{
				if (targetThis == NULL && il2cpp_codegen_class_is_value_type(il2cpp_codegen_method_get_declaring_type(targetMethod)))
				{
					typedef void (*FunctionPointerType) (RuntimeObject*, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)((reinterpret_cast<RuntimeObject*>(___fromAction0) - 1), ___fromSource1, ___axis2, ___delta3, targetMethod);
				}
				if (targetThis == NULL)
				{
					typedef void (*FunctionPointerType) (SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)(___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
				}
				else
				{
					typedef void (*FunctionPointerType) (void*, SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *, int32_t, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 , const RuntimeMethod*);
					((FunctionPointerType)targetMethodPointer)(targetThis, ___fromAction0, ___fromSource1, ___axis2, ___delta3, targetMethod);
				}
			}
		}
	}
}
// System.IAsyncResult Valve.VR.SteamVR_Action_Vector3_UpdateHandler::BeginInvoke(Valve.VR.SteamVR_Action_Vector3,Valve.VR.SteamVR_Input_Sources,UnityEngine.Vector3,UnityEngine.Vector3,System.AsyncCallback,System.Object)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR RuntimeObject* UpdateHandler_BeginInvoke_mBFD7F08AC61DC5337F3BF6981E53E840CF89AC68 (UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * __this, SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * ___fromAction0, int32_t ___fromSource1, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___axis2, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___delta3, AsyncCallback_t3F3DA3BEDAEE81DD1D24125DF8EB30E85EE14DA4 * ___callback4, RuntimeObject * ___object5, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (UpdateHandler_BeginInvoke_mBFD7F08AC61DC5337F3BF6981E53E840CF89AC68_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	void *__d_args[5] = {0};
	__d_args[0] = ___fromAction0;
	__d_args[1] = Box(SteamVR_Input_Sources_tCE41AA589FB3B9516BDE0DFABDCB4AAEA29528F7_il2cpp_TypeInfo_var, &___fromSource1);
	__d_args[2] = Box(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var, &___axis2);
	__d_args[3] = Box(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var, &___delta3);
	return (RuntimeObject*)il2cpp_codegen_delegate_begin_invoke((RuntimeDelegate*)__this, __d_args, (RuntimeDelegate*)___callback4, (RuntimeObject*)___object5);
}
// System.Void Valve.VR.SteamVR_Action_Vector3_UpdateHandler::EndInvoke(System.IAsyncResult)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void UpdateHandler_EndInvoke_mD6474A857FB2B1EC2501BCAD0D653E49AFA3DB30 (UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * __this, RuntimeObject* ___result0, const RuntimeMethod* method)
{
	il2cpp_codegen_delegate_end_invoke((Il2CppAsyncResult*) ___result0, 0);
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Winvalid-offsetof"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::add_onAxis(Valve.VR.SteamVR_Action_Vector3_AxisHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_add_onAxis_m09DA9894C1E442EB2D92595D083CD574E287150A (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_add_onAxis_m09DA9894C1E442EB2D92595D083CD574E287150A_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * V_0 = NULL;
	AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * V_1 = NULL;
	AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_add_onAxis_m09DA9894C1E442EB2D92595D083CD574E287150A_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * L_0 = __this->get_onAxis_12();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * L_1 = V_0;
		V_1 = L_1;
		AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * L_2 = V_1;
		AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Combine_mC25D2F7DECAFBA6D9A2F9EBA8A77063F0658ECF1(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 *)CastclassSealed((RuntimeObject*)L_4, AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779_il2cpp_TypeInfo_var));
		AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 ** L_5 = __this->get_address_of_onAxis_12();
		AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * L_6 = V_2;
		AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * L_7 = V_1;
		AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * L_8 = InterlockedCompareExchangeImpl<AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 *>((AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 **)L_5, L_6, L_7);
		V_0 = L_8;
		AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * L_9 = V_0;
		AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * L_10 = V_1;
		if ((!(((RuntimeObject*)(AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 *)L_9) == ((RuntimeObject*)(AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::remove_onAxis(Valve.VR.SteamVR_Action_Vector3_AxisHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_remove_onAxis_m0E77E9C566405FABBE20C7120A16AE551AC4B70C (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_remove_onAxis_m0E77E9C566405FABBE20C7120A16AE551AC4B70C_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * V_0 = NULL;
	AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * V_1 = NULL;
	AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_remove_onAxis_m0E77E9C566405FABBE20C7120A16AE551AC4B70C_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * L_0 = __this->get_onAxis_12();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * L_1 = V_0;
		V_1 = L_1;
		AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * L_2 = V_1;
		AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Remove_m0B0DB7D1B3AF96B71AFAA72BA0EFE32FBBC2932D(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 *)CastclassSealed((RuntimeObject*)L_4, AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779_il2cpp_TypeInfo_var));
		AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 ** L_5 = __this->get_address_of_onAxis_12();
		AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * L_6 = V_2;
		AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * L_7 = V_1;
		AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * L_8 = InterlockedCompareExchangeImpl<AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 *>((AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 **)L_5, L_6, L_7);
		V_0 = L_8;
		AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * L_9 = V_0;
		AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * L_10 = V_1;
		if ((!(((RuntimeObject*)(AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 *)L_9) == ((RuntimeObject*)(AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::add_onActiveChange(Valve.VR.SteamVR_Action_Vector3_ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_add_onActiveChange_m01C18C6CC07A9423AACB55F009E6562493049DA0 (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_add_onActiveChange_m01C18C6CC07A9423AACB55F009E6562493049DA0_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * V_0 = NULL;
	ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * V_1 = NULL;
	ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_add_onActiveChange_m01C18C6CC07A9423AACB55F009E6562493049DA0_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_0 = __this->get_onActiveChange_13();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_1 = V_0;
		V_1 = L_1;
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_2 = V_1;
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Combine_mC25D2F7DECAFBA6D9A2F9EBA8A77063F0658ECF1(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 *)CastclassSealed((RuntimeObject*)L_4, ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652_il2cpp_TypeInfo_var));
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 ** L_5 = __this->get_address_of_onActiveChange_13();
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_6 = V_2;
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_7 = V_1;
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_8 = InterlockedCompareExchangeImpl<ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 *>((ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 **)L_5, L_6, L_7);
		V_0 = L_8;
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_9 = V_0;
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_10 = V_1;
		if ((!(((RuntimeObject*)(ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 *)L_9) == ((RuntimeObject*)(ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::remove_onActiveChange(Valve.VR.SteamVR_Action_Vector3_ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_remove_onActiveChange_mEFAADD238B7127C347FCBF4D850FBD7664BEFD95 (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_remove_onActiveChange_mEFAADD238B7127C347FCBF4D850FBD7664BEFD95_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * V_0 = NULL;
	ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * V_1 = NULL;
	ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_remove_onActiveChange_mEFAADD238B7127C347FCBF4D850FBD7664BEFD95_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_0 = __this->get_onActiveChange_13();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_1 = V_0;
		V_1 = L_1;
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_2 = V_1;
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Remove_m0B0DB7D1B3AF96B71AFAA72BA0EFE32FBBC2932D(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 *)CastclassSealed((RuntimeObject*)L_4, ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652_il2cpp_TypeInfo_var));
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 ** L_5 = __this->get_address_of_onActiveChange_13();
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_6 = V_2;
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_7 = V_1;
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_8 = InterlockedCompareExchangeImpl<ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 *>((ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 **)L_5, L_6, L_7);
		V_0 = L_8;
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_9 = V_0;
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_10 = V_1;
		if ((!(((RuntimeObject*)(ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 *)L_9) == ((RuntimeObject*)(ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::add_onActiveBindingChange(Valve.VR.SteamVR_Action_Vector3_ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_add_onActiveBindingChange_mC84803E228A14E7891F4B456DC5A102E2ED3956A (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_add_onActiveBindingChange_mC84803E228A14E7891F4B456DC5A102E2ED3956A_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * V_0 = NULL;
	ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * V_1 = NULL;
	ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_add_onActiveBindingChange_mC84803E228A14E7891F4B456DC5A102E2ED3956A_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_0 = __this->get_onActiveBindingChange_14();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_1 = V_0;
		V_1 = L_1;
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_2 = V_1;
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Combine_mC25D2F7DECAFBA6D9A2F9EBA8A77063F0658ECF1(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 *)CastclassSealed((RuntimeObject*)L_4, ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652_il2cpp_TypeInfo_var));
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 ** L_5 = __this->get_address_of_onActiveBindingChange_14();
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_6 = V_2;
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_7 = V_1;
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_8 = InterlockedCompareExchangeImpl<ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 *>((ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 **)L_5, L_6, L_7);
		V_0 = L_8;
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_9 = V_0;
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_10 = V_1;
		if ((!(((RuntimeObject*)(ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 *)L_9) == ((RuntimeObject*)(ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::remove_onActiveBindingChange(Valve.VR.SteamVR_Action_Vector3_ActiveChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_remove_onActiveBindingChange_m823695F9961EF46DB2811DA5B8E68567582C639B (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_remove_onActiveBindingChange_m823695F9961EF46DB2811DA5B8E68567582C639B_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * V_0 = NULL;
	ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * V_1 = NULL;
	ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_remove_onActiveBindingChange_m823695F9961EF46DB2811DA5B8E68567582C639B_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_0 = __this->get_onActiveBindingChange_14();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_1 = V_0;
		V_1 = L_1;
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_2 = V_1;
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Remove_m0B0DB7D1B3AF96B71AFAA72BA0EFE32FBBC2932D(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 *)CastclassSealed((RuntimeObject*)L_4, ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652_il2cpp_TypeInfo_var));
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 ** L_5 = __this->get_address_of_onActiveBindingChange_14();
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_6 = V_2;
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_7 = V_1;
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_8 = InterlockedCompareExchangeImpl<ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 *>((ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 **)L_5, L_6, L_7);
		V_0 = L_8;
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_9 = V_0;
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_10 = V_1;
		if ((!(((RuntimeObject*)(ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 *)L_9) == ((RuntimeObject*)(ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::add_onChange(Valve.VR.SteamVR_Action_Vector3_ChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_add_onChange_m69C7AFE22DFEF6EE8205740927730B4793ABC16D (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_add_onChange_m69C7AFE22DFEF6EE8205740927730B4793ABC16D_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * V_0 = NULL;
	ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * V_1 = NULL;
	ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_add_onChange_m69C7AFE22DFEF6EE8205740927730B4793ABC16D_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * L_0 = __this->get_onChange_15();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * L_1 = V_0;
		V_1 = L_1;
		ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * L_2 = V_1;
		ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Combine_mC25D2F7DECAFBA6D9A2F9EBA8A77063F0658ECF1(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B *)CastclassSealed((RuntimeObject*)L_4, ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B_il2cpp_TypeInfo_var));
		ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B ** L_5 = __this->get_address_of_onChange_15();
		ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * L_6 = V_2;
		ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * L_7 = V_1;
		ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * L_8 = InterlockedCompareExchangeImpl<ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B *>((ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B **)L_5, L_6, L_7);
		V_0 = L_8;
		ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * L_9 = V_0;
		ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * L_10 = V_1;
		if ((!(((RuntimeObject*)(ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B *)L_9) == ((RuntimeObject*)(ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::remove_onChange(Valve.VR.SteamVR_Action_Vector3_ChangeHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_remove_onChange_m2C757953F88F1D3FCAD98F0F7D0C4EEDCE3220DB (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_remove_onChange_m2C757953F88F1D3FCAD98F0F7D0C4EEDCE3220DB_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * V_0 = NULL;
	ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * V_1 = NULL;
	ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_remove_onChange_m2C757953F88F1D3FCAD98F0F7D0C4EEDCE3220DB_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * L_0 = __this->get_onChange_15();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * L_1 = V_0;
		V_1 = L_1;
		ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * L_2 = V_1;
		ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Remove_m0B0DB7D1B3AF96B71AFAA72BA0EFE32FBBC2932D(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B *)CastclassSealed((RuntimeObject*)L_4, ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B_il2cpp_TypeInfo_var));
		ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B ** L_5 = __this->get_address_of_onChange_15();
		ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * L_6 = V_2;
		ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * L_7 = V_1;
		ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * L_8 = InterlockedCompareExchangeImpl<ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B *>((ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B **)L_5, L_6, L_7);
		V_0 = L_8;
		ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * L_9 = V_0;
		ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * L_10 = V_1;
		if ((!(((RuntimeObject*)(ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B *)L_9) == ((RuntimeObject*)(ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::add_onUpdate(Valve.VR.SteamVR_Action_Vector3_UpdateHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_add_onUpdate_mE3337890745CBF20D96EB63A6241FB545E8D7DFC (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_add_onUpdate_mE3337890745CBF20D96EB63A6241FB545E8D7DFC_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * V_0 = NULL;
	UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * V_1 = NULL;
	UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_add_onUpdate_mE3337890745CBF20D96EB63A6241FB545E8D7DFC_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * L_0 = __this->get_onUpdate_16();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * L_1 = V_0;
		V_1 = L_1;
		UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * L_2 = V_1;
		UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Combine_mC25D2F7DECAFBA6D9A2F9EBA8A77063F0658ECF1(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 *)CastclassSealed((RuntimeObject*)L_4, UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75_il2cpp_TypeInfo_var));
		UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 ** L_5 = __this->get_address_of_onUpdate_16();
		UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * L_6 = V_2;
		UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * L_7 = V_1;
		UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * L_8 = InterlockedCompareExchangeImpl<UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 *>((UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 **)L_5, L_6, L_7);
		V_0 = L_8;
		UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * L_9 = V_0;
		UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * L_10 = V_1;
		if ((!(((RuntimeObject*)(UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 *)L_9) == ((RuntimeObject*)(UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::remove_onUpdate(Valve.VR.SteamVR_Action_Vector3_UpdateHandler)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_remove_onUpdate_mE4D9472A97BDCB264B875B8AFEB5E1C19187FF07 (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_remove_onUpdate_mE4D9472A97BDCB264B875B8AFEB5E1C19187FF07_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * V_0 = NULL;
	UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * V_1 = NULL;
	UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * V_2 = NULL;
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_remove_onUpdate_mE4D9472A97BDCB264B875B8AFEB5E1C19187FF07_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_PAUSE_POINT;
	{
		UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * L_0 = __this->get_onUpdate_16();
		V_0 = L_0;
	}

IL_0007:
	{
		CHECK_PAUSE_POINT;
		UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * L_1 = V_0;
		V_1 = L_1;
		UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * L_2 = V_1;
		UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * L_3 = ___value0;
		Delegate_t * L_4 = Delegate_Remove_m0B0DB7D1B3AF96B71AFAA72BA0EFE32FBBC2932D(L_2, L_3, /*hidden argument*/NULL);
		V_2 = ((UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 *)CastclassSealed((RuntimeObject*)L_4, UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75_il2cpp_TypeInfo_var));
		UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 ** L_5 = __this->get_address_of_onUpdate_16();
		UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * L_6 = V_2;
		UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * L_7 = V_1;
		UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * L_8 = InterlockedCompareExchangeImpl<UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 *>((UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 **)L_5, L_6, L_7);
		V_0 = L_8;
		UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * L_9 = V_0;
		UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * L_10 = V_1;
		if ((!(((RuntimeObject*)(UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 *)L_9) == ((RuntimeObject*)(UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 *)L_10))))
		{
			goto IL_0007;
		}
	}
	{
		return;
	}
}
// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Vector3_Source::get_axis()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Vector3_Source_get_axis_m0F9A2BF33B9BC6BF5774EC4D7E2EE2B474B28E99 (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_get_axis_m0F9A2BF33B9BC6BF5774EC4D7E2EE2B474B28E99_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_get_axis_m0F9A2BF33B9BC6BF5774EC4D7E2EE2B474B28E99_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8607));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8608));
	{
		// public Vector3 axis { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8609));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = __this->get_U3CaxisU3Ek__BackingField_17();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::set_axis(UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_set_axis_m8D6C550660D5D6EF3AFC2376B964204B4B26C0DF (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_set_axis_m8D6C550660D5D6EF3AFC2376B964204B4B26C0DF_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_set_axis_m8D6C550660D5D6EF3AFC2376B964204B4B26C0DF_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8610));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8611));
	{
		// public Vector3 axis { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8612));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = ___value0;
		__this->set_U3CaxisU3Ek__BackingField_17(L_0);
		return;
	}
}
// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Vector3_Source::get_lastAxis()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Vector3_Source_get_lastAxis_mB5307EA9C41A76639B02A5FB7C775E14C7E8BE8E (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_get_lastAxis_mB5307EA9C41A76639B02A5FB7C775E14C7E8BE8E_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_get_lastAxis_mB5307EA9C41A76639B02A5FB7C775E14C7E8BE8E_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8613));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8614));
	{
		// public Vector3 lastAxis { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8615));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = __this->get_U3ClastAxisU3Ek__BackingField_18();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::set_lastAxis(UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_set_lastAxis_m2DA773CD84278414BB2D77495722E7E288C2727C (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_set_lastAxis_m2DA773CD84278414BB2D77495722E7E288C2727C_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_set_lastAxis_m2DA773CD84278414BB2D77495722E7E288C2727C_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8616));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8617));
	{
		// public Vector3 lastAxis { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8618));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = ___value0;
		__this->set_U3ClastAxisU3Ek__BackingField_18(L_0);
		return;
	}
}
// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Vector3_Source::get_delta()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Vector3_Source_get_delta_m4B3DA30643F7D02E80B5AAC93D5BF6D730305BC0 (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_get_delta_m4B3DA30643F7D02E80B5AAC93D5BF6D730305BC0_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_get_delta_m4B3DA30643F7D02E80B5AAC93D5BF6D730305BC0_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8619));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8620));
	{
		// public Vector3 delta { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8621));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = __this->get_U3CdeltaU3Ek__BackingField_19();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::set_delta(UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_set_delta_m425C84C1DE5AD8F12F9F04C1E4C78452C580FE2B (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_set_delta_m425C84C1DE5AD8F12F9F04C1E4C78452C580FE2B_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_set_delta_m425C84C1DE5AD8F12F9F04C1E4C78452C580FE2B_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8622));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8623));
	{
		// public Vector3 delta { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8624));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = ___value0;
		__this->set_U3CdeltaU3Ek__BackingField_19(L_0);
		return;
	}
}
// UnityEngine.Vector3 Valve.VR.SteamVR_Action_Vector3_Source::get_lastDelta()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Vector3_Source_get_lastDelta_mBCB31D8D0D5F3B64784F01EAFFC7311F1E07B467 (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_get_lastDelta_mBCB31D8D0D5F3B64784F01EAFFC7311F1E07B467_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_get_lastDelta_mBCB31D8D0D5F3B64784F01EAFFC7311F1E07B467_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8625));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8626));
	{
		// public Vector3 lastDelta { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8627));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = __this->get_U3ClastDeltaU3Ek__BackingField_20();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::set_lastDelta(UnityEngine.Vector3)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_set_lastDelta_mD5A541A52EC64B8BF321E3B9778E37647A968DD1 (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_set_lastDelta_mD5A541A52EC64B8BF321E3B9778E37647A968DD1_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_set_lastDelta_mD5A541A52EC64B8BF321E3B9778E37647A968DD1_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8628));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8629));
	{
		// public Vector3 lastDelta { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8630));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = ___value0;
		__this->set_U3ClastDeltaU3Ek__BackingField_20(L_0);
		return;
	}
}
// System.Boolean Valve.VR.SteamVR_Action_Vector3_Source::get_changed()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Vector3_Source_get_changed_m27FD9BF9FC97E30BC83073FFEDC2E54AF76BC0DF (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_get_changed_m27FD9BF9FC97E30BC83073FFEDC2E54AF76BC0DF_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_get_changed_m27FD9BF9FC97E30BC83073FFEDC2E54AF76BC0DF_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8631));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8632));
	{
		// public override bool changed { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8633));
		bool L_0 = __this->get_U3CchangedU3Ek__BackingField_21();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::set_changed(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_set_changed_m0E8E663AA33C8749AE0B13926E8785921D5630A3 (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, bool ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_set_changed_m0E8E663AA33C8749AE0B13926E8785921D5630A3_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_set_changed_m0E8E663AA33C8749AE0B13926E8785921D5630A3_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8634));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8635));
	{
		// public override bool changed { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8636));
		bool L_0 = ___value0;
		__this->set_U3CchangedU3Ek__BackingField_21(L_0);
		return;
	}
}
// System.Boolean Valve.VR.SteamVR_Action_Vector3_Source::get_lastChanged()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Vector3_Source_get_lastChanged_m76C887902C2FC55C44CC7C42CD159A2FED2103D8 (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_get_lastChanged_m76C887902C2FC55C44CC7C42CD159A2FED2103D8_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_get_lastChanged_m76C887902C2FC55C44CC7C42CD159A2FED2103D8_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8637));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8638));
	{
		// public override bool lastChanged { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8639));
		bool L_0 = __this->get_U3ClastChangedU3Ek__BackingField_22();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::set_lastChanged(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_set_lastChanged_m3DF8DAAAB166AEC44452CC51D43F7602544C77AB (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, bool ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_set_lastChanged_m3DF8DAAAB166AEC44452CC51D43F7602544C77AB_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_set_lastChanged_m3DF8DAAAB166AEC44452CC51D43F7602544C77AB_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8640));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8641));
	{
		// public override bool lastChanged { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8642));
		bool L_0 = ___value0;
		__this->set_U3ClastChangedU3Ek__BackingField_22(L_0);
		return;
	}
}
// System.UInt64 Valve.VR.SteamVR_Action_Vector3_Source::get_activeOrigin()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR uint64_t SteamVR_Action_Vector3_Source_get_activeOrigin_m8A7827E01B77FAAC402DF450D20DC23430ED6B38 (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_get_activeOrigin_m8A7827E01B77FAAC402DF450D20DC23430ED6B38_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	uint64_t V_1 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_get_activeOrigin_m8A7827E01B77FAAC402DF450D20DC23430ED6B38_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8643));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8644));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8645));
		// if (active)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8646));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8651));
		bool L_0 = VirtFuncInvoker0< bool >::Invoke(12 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_active() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8651));
		V_0 = L_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8647));
		bool L_1 = V_0;
		if (!L_1)
		{
			goto IL_0019;
		}
	}
	{
		// return actionData.activeOrigin;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8648));
		InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * L_2 = __this->get_address_of_actionData_24();
		uint64_t L_3 = L_2->get_activeOrigin_1();
		V_1 = L_3;
		goto IL_001e;
	}

IL_0019:
	{
		// return 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8649));
		V_1 = (((int64_t)((int64_t)0)));
		goto IL_001e;
	}

IL_001e:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8650));
		uint64_t L_4 = V_1;
		return L_4;
	}
}
// System.UInt64 Valve.VR.SteamVR_Action_Vector3_Source::get_lastActiveOrigin()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR uint64_t SteamVR_Action_Vector3_Source_get_lastActiveOrigin_mAA8545BDB78F99D6E9A1487FE19BEEEE9879B44B (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_get_lastActiveOrigin_mAA8545BDB78F99D6E9A1487FE19BEEEE9879B44B_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	uint64_t V_0 = 0;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_get_lastActiveOrigin_mAA8545BDB78F99D6E9A1487FE19BEEEE9879B44B_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8652));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8653));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8654));
		// public override ulong lastActiveOrigin { get { return lastActionData.activeOrigin; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8655));
		InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * L_0 = __this->get_address_of_lastActionData_25();
		uint64_t L_1 = L_0->get_activeOrigin_1();
		V_0 = L_1;
		goto IL_000f;
	}

IL_000f:
	{
		// public override ulong lastActiveOrigin { get { return lastActionData.activeOrigin; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8656));
		uint64_t L_2 = V_0;
		return L_2;
	}
}
// System.Boolean Valve.VR.SteamVR_Action_Vector3_Source::get_active()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Vector3_Source_get_active_mFC75630249C9BC675AFAFF01D5946AFFDF427C03 (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_get_active_mFC75630249C9BC675AFAFF01D5946AFFDF427C03_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_get_active_mFC75630249C9BC675AFAFF01D5946AFFDF427C03_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8657));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8658));
	int32_t G_B3_0 = 0;
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8659));
		// public override bool active { get { return activeBinding && action.actionSet.IsActive(inputSource); } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8660));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8662));
		bool L_0 = VirtFuncInvoker0< bool >::Invoke(13 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_activeBinding() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8662));
		if (!L_0)
		{
			goto IL_0021;
		}
	}
	{
		SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 * L_1 = ((SteamVR_Action_Source_t9D7428CDE39924074518EE6233D9A4FAB0C33CB0 *)__this)->get_action_2();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8663));
		NullCheck(L_1);
		SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6 * L_2 = VirtFuncInvoker0< SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6 * >::Invoke(19 /* Valve.VR.SteamVR_ActionSet Valve.VR.SteamVR_Action::get_actionSet() */, L_1);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8663));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8664));
		int32_t L_3 = SteamVR_Action_Source_get_inputSource_mAA1928183BB06E5C8CF950F65BA80635C25535D4_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8664));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8665));
		NullCheck(L_2);
		bool L_4 = SteamVR_ActionSet_IsActive_m9909588615E0191F96E971182B8A52F864F39BEB(L_2, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8665));
		G_B3_0 = ((int32_t)(L_4));
		goto IL_0022;
	}

IL_0021:
	{
		G_B3_0 = 0;
	}

IL_0022:
	{
		V_0 = (bool)G_B3_0;
		goto IL_0025;
	}

IL_0025:
	{
		// public override bool active { get { return activeBinding && action.actionSet.IsActive(inputSource); } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8661));
		bool L_5 = V_0;
		return L_5;
	}
}
// System.Boolean Valve.VR.SteamVR_Action_Vector3_Source::get_activeBinding()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Vector3_Source_get_activeBinding_mAD816DEB4089A3360C6C9CCD52B2FA22EC57D64D (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_get_activeBinding_mAD816DEB4089A3360C6C9CCD52B2FA22EC57D64D_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_get_activeBinding_mAD816DEB4089A3360C6C9CCD52B2FA22EC57D64D_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8666));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8667));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8668));
		// public override bool activeBinding { get { return actionData.bActive; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8669));
		InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * L_0 = __this->get_address_of_actionData_24();
		bool L_1 = L_0->get_bActive_0();
		V_0 = L_1;
		goto IL_000f;
	}

IL_000f:
	{
		// public override bool activeBinding { get { return actionData.bActive; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8670));
		bool L_2 = V_0;
		return L_2;
	}
}
// System.Boolean Valve.VR.SteamVR_Action_Vector3_Source::get_lastActive()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Vector3_Source_get_lastActive_mAAF066B6810523B948D5DD1C055E9C11BD9FC8E1 (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_get_lastActive_mAAF066B6810523B948D5DD1C055E9C11BD9FC8E1_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_get_lastActive_mAAF066B6810523B948D5DD1C055E9C11BD9FC8E1_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8671));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8672));
	{
		// public override bool lastActive { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8673));
		bool L_0 = __this->get_U3ClastActiveU3Ek__BackingField_23();
		return L_0;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::set_lastActive(System.Boolean)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_set_lastActive_mD6174B8C50D61A9C1AC50341B1AC5F7C565B97CE (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, bool ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_set_lastActive_mD6174B8C50D61A9C1AC50341B1AC5F7C565B97CE_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_set_lastActive_mD6174B8C50D61A9C1AC50341B1AC5F7C565B97CE_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8674));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8675));
	{
		// public override bool lastActive { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8676));
		bool L_0 = ___value0;
		__this->set_U3ClastActiveU3Ek__BackingField_23(L_0);
		return;
	}
}
// System.Boolean Valve.VR.SteamVR_Action_Vector3_Source::get_lastActiveBinding()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR bool SteamVR_Action_Vector3_Source_get_lastActiveBinding_m22970E1C3A3451045F5EDDB889E90A8D7D9E3EE9 (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_get_lastActiveBinding_m22970E1C3A3451045F5EDDB889E90A8D7D9E3EE9_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_get_lastActiveBinding_m22970E1C3A3451045F5EDDB889E90A8D7D9E3EE9_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8677));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8678));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8679));
		// public override bool lastActiveBinding { get { return lastActionData.bActive; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8680));
		InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * L_0 = __this->get_address_of_lastActionData_25();
		bool L_1 = L_0->get_bActive_0();
		V_0 = L_1;
		goto IL_000f;
	}

IL_000f:
	{
		// public override bool lastActiveBinding { get { return lastActionData.bActive; } }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8681));
		bool L_2 = V_0;
		return L_2;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::Preinitialize(Valve.VR.SteamVR_Action,Valve.VR.SteamVR_Input_Sources)
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_Preinitialize_m4F993EE6B1E88BC3A4162D8C989D5E8B7FD3F286 (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 * ___wrappingAction0, int32_t ___forInputSource1, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_Preinitialize_m4F993EE6B1E88BC3A4162D8C989D5E8B7FD3F286_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___wrappingAction0), (&___forInputSource1));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_Preinitialize_m4F993EE6B1E88BC3A4162D8C989D5E8B7FD3F286_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8682));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8683));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8684));
		// base.Preinitialize(wrappingAction, forInputSource);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8685));
		SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 * L_0 = ___wrappingAction0;
		int32_t L_1 = ___forInputSource1;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8688));
		SteamVR_Action_Source_Preinitialize_mD54CBA24E4881B8742430B3EDF16283316305913(__this, L_0, L_1, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8688));
		// vector3Action = (SteamVR_Action_Vector3)wrappingAction;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8686));
		SteamVR_Action_t272895E0F3F361D1CB8C4560B42CC28B7861C734 * L_2 = ___wrappingAction0;
		__this->set_vector3Action_26(((SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 *)CastclassClass((RuntimeObject*)L_2, SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9_il2cpp_TypeInfo_var)));
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8687));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::Initialize()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_Initialize_mF6083AADD5357032AE31D4496681462FBC9379AB (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_Initialize_mF6083AADD5357032AE31D4496681462FBC9379AB_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	bool V_0 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_Initialize_mF6083AADD5357032AE31D4496681462FBC9379AB_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8689));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8690));
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8691));
		// base.Initialize();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8692));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8697));
		SteamVR_Action_In_Source_Initialize_m8CC254F78B69011CCE42C3E64A38B481FEC5F795(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8697));
		// if (actionData_size == 0)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8693));
		IL2CPP_RUNTIME_CLASS_INIT(SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90_il2cpp_TypeInfo_var);
		uint32_t L_0 = ((SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90_StaticFields*)il2cpp_codegen_static_fields_for(SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90_il2cpp_TypeInfo_var))->get_actionData_size_10();
		V_0 = (bool)((((int32_t)L_0) == ((int32_t)0))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8694));
		bool L_1 = V_0;
		if (!L_1)
		{
			goto IL_0028;
		}
	}
	{
		// actionData_size = (uint)Marshal.SizeOf(typeof(InputAnalogActionData_t));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8695));
		RuntimeTypeHandle_t7B542280A22F0EC4EAC2061C29178845847A8B2D  L_2 = { reinterpret_cast<intptr_t> (InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C_0_0_0_var) };
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8698));
		IL2CPP_RUNTIME_CLASS_INIT(Type_t_il2cpp_TypeInfo_var);
		Type_t * L_3 = Type_GetTypeFromHandle_m9DC58ADF0512987012A8A016FB64B068F3B1AFF6(L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8698));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8699));
		IL2CPP_RUNTIME_CLASS_INIT(Marshal_tC795CE9CC2FFBA41EDB1AC1C0FEC04607DFA8A40_il2cpp_TypeInfo_var);
		int32_t L_4 = Marshal_SizeOf_m4F7DA827FA7A720395E6FDD2ABE78D4B00D43130(L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8699));
		IL2CPP_RUNTIME_CLASS_INIT(SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90_il2cpp_TypeInfo_var);
		((SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90_StaticFields*)il2cpp_codegen_static_fields_for(SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90_il2cpp_TypeInfo_var))->set_actionData_size_10(L_4);
	}

IL_0028:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8696));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::UpdateValue()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_UpdateValue_m740BBE6FBE4887C46BCBA55A25D58A7EF5AE2171 (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_UpdateValue_m740BBE6FBE4887C46BCBA55A25D58A7EF5AE2171_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	int32_t V_0 = 0;
	bool V_1 = false;
	uint64_t V_2 = 0;
	bool V_3 = false;
	bool V_4 = false;
	Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  V_5;
	memset((&V_5), 0, sizeof(V_5));
	bool V_6 = false;
	bool V_7 = false;
	bool V_8 = false;
	bool V_9 = false;
	bool V_10 = false;
	bool V_11 = false;
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_LOCALS(methodExecutionContextLocals, (&V_0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_UpdateValue_m740BBE6FBE4887C46BCBA55A25D58A7EF5AE2171_RuntimeMethod_var, methodExecutionContextThis, NULL, methodExecutionContextLocals);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8700));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8701));
	int32_t G_B17_0 = 0;
	int32_t G_B22_0 = 0;
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8702));
		// lastActionData = actionData;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8703));
		InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C  L_0 = __this->get_actionData_24();
		__this->set_lastActionData_25(L_0);
		// lastActive = active;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8704));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8747));
		bool L_1 = VirtFuncInvoker0< bool >::Invoke(12 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_active() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8747));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8748));
		VirtActionInvoker1< bool >::Invoke(15 /* System.Void Valve.VR.SteamVR_Action_Source::set_lastActive(System.Boolean) */, __this, L_1);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8748));
		// lastAxis = axis;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8705));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8749));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_2 = SteamVR_Action_Vector3_Source_get_axis_m0F9A2BF33B9BC6BF5774EC4D7E2EE2B474B28E99_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8749));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8750));
		SteamVR_Action_Vector3_Source_set_lastAxis_m2DA773CD84278414BB2D77495722E7E288C2727C_inline(__this, L_2, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8750));
		// lastDelta = delta;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8706));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8751));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_3 = SteamVR_Action_Vector3_Source_get_delta_m4B3DA30643F7D02E80B5AAC93D5BF6D730305BC0_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8751));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8752));
		SteamVR_Action_Vector3_Source_set_lastDelta_mD5A541A52EC64B8BF321E3B9778E37647A968DD1_inline(__this, L_3, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8752));
		// EVRInputError err = OpenVR.Input.GetAnalogActionData(handle, ref actionData, actionData_size, SteamVR_Input_Source.GetHandle(inputSource));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8707));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8753));
		IL2CPP_RUNTIME_CLASS_INIT(OpenVR_tE75A98955EC4AA4B219CE822AA43E79E4CB99DB3_il2cpp_TypeInfo_var);
		CVRInput_t2BE4417A3C1EA0C6CF647B0706BF37F886CE599B * L_4 = OpenVR_get_Input_m904FD790D785E944EE58513F589E862530386414(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8753));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8754));
		uint64_t L_5 = SteamVR_Action_Source_get_handle_mE4C63F9ADB5ACA5E72265B62C0908ACF8EF73A01(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8754));
		InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * L_6 = __this->get_address_of_actionData_24();
		IL2CPP_RUNTIME_CLASS_INIT(SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90_il2cpp_TypeInfo_var);
		uint32_t L_7 = ((SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90_StaticFields*)il2cpp_codegen_static_fields_for(SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90_il2cpp_TypeInfo_var))->get_actionData_size_10();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8755));
		int32_t L_8 = SteamVR_Action_Source_get_inputSource_mAA1928183BB06E5C8CF950F65BA80635C25535D4_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8755));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8756));
		IL2CPP_RUNTIME_CLASS_INIT(SteamVR_Input_Source_tAFDB40851F8E134E08DD2DD0BC1C1770705E81D0_il2cpp_TypeInfo_var);
		uint64_t L_9 = SteamVR_Input_Source_GetHandle_mEA0F6E33E3CB937C11859B35CDB283523240E185(L_8, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8756));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8757));
		NullCheck(L_4);
		int32_t L_10 = CVRInput_GetAnalogActionData_m363EF49EA0485B0A4FF93C37842AC2CF8D21041A(L_4, L_5, (InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C *)L_6, L_7, L_9, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8757));
		V_0 = L_10;
		// if (err != EVRInputError.None)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8708));
		int32_t L_11 = V_0;
		V_1 = (bool)((!(((uint32_t)L_11) <= ((uint32_t)0)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8709));
		bool L_12 = V_1;
		if (!L_12)
		{
			goto IL_00b6;
		}
	}
	{
		// Debug.LogError("<b>[SteamVR]</b> GetAnalogActionData error (" + fullPath + "): " + err.ToString() + " handle: " + handle.ToString());
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8710));
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_13 = (StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E*)(StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E*)SZArrayNew(StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E_il2cpp_TypeInfo_var, (uint32_t)6);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_14 = L_13;
		NullCheck(L_14);
		ArrayElementTypeCheck (L_14, _stringLiteralAC897ED588F0446677581414C46F231807AB2556);
		(L_14)->SetAt(static_cast<il2cpp_array_size_t>(0), (String_t*)_stringLiteralAC897ED588F0446677581414C46F231807AB2556);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_15 = L_14;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8758));
		String_t* L_16 = SteamVR_Action_Source_get_fullPath_mB0C33E6C1B4F91E908236055FFAE027ECB3ED996(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8758));
		NullCheck(L_15);
		ArrayElementTypeCheck (L_15, L_16);
		(L_15)->SetAt(static_cast<il2cpp_array_size_t>(1), (String_t*)L_16);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_17 = L_15;
		NullCheck(L_17);
		ArrayElementTypeCheck (L_17, _stringLiteralE6D56E05F32996CA7E5AE21BC90D49044C0BF356);
		(L_17)->SetAt(static_cast<il2cpp_array_size_t>(2), (String_t*)_stringLiteralE6D56E05F32996CA7E5AE21BC90D49044C0BF356);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_18 = L_17;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8759));
		RuntimeObject * L_19 = Box(EVRInputError_tC8741BE3044407E8FA26F282526B259D93DBF22F_il2cpp_TypeInfo_var, (&V_0));
		NullCheck(L_19);
		String_t* L_20 = VirtFuncInvoker0< String_t* >::Invoke(3 /* System.String System.Object::ToString() */, L_19);
		V_0 = *(int32_t*)UnBox(L_19);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8759));
		NullCheck(L_18);
		ArrayElementTypeCheck (L_18, L_20);
		(L_18)->SetAt(static_cast<il2cpp_array_size_t>(3), (String_t*)L_20);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_21 = L_18;
		NullCheck(L_21);
		ArrayElementTypeCheck (L_21, _stringLiteral18B39452A606090B97AA8D84240CC83BE3E5D62B);
		(L_21)->SetAt(static_cast<il2cpp_array_size_t>(4), (String_t*)_stringLiteral18B39452A606090B97AA8D84240CC83BE3E5D62B);
		StringU5BU5D_t933FB07893230EA91C40FF900D5400665E87B14E* L_22 = L_21;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8760));
		uint64_t L_23 = SteamVR_Action_Source_get_handle_mE4C63F9ADB5ACA5E72265B62C0908ACF8EF73A01(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8760));
		V_2 = L_23;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8761));
		String_t* L_24 = UInt64_ToString_mF0E40B7459C207B89A1C8C04CE7F183AC0E6D672((uint64_t*)(&V_2), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8761));
		NullCheck(L_22);
		ArrayElementTypeCheck (L_22, L_24);
		(L_22)->SetAt(static_cast<il2cpp_array_size_t>(5), (String_t*)L_24);
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8762));
		String_t* L_25 = String_Concat_m232E857CA5107EA6AC52E7DD7018716C021F237B(L_22, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8762));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8763));
		IL2CPP_RUNTIME_CLASS_INIT(Debug_t7B5FCB117E2FD63B6838BC52821B252E2BFB61C4_il2cpp_TypeInfo_var);
		Debug_LogError_m3BCF9B78263152261565DCA9DB7D55F0C391ED29(L_25, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8763));
	}

IL_00b6:
	{
		// updateTime = Time.realtimeSinceStartup;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8711));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8764));
		float L_26 = Time_get_realtimeSinceStartup_mCA1086EC9DFCF135F77BC46D3B7127711EA3DE03(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8764));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8765));
		SteamVR_Action_In_Source_set_updateTime_mDA27AEC2F90C6036B8E6979F74E68528316D1322_inline(__this, L_26, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8765));
		// axis = new Vector3(actionData.x, actionData.y, actionData.z);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8712));
		InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * L_27 = __this->get_address_of_actionData_24();
		float L_28 = L_27->get_x_2();
		InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * L_29 = __this->get_address_of_actionData_24();
		float L_30 = L_29->get_y_3();
		InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * L_31 = __this->get_address_of_actionData_24();
		float L_32 = L_31->get_z_4();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8766));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_33;
		memset((&L_33), 0, sizeof(L_33));
		Vector3__ctor_m08F61F548AA5836D8789843ACB4A81E4963D2EE1((&L_33), L_28, L_30, L_32, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8766));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8767));
		SteamVR_Action_Vector3_Source_set_axis_m8D6C550660D5D6EF3AFC2376B964204B4B26C0DF_inline(__this, L_33, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8767));
		// delta = new Vector3(actionData.deltaX, actionData.deltaY, actionData.deltaZ);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8713));
		InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * L_34 = __this->get_address_of_actionData_24();
		float L_35 = L_34->get_deltaX_5();
		InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * L_36 = __this->get_address_of_actionData_24();
		float L_37 = L_36->get_deltaY_6();
		InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * L_38 = __this->get_address_of_actionData_24();
		float L_39 = L_38->get_deltaZ_7();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8768));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_40;
		memset((&L_40), 0, sizeof(L_40));
		Vector3__ctor_m08F61F548AA5836D8789843ACB4A81E4963D2EE1((&L_40), L_35, L_37, L_39, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8768));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8769));
		SteamVR_Action_Vector3_Source_set_delta_m425C84C1DE5AD8F12F9F04C1E4C78452C580FE2B_inline(__this, L_40, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8769));
		// changed = false;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8714));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8770));
		VirtActionInvoker1< bool >::Invoke(32 /* System.Void Valve.VR.SteamVR_Action_In_Source::set_changed(System.Boolean) */, __this, (bool)0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8770));
		// if (active)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8715));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8771));
		bool L_41 = VirtFuncInvoker0< bool >::Invoke(12 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_active() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8771));
		V_3 = L_41;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8716));
		bool L_42 = V_3;
		if (!L_42)
		{
			goto IL_0225;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8717));
		// if (delta.magnitude > changeTolerance)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8718));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8772));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_43 = SteamVR_Action_Vector3_Source_get_delta_m4B3DA30643F7D02E80B5AAC93D5BF6D730305BC0_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8772));
		V_5 = L_43;
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8773));
		float L_44 = Vector3_get_magnitude_m9A750659B60C5FE0C30438A7F9681775D5DB1274((Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720 *)(&V_5), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8773));
		float L_45 = __this->get_changeTolerance_11();
		V_4 = (bool)((((float)L_44) > ((float)L_45))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8719));
		bool L_46 = V_4;
		if (!L_46)
		{
			goto IL_01a4;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8720));
		// changed = true;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8721));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8774));
		VirtActionInvoker1< bool >::Invoke(32 /* System.Void Valve.VR.SteamVR_Action_In_Source::set_changed(System.Boolean) */, __this, (bool)1);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8774));
		// changedTime = Time.realtimeSinceStartup + actionData.fUpdateTime; //fUpdateTime is the time from the time the action was called that the action changed
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8722));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8775));
		float L_47 = Time_get_realtimeSinceStartup_mCA1086EC9DFCF135F77BC46D3B7127711EA3DE03(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8775));
		InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * L_48 = __this->get_address_of_actionData_24();
		float L_49 = L_48->get_fUpdateTime_8();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8776));
		SteamVR_Action_In_Source_set_changedTime_mD1EE7D0BD28058E1901FF671FB77587F2FCA35DA_inline(__this, ((float)il2cpp_codegen_add((float)L_47, (float)L_49)), /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8776));
		// if (onChange != null)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8723));
		ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * L_50 = __this->get_onChange_15();
		V_6 = (bool)((!(((RuntimeObject*)(ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B *)L_50) <= ((RuntimeObject*)(RuntimeObject *)NULL)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8724));
		bool L_51 = V_6;
		if (!L_51)
		{
			goto IL_01a3;
		}
	}
	{
		// onChange.Invoke(vector3Action, inputSource, axis, delta);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8725));
		ChangeHandler_tA77578B2BDD50739DF7DDC003DC56CFE0E7D8E1B * L_52 = __this->get_onChange_15();
		SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * L_53 = __this->get_vector3Action_26();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8777));
		int32_t L_54 = SteamVR_Action_Source_get_inputSource_mAA1928183BB06E5C8CF950F65BA80635C25535D4_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8777));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8778));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_55 = SteamVR_Action_Vector3_Source_get_axis_m0F9A2BF33B9BC6BF5774EC4D7E2EE2B474B28E99_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8778));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8779));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_56 = SteamVR_Action_Vector3_Source_get_delta_m4B3DA30643F7D02E80B5AAC93D5BF6D730305BC0_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8779));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8780));
		NullCheck(L_52);
		ChangeHandler_Invoke_m1BD4D5E5DD81C63A9C020AE470617259DBAF62EE(L_52, L_53, L_54, L_55, L_56, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8780));
	}

IL_01a3:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8726));
	}

IL_01a4:
	{
		// if (axis != Vector3.zero)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8727));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8781));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_57 = SteamVR_Action_Vector3_Source_get_axis_m0F9A2BF33B9BC6BF5774EC4D7E2EE2B474B28E99_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8781));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8782));
		IL2CPP_RUNTIME_CLASS_INIT(Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720_il2cpp_TypeInfo_var);
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_58 = Vector3_get_zero_m3CDDCAE94581DF3BB16C4B40A100E28E9C6649C2(/*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8782));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8783));
		bool L_59 = Vector3_op_Inequality_mFEEAA4C4BF743FB5B8A47FF4967A5E2C73273D6E(L_57, L_58, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8783));
		V_7 = L_59;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8728));
		bool L_60 = V_7;
		if (!L_60)
		{
			goto IL_01ef;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8729));
		// if (onAxis != null)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8730));
		AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * L_61 = __this->get_onAxis_12();
		V_8 = (bool)((!(((RuntimeObject*)(AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 *)L_61) <= ((RuntimeObject*)(RuntimeObject *)NULL)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8731));
		bool L_62 = V_8;
		if (!L_62)
		{
			goto IL_01ee;
		}
	}
	{
		// onAxis.Invoke(vector3Action, inputSource, axis, delta);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8732));
		AxisHandler_t97CA64BADCF02FC136106FD8DE45CD8F1B34C779 * L_63 = __this->get_onAxis_12();
		SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * L_64 = __this->get_vector3Action_26();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8784));
		int32_t L_65 = SteamVR_Action_Source_get_inputSource_mAA1928183BB06E5C8CF950F65BA80635C25535D4_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8784));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8785));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_66 = SteamVR_Action_Vector3_Source_get_axis_m0F9A2BF33B9BC6BF5774EC4D7E2EE2B474B28E99_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8785));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8786));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_67 = SteamVR_Action_Vector3_Source_get_delta_m4B3DA30643F7D02E80B5AAC93D5BF6D730305BC0_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8786));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8787));
		NullCheck(L_63);
		AxisHandler_Invoke_m4898437260780A1DE7497E17A30140E7081E3891(L_63, L_64, L_65, L_66, L_67, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8787));
	}

IL_01ee:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8733));
	}

IL_01ef:
	{
		// if (onUpdate != null)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8734));
		UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * L_68 = __this->get_onUpdate_16();
		V_9 = (bool)((!(((RuntimeObject*)(UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 *)L_68) <= ((RuntimeObject*)(RuntimeObject *)NULL)))? 1 : 0);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8735));
		bool L_69 = V_9;
		if (!L_69)
		{
			goto IL_0224;
		}
	}
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8736));
		// onUpdate.Invoke(vector3Action, inputSource, axis, delta);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8737));
		UpdateHandler_t0C4D50940DBA61F869AEBAB8F40A8CF92AF0EF75 * L_70 = __this->get_onUpdate_16();
		SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * L_71 = __this->get_vector3Action_26();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8788));
		int32_t L_72 = SteamVR_Action_Source_get_inputSource_mAA1928183BB06E5C8CF950F65BA80635C25535D4_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8788));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8789));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_73 = SteamVR_Action_Vector3_Source_get_axis_m0F9A2BF33B9BC6BF5774EC4D7E2EE2B474B28E99_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8789));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8790));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_74 = SteamVR_Action_Vector3_Source_get_delta_m4B3DA30643F7D02E80B5AAC93D5BF6D730305BC0_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8790));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8791));
		NullCheck(L_70);
		UpdateHandler_Invoke_m7B6641AC506F248A3301DE33BD7518AFE35A6A59(L_70, L_71, L_72, L_73, L_74, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8791));
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8738));
	}

IL_0224:
	{
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8739));
	}

IL_0225:
	{
		// if (onActiveBindingChange != null && lastActiveBinding != activeBinding)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8740));
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_75 = __this->get_onActiveBindingChange_14();
		if (!L_75)
		{
			goto IL_0240;
		}
	}
	{
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8792));
		bool L_76 = VirtFuncInvoker0< bool >::Invoke(16 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_lastActiveBinding() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8792));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8793));
		bool L_77 = VirtFuncInvoker0< bool >::Invoke(13 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_activeBinding() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8793));
		G_B17_0 = ((((int32_t)((((int32_t)L_76) == ((int32_t)L_77))? 1 : 0)) == ((int32_t)0))? 1 : 0);
		goto IL_0241;
	}

IL_0240:
	{
		G_B17_0 = 0;
	}

IL_0241:
	{
		V_10 = (bool)G_B17_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8741));
		bool L_78 = V_10;
		if (!L_78)
		{
			goto IL_0265;
		}
	}
	{
		// onActiveBindingChange.Invoke(vector3Action, inputSource, activeBinding);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8742));
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_79 = __this->get_onActiveBindingChange_14();
		SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * L_80 = __this->get_vector3Action_26();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8794));
		int32_t L_81 = SteamVR_Action_Source_get_inputSource_mAA1928183BB06E5C8CF950F65BA80635C25535D4_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8794));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8795));
		bool L_82 = VirtFuncInvoker0< bool >::Invoke(13 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_activeBinding() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8795));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8796));
		NullCheck(L_79);
		ActiveChangeHandler_Invoke_m67A19739D2E43FC88B0EA8081E3DACEE816EF2AD(L_79, L_80, L_81, L_82, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8796));
	}

IL_0265:
	{
		// if (onActiveChange != null && lastActive != active)
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8743));
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_83 = __this->get_onActiveChange_13();
		if (!L_83)
		{
			goto IL_0280;
		}
	}
	{
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8797));
		bool L_84 = VirtFuncInvoker0< bool >::Invoke(14 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_lastActive() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8797));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8798));
		bool L_85 = VirtFuncInvoker0< bool >::Invoke(12 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_active() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8798));
		G_B22_0 = ((((int32_t)((((int32_t)L_84) == ((int32_t)L_85))? 1 : 0)) == ((int32_t)0))? 1 : 0);
		goto IL_0281;
	}

IL_0280:
	{
		G_B22_0 = 0;
	}

IL_0281:
	{
		V_11 = (bool)G_B22_0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8744));
		bool L_86 = V_11;
		if (!L_86)
		{
			goto IL_02a5;
		}
	}
	{
		// onActiveChange.Invoke(vector3Action, inputSource, activeBinding);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8745));
		ActiveChangeHandler_t214E14B0C9535CBD468CE0E49F0F71F8F61BD652 * L_87 = __this->get_onActiveChange_13();
		SteamVR_Action_Vector3_tBD5707CE303CA6F46E3C2CF546A8214B0813AFD9 * L_88 = __this->get_vector3Action_26();
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8799));
		int32_t L_89 = SteamVR_Action_Source_get_inputSource_mAA1928183BB06E5C8CF950F65BA80635C25535D4_inline(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8799));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8800));
		bool L_90 = VirtFuncInvoker0< bool >::Invoke(13 /* System.Boolean Valve.VR.SteamVR_Action_Source::get_activeBinding() */, __this);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8800));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8801));
		NullCheck(L_87);
		ActiveChangeHandler_Invoke_m67A19739D2E43FC88B0EA8081E3DACEE816EF2AD(L_87, L_88, L_89, L_90, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8801));
	}

IL_02a5:
	{
		// }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8746));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::.ctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source__ctor_mC0D29BEF4DAD2DE16DAA78C0F490591AB171DE1A (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source__ctor_mC0D29BEF4DAD2DE16DAA78C0F490591AB171DE1A_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source__ctor_mC0D29BEF4DAD2DE16DAA78C0F490591AB171DE1A_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8802));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8803));
	{
		// public float changeTolerance = Mathf.Epsilon;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8804));
		IL2CPP_RUNTIME_CLASS_INIT(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var);
		float L_0 = ((Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_StaticFields*)il2cpp_codegen_static_fields_for(Mathf_tFBDE6467D269BFE410605C7D806FD9991D4A89CB_il2cpp_TypeInfo_var))->get_Epsilon_0();
		__this->set_changeTolerance_11(L_0);
		// protected InputAnalogActionData_t actionData = new InputAnalogActionData_t();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8805));
		InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * L_1 = __this->get_address_of_actionData_24();
		il2cpp_codegen_initobj(L_1, sizeof(InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C ));
		// protected InputAnalogActionData_t lastActionData = new InputAnalogActionData_t();
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8806));
		InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C * L_2 = __this->get_address_of_lastActionData_25();
		il2cpp_codegen_initobj(L_2, sizeof(InputAnalogActionData_t_t14E9AA21212F14E11EE05E0C5D5D37705B14CB0C ));
		STORE_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8807));
		IL2CPP_RUNTIME_CLASS_INIT(SteamVR_Action_In_Source_t6C3FA81DC7F53D302E49E09F5791E612AC7832AB_il2cpp_TypeInfo_var);
		SteamVR_Action_In_Source__ctor_mFF9B46DF32121E562139E277818FB636DCA2A816(__this, /*hidden argument*/NULL);
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8807));
		return;
	}
}
// System.Void Valve.VR.SteamVR_Action_Vector3_Source::.cctor()
IL2CPP_EXTERN_C IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source__cctor_mE841F95CDB56BC53EB934017D21DB959492E90DA (const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source__cctor_mE841F95CDB56BC53EB934017D21DB959492E90DA_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source__cctor_mE841F95CDB56BC53EB934017D21DB959492E90DA_RuntimeMethod_var, NULL, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8808));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8809));
	{
		// protected static uint actionData_size = 0;
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8810));
		((SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90_StaticFields*)il2cpp_codegen_static_fields_for(SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90_il2cpp_TypeInfo_var))->set_actionData_size_10(0);
		return;
	}
}
#ifdef __clang__
#pragma clang diagnostic pop
#endif
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* SteamVR_Action_Skeleton_Source_get_bonePositions_mA0C01DDB9EAB9749BBBEDBCFF72582812AB9C195_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_bonePositions_mA0C01DDB9EAB9749BBBEDBCFF72582812AB9C195SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_bonePositions_mA0C01DDB9EAB9749BBBEDBCFF72582812AB9C195_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7303));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7304));
	{
		// public Vector3[] bonePositions { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7305));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_0 = __this->get_U3CbonePositionsU3Ek__BackingField_44();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* SteamVR_Action_Skeleton_Source_get_boneRotations_mCD0B038517CA7A79945AD615082F05B25B0EDA20_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_boneRotations_mCD0B038517CA7A79945AD615082F05B25B0EDA20SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_boneRotations_mCD0B038517CA7A79945AD615082F05B25B0EDA20_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7309));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7310));
	{
		// public Quaternion[] boneRotations { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7311));
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_0 = __this->get_U3CboneRotationsU3Ek__BackingField_45();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* SteamVR_Action_Skeleton_Source_get_lastBonePositions_m99D1C7B8A05E646777AC85CFC0ED2FF0953C3AB9_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_lastBonePositions_m99D1C7B8A05E646777AC85CFC0ED2FF0953C3AB9SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_lastBonePositions_m99D1C7B8A05E646777AC85CFC0ED2FF0953C3AB9_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7315));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7316));
	{
		// public Vector3[] lastBonePositions { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7317));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_0 = __this->get_U3ClastBonePositionsU3Ek__BackingField_46();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* SteamVR_Action_Skeleton_Source_get_lastBoneRotations_m14A98028FB99C0404733364FFD3C187D2A53261C_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_lastBoneRotations_m14A98028FB99C0404733364FFD3C187D2A53261CSteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_lastBoneRotations_m14A98028FB99C0404733364FFD3C187D2A53261C_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7321));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7322));
	{
		// public Quaternion[] lastBoneRotations { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7323));
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_0 = __this->get_U3ClastBoneRotationsU3Ek__BackingField_47();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Skeleton_Source_get_rangeOfMotion_mCEFC5B01B736A3B6218C5C91A0AEF272FFD88B47_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_rangeOfMotion_mCEFC5B01B736A3B6218C5C91A0AEF272FFD88B47SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_rangeOfMotion_mCEFC5B01B736A3B6218C5C91A0AEF272FFD88B47_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7327));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7328));
	{
		// public EVRSkeletalMotionRange rangeOfMotion { get; set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7329));
		int32_t L_0 = __this->get_U3CrangeOfMotionU3Ek__BackingField_48();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_rangeOfMotion_m01A4338F1C4D57E5691A2F8EA861BAD76DA75619_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_set_rangeOfMotion_m01A4338F1C4D57E5691A2F8EA861BAD76DA75619SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_set_rangeOfMotion_m01A4338F1C4D57E5691A2F8EA861BAD76DA75619_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7330));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7331));
	{
		// public EVRSkeletalMotionRange rangeOfMotion { get; set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7332));
		int32_t L_0 = ___value0;
		__this->set_U3CrangeOfMotionU3Ek__BackingField_48(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Skeleton_Source_get_skeletalTransformSpace_m0D9D61CC1BC50CC7FA1F9AD5192FBC418009F3F3_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_skeletalTransformSpace_m0D9D61CC1BC50CC7FA1F9AD5192FBC418009F3F3SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_skeletalTransformSpace_m0D9D61CC1BC50CC7FA1F9AD5192FBC418009F3F3_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7333));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7334));
	{
		// public EVRSkeletalTransformSpace skeletalTransformSpace { get; set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7335));
		int32_t L_0 = __this->get_U3CskeletalTransformSpaceU3Ek__BackingField_49();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_skeletalTransformSpace_m851FCD54C037B0D6CF78F14CBF0BF7B44EE86FA8_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_set_skeletalTransformSpace_m851FCD54C037B0D6CF78F14CBF0BF7B44EE86FA8SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_set_skeletalTransformSpace_m851FCD54C037B0D6CF78F14CBF0BF7B44EE86FA8_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7336));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7337));
	{
		// public EVRSkeletalTransformSpace skeletalTransformSpace { get; set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7338));
		int32_t L_0 = ___value0;
		__this->set_U3CskeletalTransformSpaceU3Ek__BackingField_49(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Skeleton_Source_get_summaryDataType_mE0AB648E0339C2A082B81B15AA2D97854E8BB8CC_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_summaryDataType_mE0AB648E0339C2A082B81B15AA2D97854E8BB8CCSteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_summaryDataType_mE0AB648E0339C2A082B81B15AA2D97854E8BB8CC_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7339));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7340));
	{
		// public EVRSummaryType summaryDataType { get; set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7341));
		int32_t L_0 = __this->get_U3CsummaryDataTypeU3Ek__BackingField_50();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_summaryDataType_m99B705C8282316AC52EBA3A718C998FE46329E1F_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_set_summaryDataType_m99B705C8282316AC52EBA3A718C998FE46329E1FSteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_set_summaryDataType_m99B705C8282316AC52EBA3A718C998FE46329E1F_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7342));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7343));
	{
		// public EVRSummaryType summaryDataType { get; set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7344));
		int32_t L_0 = ___value0;
		__this->set_U3CsummaryDataTypeU3Ek__BackingField_50(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* SteamVR_Action_Skeleton_Source_get_fingerCurls_mD56D63D01414ED3D7D6074DB29C81AAC3C490479_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_fingerCurls_mD56D63D01414ED3D7D6074DB29C81AAC3C490479SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_fingerCurls_mD56D63D01414ED3D7D6074DB29C81AAC3C490479_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7453));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7454));
	{
		// public float[] fingerCurls { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7455));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = __this->get_U3CfingerCurlsU3Ek__BackingField_51();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* SteamVR_Action_Skeleton_Source_get_fingerSplays_m5461F8E49017BD6579CC10D8D0783642DEDE37D0_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_fingerSplays_m5461F8E49017BD6579CC10D8D0783642DEDE37D0SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_fingerSplays_m5461F8E49017BD6579CC10D8D0783642DEDE37D0_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7459));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7460));
	{
		// public float[] fingerSplays { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7461));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = __this->get_U3CfingerSplaysU3Ek__BackingField_52();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* SteamVR_Action_Skeleton_Source_get_lastFingerCurls_m00C4EB3059A4427EF390371B7B56077017F42C2C_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_lastFingerCurls_m00C4EB3059A4427EF390371B7B56077017F42C2CSteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_lastFingerCurls_m00C4EB3059A4427EF390371B7B56077017F42C2C_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7465));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7466));
	{
		// public float[] lastFingerCurls { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7467));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = __this->get_U3ClastFingerCurlsU3Ek__BackingField_53();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* SteamVR_Action_Skeleton_Source_get_lastFingerSplays_mC1CF900637C3FB99B1DE3F4BE06452EC07264747_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_lastFingerSplays_mC1CF900637C3FB99B1DE3F4BE06452EC07264747SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_lastFingerSplays_mC1CF900637C3FB99B1DE3F4BE06452EC07264747_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7471));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7472));
	{
		// public float[] lastFingerSplays { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7473));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = __this->get_U3ClastFingerSplaysU3Ek__BackingField_54();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR bool SteamVR_Action_Skeleton_Source_get_poseChanged_m00A9DB3FFD0499D982FC39500D115B4968518988_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_poseChanged_m00A9DB3FFD0499D982FC39500D115B4968518988SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_poseChanged_m00A9DB3FFD0499D982FC39500D115B4968518988_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7477));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7478));
	{
		// public bool poseChanged { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7479));
		bool L_0 = __this->get_U3CposeChangedU3Ek__BackingField_55();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR bool SteamVR_Action_Skeleton_Source_get_onlyUpdateSummaryData_m3AC011DB8ED08B67F124368EEA9934C5FACA5920_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_get_onlyUpdateSummaryData_m3AC011DB8ED08B67F124368EEA9934C5FACA5920SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_get_onlyUpdateSummaryData_m3AC011DB8ED08B67F124368EEA9934C5FACA5920_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7483));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7484));
	{
		// public bool onlyUpdateSummaryData { get; set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7485));
		bool L_0 = __this->get_U3ConlyUpdateSummaryDataU3Ek__BackingField_56();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_onlyUpdateSummaryData_m49C580092D3CDFD2E8D1D98D06026C2FF6F73BCA_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, bool ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_set_onlyUpdateSummaryData_m49C580092D3CDFD2E8D1D98D06026C2FF6F73BCASteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_set_onlyUpdateSummaryData_m49C580092D3CDFD2E8D1D98D06026C2FF6F73BCA_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7486));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7487));
	{
		// public bool onlyUpdateSummaryData { get; set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7488));
		bool L_0 = ___value0;
		__this->set_U3ConlyUpdateSummaryDataU3Ek__BackingField_56(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Pose_Source_get_localPosition_mE065A826D8D1A8CF44D9E7F0D038F24D70985833_inline (SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Pose_Source_get_localPosition_mE065A826D8D1A8CF44D9E7F0D038F24D70985833SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Pose_Source_get_localPosition_mE065A826D8D1A8CF44D9E7F0D038F24D70985833_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 5697));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 5698));
	{
		// public Vector3 localPosition { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 5699));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = __this->get_U3ClocalPositionU3Ek__BackingField_23();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  SteamVR_Action_Pose_Source_get_localRotation_m307D9DD92DFFFCC30446A71D9BD15674A797ED2A_inline (SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Pose_Source_get_localRotation_m307D9DD92DFFFCC30446A71D9BD15674A797ED2ASteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Pose_Source_get_localRotation_m307D9DD92DFFFCC30446A71D9BD15674A797ED2A_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 5703));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 5704));
	{
		// public Quaternion localRotation { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 5705));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_0 = __this->get_U3ClocalRotationU3Ek__BackingField_24();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Pose_Source_get_velocity_m2B71BB7981006080D113442CB374529602A310BF_inline (SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Pose_Source_get_velocity_m2B71BB7981006080D113442CB374529602A310BFSteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Pose_Source_get_velocity_m2B71BB7981006080D113442CB374529602A310BF_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 5721));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 5722));
	{
		// public Vector3 velocity { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 5723));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = __this->get_U3CvelocityU3Ek__BackingField_27();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Pose_Source_get_angularVelocity_mACAA45CB05DB94C9292ED147F3156109DAFA0209_inline (SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Pose_Source_get_angularVelocity_mACAA45CB05DB94C9292ED147F3156109DAFA0209SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Pose_Source_get_angularVelocity_mACAA45CB05DB94C9292ED147F3156109DAFA0209_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 5733));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 5734));
	{
		// public Vector3 angularVelocity { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 5735));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = __this->get_U3CangularVelocityU3Ek__BackingField_29();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Pose_Source_get_lastLocalPosition_mB748F9D4600498E9BACCEBE5C8F00DED8125C307_inline (SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Pose_Source_get_lastLocalPosition_mB748F9D4600498E9BACCEBE5C8F00DED8125C307SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Pose_Source_get_lastLocalPosition_mB748F9D4600498E9BACCEBE5C8F00DED8125C307_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 5709));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 5710));
	{
		// public Vector3 lastLocalPosition { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 5711));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = __this->get_U3ClastLocalPositionU3Ek__BackingField_25();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  SteamVR_Action_Pose_Source_get_lastLocalRotation_m15622BCE4A3D32548EBFE7DC98F8751352617660_inline (SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Pose_Source_get_lastLocalRotation_m15622BCE4A3D32548EBFE7DC98F8751352617660SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Pose_Source_get_lastLocalRotation_m15622BCE4A3D32548EBFE7DC98F8751352617660_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 5715));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 5716));
	{
		// public Quaternion lastLocalRotation { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 5717));
		Quaternion_t319F3319A7D43FFA5D819AD6C0A98851F0095357  L_0 = __this->get_U3ClastLocalRotationU3Ek__BackingField_26();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Pose_Source_get_lastVelocity_mB9FD7955140F713C63842433E1E50D498EAD0A21_inline (SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Pose_Source_get_lastVelocity_mB9FD7955140F713C63842433E1E50D498EAD0A21SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Pose_Source_get_lastVelocity_mB9FD7955140F713C63842433E1E50D498EAD0A21_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 5727));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 5728));
	{
		// public Vector3 lastVelocity { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 5729));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = __this->get_U3ClastVelocityU3Ek__BackingField_28();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Pose_Source_get_lastAngularVelocity_m3EE729ECF16DA55CFE069E25EB9099A80667C55F_inline (SteamVR_Action_Pose_Source_t56D2300E6E866DAB00504F844B60F4556A4F0E27 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Pose_Source_get_lastAngularVelocity_m3EE729ECF16DA55CFE069E25EB9099A80667C55FSteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Pose_Source_get_lastAngularVelocity_m3EE729ECF16DA55CFE069E25EB9099A80667C55F_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 5739));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 5740));
	{
		// public Vector3 lastAngularVelocity { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 5741));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = __this->get_U3ClastAngularVelocityU3Ek__BackingField_30();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_bonePositions_m6E2F4BC8D0DB6C17A44D1DD390933B195C8F0BE7_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_set_bonePositions_m6E2F4BC8D0DB6C17A44D1DD390933B195C8F0BE7SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_set_bonePositions_m6E2F4BC8D0DB6C17A44D1DD390933B195C8F0BE7_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7306));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7307));
	{
		// public Vector3[] bonePositions { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7308));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_0 = ___value0;
		__this->set_U3CbonePositionsU3Ek__BackingField_44(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_lastBonePositions_m7B9C3EC1294D432EBF5834AA2FD1518F398C771B_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_set_lastBonePositions_m7B9C3EC1294D432EBF5834AA2FD1518F398C771BSteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_set_lastBonePositions_m7B9C3EC1294D432EBF5834AA2FD1518F398C771B_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7318));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7319));
	{
		// public Vector3[] lastBonePositions { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7320));
		Vector3U5BU5D_tB9EC3346CC4A0EA5447D968E84A9AC1F6F372C28* L_0 = ___value0;
		__this->set_U3ClastBonePositionsU3Ek__BackingField_46(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_boneRotations_m04DF922F78BEB4B48C610E5263CB5A56723BFE11_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_set_boneRotations_m04DF922F78BEB4B48C610E5263CB5A56723BFE11SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_set_boneRotations_m04DF922F78BEB4B48C610E5263CB5A56723BFE11_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7312));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7313));
	{
		// public Quaternion[] boneRotations { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7314));
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_0 = ___value0;
		__this->set_U3CboneRotationsU3Ek__BackingField_45(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_lastBoneRotations_mAF79C76574CD9C644F280B1E5DCBF068D84C0C71_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_set_lastBoneRotations_mAF79C76574CD9C644F280B1E5DCBF068D84C0C71SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_set_lastBoneRotations_mAF79C76574CD9C644F280B1E5DCBF068D84C0C71_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7324));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7325));
	{
		// public Quaternion[] lastBoneRotations { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7326));
		QuaternionU5BU5D_t26EB10EEE89DD3EF913D52E8797FAB841F6F2AA3* L_0 = ___value0;
		__this->set_U3ClastBoneRotationsU3Ek__BackingField_47(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_fingerCurls_m8A5B299B1D9CA30852BCFDF4439985C7C67607D5_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_set_fingerCurls_m8A5B299B1D9CA30852BCFDF4439985C7C67607D5SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_set_fingerCurls_m8A5B299B1D9CA30852BCFDF4439985C7C67607D5_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7456));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7457));
	{
		// public float[] fingerCurls { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7458));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = ___value0;
		__this->set_U3CfingerCurlsU3Ek__BackingField_51(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_fingerSplays_mEC48DADE504DBFF9AB6B0D16ED35C39CE97F2EBD_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_set_fingerSplays_mEC48DADE504DBFF9AB6B0D16ED35C39CE97F2EBDSteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_set_fingerSplays_mEC48DADE504DBFF9AB6B0D16ED35C39CE97F2EBD_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7462));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7463));
	{
		// public float[] fingerSplays { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7464));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = ___value0;
		__this->set_U3CfingerSplaysU3Ek__BackingField_52(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_lastFingerCurls_m87DEB2959B20AD607470B75C837EE42754040CFF_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_set_lastFingerCurls_m87DEB2959B20AD607470B75C837EE42754040CFFSteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_set_lastFingerCurls_m87DEB2959B20AD607470B75C837EE42754040CFF_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7468));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7469));
	{
		// public float[] lastFingerCurls { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7470));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = ___value0;
		__this->set_U3ClastFingerCurlsU3Ek__BackingField_53(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_lastFingerSplays_mA14C6FC07879D8ED956F931D74A2DF14526476E9_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_set_lastFingerSplays_mA14C6FC07879D8ED956F931D74A2DF14526476E9SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_set_lastFingerSplays_mA14C6FC07879D8ED956F931D74A2DF14526476E9_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7474));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7475));
	{
		// public float[] lastFingerSplays { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7476));
		SingleU5BU5D_tA7139B7CAA40EAEF9178E2C386C8A5993754FDD5* L_0 = ___value0;
		__this->set_U3ClastFingerSplaysU3Ek__BackingField_54(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Skeleton_Source_set_poseChanged_m91451416B46D3849E217C7FBAAA96F28364E94B0_inline (SteamVR_Action_Skeleton_Source_t54C9D1A9F7E1349F2A3CD0A8CC21C05EA4348C72 * __this, bool ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Skeleton_Source_set_poseChanged_m91451416B46D3849E217C7FBAAA96F28364E94B0SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Skeleton_Source_set_poseChanged_m91451416B46D3849E217C7FBAAA96F28364E94B0_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7480));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 7481));
	{
		// public bool poseChanged { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 7482));
		bool L_0 = ___value0;
		__this->set_U3CposeChangedU3Ek__BackingField_55(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_In_Source_set_changedTime_mD1EE7D0BD28058E1901FF671FB77587F2FCA35DA_inline (SteamVR_Action_In_Source_t6C3FA81DC7F53D302E49E09F5791E612AC7832AB * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_In_Source_set_changedTime_mD1EE7D0BD28058E1901FF671FB77587F2FCA35DASteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_In_Source_set_changedTime_mD1EE7D0BD28058E1901FF671FB77587F2FCA35DA_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 5048));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 5049));
	{
		// public float changedTime { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 5050));
		float L_0 = ___value0;
		__this->set_U3CchangedTimeU3Ek__BackingField_6(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR int32_t SteamVR_Action_Source_get_inputSource_mAA1928183BB06E5C8CF950F65BA80635C25535D4_inline (SteamVR_Action_Source_t9D7428CDE39924074518EE6233D9A4FAB0C33CB0 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_get_inputSource_mAA1928183BB06E5C8CF950F65BA80635C25535D4SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_get_inputSource_mAA1928183BB06E5C8CF950F65BA80635C25535D4_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3501));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3502));
	{
		// public SteamVR_Input_Sources inputSource { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3503));
		int32_t L_0 = __this->get_U3CinputSourceU3Ek__BackingField_0();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Source_set_inputSource_mCA804B7275EED0C19F247767BCC22B7F639A3175_inline (SteamVR_Action_Source_t9D7428CDE39924074518EE6233D9A4FAB0C33CB0 * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_set_inputSource_mCA804B7275EED0C19F247767BCC22B7F639A3175SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_set_inputSource_mCA804B7275EED0C19F247767BCC22B7F639A3175_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3504));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3505));
	{
		// public SteamVR_Input_Sources inputSource { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3506));
		int32_t L_0 = ___value0;
		__this->set_U3CinputSourceU3Ek__BackingField_0(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Source_Map_set_fullPath_mBB40F4301664B3074825255DA6E51B5E02F93463_inline (SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17 * __this, String_t* ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_Map_set_fullPath_mBB40F4301664B3074825255DA6E51B5E02F93463SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_Map_set_fullPath_mBB40F4301664B3074825255DA6E51B5E02F93463_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3358));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3359));
	{
		// public string fullPath { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3360));
		String_t* L_0 = ___value0;
		__this->set_U3CfullPathU3Ek__BackingField_0(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Source_Map_set_actionSet_m8D8A292258A3B69B920DED592F2BD44A259EBAA9_inline (SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17 * __this, SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6 * ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_Map_set_actionSet_m8D8A292258A3B69B920DED592F2BD44A259EBAA9SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_Map_set_actionSet_m8D8A292258A3B69B920DED592F2BD44A259EBAA9_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3370));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3371));
	{
		// public SteamVR_ActionSet actionSet { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3372));
		SteamVR_ActionSet_t9D647E559B2D35F695CC7613111572186FBCA9F6 * L_0 = ___value0;
		__this->set_U3CactionSetU3Ek__BackingField_2(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Source_Map_set_direction_m4E65637F7F50E116169B2CFB6EBF5A2583D902F2_inline (SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17 * __this, int32_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_Map_set_direction_m4E65637F7F50E116169B2CFB6EBF5A2583D902F2SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_Map_set_direction_m4E65637F7F50E116169B2CFB6EBF5A2583D902F2_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3376));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3377));
	{
		// public SteamVR_ActionDirections direction { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3378));
		int32_t L_0 = ___value0;
		__this->set_U3CdirectionU3Ek__BackingField_3(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR String_t* SteamVR_Action_Source_Map_get_fullPath_m17B3B1227ABDCC35456A1B37EE9919772DD1F24E_inline (SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_Map_get_fullPath_m17B3B1227ABDCC35456A1B37EE9919772DD1F24ESteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_Map_get_fullPath_m17B3B1227ABDCC35456A1B37EE9919772DD1F24E_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3355));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3356));
	{
		// public string fullPath { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3357));
		String_t* L_0 = __this->get_U3CfullPathU3Ek__BackingField_0();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Source_Map_set_handle_mB5B6B8E56BCC552963E91E2748DF8CC04BDC979A_inline (SteamVR_Action_Source_Map_t7EF8D4B037DC17D04177E758D64AA2C482031E17 * __this, uint64_t ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Source_Map_set_handle_mB5B6B8E56BCC552963E91E2748DF8CC04BDC979ASteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Source_Map_set_handle_mB5B6B8E56BCC552963E91E2748DF8CC04BDC979A_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3364));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 3365));
	{
		// public ulong handle { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 3366));
		uint64_t L_0 = ___value0;
		__this->set_U3ChandleU3Ek__BackingField_1(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  SteamVR_Action_Vector2_Source_get_axis_mCEB6E517ED0E10BE513D22B23A69F1BE3D5DA2BA_inline (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_get_axis_mCEB6E517ED0E10BE513D22B23A69F1BE3D5DA2BASteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_get_axis_mCEB6E517ED0E10BE513D22B23A69F1BE3D5DA2BA_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8191));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8192));
	{
		// public Vector2 axis { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8193));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_0 = __this->get_U3CaxisU3Ek__BackingField_17();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  SteamVR_Action_Vector2_Source_get_lastAxis_mD0A1188D33FAD9AAB16CBCC0C073796C76616460_inline (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_get_lastAxis_mD0A1188D33FAD9AAB16CBCC0C073796C76616460SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_get_lastAxis_mD0A1188D33FAD9AAB16CBCC0C073796C76616460_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8197));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8198));
	{
		// public Vector2 lastAxis { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8199));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_0 = __this->get_U3ClastAxisU3Ek__BackingField_18();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  SteamVR_Action_Vector2_Source_get_delta_m19CFFF4B8014BD4ED43D0C5EDDD909A2F1DF1908_inline (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_get_delta_m19CFFF4B8014BD4ED43D0C5EDDD909A2F1DF1908SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_get_delta_m19CFFF4B8014BD4ED43D0C5EDDD909A2F1DF1908_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8203));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8204));
	{
		// public Vector2 delta { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8205));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_0 = __this->get_U3CdeltaU3Ek__BackingField_19();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  SteamVR_Action_Vector2_Source_get_lastDelta_mE21D07B848010D30A36B3C7338B5B615B81598AC_inline (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_get_lastDelta_mE21D07B848010D30A36B3C7338B5B615B81598ACSteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_get_lastDelta_mE21D07B848010D30A36B3C7338B5B615B81598AC_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8209));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8210));
	{
		// public Vector2 lastDelta { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8211));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_0 = __this->get_U3ClastDeltaU3Ek__BackingField_20();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_set_lastAxis_m77FAC4A378FA78CC827A871984258A60FA83CAE2_inline (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_set_lastAxis_m77FAC4A378FA78CC827A871984258A60FA83CAE2SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_set_lastAxis_m77FAC4A378FA78CC827A871984258A60FA83CAE2_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8200));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8201));
	{
		// public Vector2 lastAxis { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8202));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_0 = ___value0;
		__this->set_U3ClastAxisU3Ek__BackingField_18(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_set_lastDelta_m1943C66837BE7929D58A91A9DFBAB4BBC2A1DB12_inline (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_set_lastDelta_m1943C66837BE7929D58A91A9DFBAB4BBC2A1DB12SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_set_lastDelta_m1943C66837BE7929D58A91A9DFBAB4BBC2A1DB12_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8212));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8213));
	{
		// public Vector2 lastDelta { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8214));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_0 = ___value0;
		__this->set_U3ClastDeltaU3Ek__BackingField_20(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_In_Source_set_updateTime_mDA27AEC2F90C6036B8E6979F74E68528316D1322_inline (SteamVR_Action_In_Source_t6C3FA81DC7F53D302E49E09F5791E612AC7832AB * __this, float ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_In_Source_set_updateTime_mDA27AEC2F90C6036B8E6979F74E68528316D1322SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_In_Source_set_updateTime_mDA27AEC2F90C6036B8E6979F74E68528316D1322_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 5011));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 5012));
	{
		// public float updateTime { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 5013));
		float L_0 = ___value0;
		__this->set_U3CupdateTimeU3Ek__BackingField_5(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_set_axis_m2252BBEBC8C6D4A676ABF0EE270D181EBFB823BB_inline (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_set_axis_m2252BBEBC8C6D4A676ABF0EE270D181EBFB823BBSteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_set_axis_m2252BBEBC8C6D4A676ABF0EE270D181EBFB823BB_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8194));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8195));
	{
		// public Vector2 axis { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8196));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_0 = ___value0;
		__this->set_U3CaxisU3Ek__BackingField_17(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Vector2_Source_set_delta_m8D0A6407047BB76299057CF382CD612137A600F3_inline (SteamVR_Action_Vector2_Source_tE5EC7DB7562ACB7E65ED62D3321A0317906EB9E1 * __this, Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector2_Source_set_delta_m8D0A6407047BB76299057CF382CD612137A600F3SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector2_Source_set_delta_m8D0A6407047BB76299057CF382CD612137A600F3_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8206));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8207));
	{
		// public Vector2 delta { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8208));
		Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_0 = ___value0;
		__this->set_U3CdeltaU3Ek__BackingField_19(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Vector3_Source_get_axis_m0F9A2BF33B9BC6BF5774EC4D7E2EE2B474B28E99_inline (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_get_axis_m0F9A2BF33B9BC6BF5774EC4D7E2EE2B474B28E99SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_get_axis_m0F9A2BF33B9BC6BF5774EC4D7E2EE2B474B28E99_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8607));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8608));
	{
		// public Vector3 axis { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8609));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = __this->get_U3CaxisU3Ek__BackingField_17();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Vector3_Source_get_lastAxis_mB5307EA9C41A76639B02A5FB7C775E14C7E8BE8E_inline (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_get_lastAxis_mB5307EA9C41A76639B02A5FB7C775E14C7E8BE8ESteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_get_lastAxis_mB5307EA9C41A76639B02A5FB7C775E14C7E8BE8E_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8613));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8614));
	{
		// public Vector3 lastAxis { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8615));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = __this->get_U3ClastAxisU3Ek__BackingField_18();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Vector3_Source_get_delta_m4B3DA30643F7D02E80B5AAC93D5BF6D730305BC0_inline (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_get_delta_m4B3DA30643F7D02E80B5AAC93D5BF6D730305BC0SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_get_delta_m4B3DA30643F7D02E80B5AAC93D5BF6D730305BC0_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8619));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8620));
	{
		// public Vector3 delta { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8621));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = __this->get_U3CdeltaU3Ek__BackingField_19();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  SteamVR_Action_Vector3_Source_get_lastDelta_mBCB31D8D0D5F3B64784F01EAFFC7311F1E07B467_inline (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_get_lastDelta_mBCB31D8D0D5F3B64784F01EAFFC7311F1E07B467SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_get_lastDelta_mBCB31D8D0D5F3B64784F01EAFFC7311F1E07B467_RuntimeMethod_var, methodExecutionContextThis, NULL, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8625));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8626));
	{
		// public Vector3 lastDelta { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8627));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = __this->get_U3ClastDeltaU3Ek__BackingField_20();
		return L_0;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_set_lastAxis_m2DA773CD84278414BB2D77495722E7E288C2727C_inline (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_set_lastAxis_m2DA773CD84278414BB2D77495722E7E288C2727CSteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_set_lastAxis_m2DA773CD84278414BB2D77495722E7E288C2727C_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8616));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8617));
	{
		// public Vector3 lastAxis { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8618));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = ___value0;
		__this->set_U3ClastAxisU3Ek__BackingField_18(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_set_lastDelta_mD5A541A52EC64B8BF321E3B9778E37647A968DD1_inline (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_set_lastDelta_mD5A541A52EC64B8BF321E3B9778E37647A968DD1SteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_set_lastDelta_mD5A541A52EC64B8BF321E3B9778E37647A968DD1_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8628));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8629));
	{
		// public Vector3 lastDelta { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8630));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = ___value0;
		__this->set_U3ClastDeltaU3Ek__BackingField_20(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_set_axis_m8D6C550660D5D6EF3AFC2376B964204B4B26C0DF_inline (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_set_axis_m8D6C550660D5D6EF3AFC2376B964204B4B26C0DFSteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_set_axis_m8D6C550660D5D6EF3AFC2376B964204B4B26C0DF_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8610));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8611));
	{
		// public Vector3 axis { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8612));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = ___value0;
		__this->set_U3CaxisU3Ek__BackingField_17(L_0);
		return;
	}
}
IL2CPP_EXTERN_C inline  IL2CPP_METHOD_ATTR void SteamVR_Action_Vector3_Source_set_delta_m425C84C1DE5AD8F12F9F04C1E4C78452C580FE2B_inline (SteamVR_Action_Vector3_Source_t9F1BC9EBF0DBE47509F03164616D145B5F93FB90 * __this, Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  ___value0, const RuntimeMethod* method)
{
	static bool s_Il2CppMethodInitialized;
	if (!s_Il2CppMethodInitialized)
	{
		il2cpp_codegen_initialize_method (SteamVR_Action_Vector3_Source_set_delta_m425C84C1DE5AD8F12F9F04C1E4C78452C580FE2BSteamVR11_MetadataUsageId);
		s_Il2CppMethodInitialized = true;
	}
	DECLARE_METHOD_THIS(methodExecutionContextThis, (&__this));
	DECLARE_METHOD_PARAMS(methodExecutionContextParameters, (&___value0));
	DECLARE_METHOD_EXEC_CTX(methodExecutionContext, SteamVR_Action_Vector3_Source_set_delta_m425C84C1DE5AD8F12F9F04C1E4C78452C580FE2B_RuntimeMethod_var, methodExecutionContextThis, methodExecutionContextParameters, NULL);
	CHECK_METHOD_ENTRY_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8622));
	CHECK_METHOD_EXIT_SEQ_POINT(methodExitChecker, methodExecutionContext, (g_sequencePointsSteamVR + 8623));
	{
		// public Vector3 delta { get; protected set; }
		CHECK_SEQ_POINT(methodExecutionContext, (g_sequencePointsSteamVR + 8624));
		Vector3_tDCF05E21F632FE2BA260C06E0D10CA81513E6720  L_0 = ___value0;
		__this->set_U3CdeltaU3Ek__BackingField_19(L_0);
		return;
	}
}
